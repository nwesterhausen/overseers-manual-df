// File generated by specta. Do not edit!
//
/// lib/Overseer's Manual rust type bindings

/**
 * Options for searching for objects in the game.
 */
export type SearchOptions = {
  /**
   * Number of results to return
   * Default: 16
   */
  limit: string;
  /**
   * Page of results to return
   * Default: 1
   * Note: This is 1-indexed, not 0-indexed
   */
  page: string;
  /**
   * Object types to include in the search
   * Default: All object types
   */
  objectTypes: ObjectType[];
  /**
   * Search query
   * Default: ""
   */
  query: string;
  /**
   * Locations to include in the search results
   * Default: All locations
   */
  locations: RawModuleLocation[];
  /**
   * Biomes to include in the search results
   * Default: All biomes
   */
  biomes: Biome[];
  /**
   * Modules to include in the search results
   * These are specified by their `object_id` which is unique
   * Default: All modules
   */
  modules: string[];
  /**
   * Some specific tags we want to allow searching for as toggles.
   * Default: false ; Requires creatures
   */
  onlyEggLayers: boolean;
  /**
   * Default: false ; Requires creatures
   */
  showDoesNotExist: boolean;
  /**
   * Search filters to apply.
   * Default: None
   */
  filters: SearchFilter[];
};

/**
 * A filter that can be applied to a search. This is to allow tags to be required or optional,
 * but at least specified for each type of object with tags.
 *
 * # Variants
 *
 * * `Creature` - A creature token filter. This will imply that the object must be a creature.
 * * `CreatureCaste` - A creature caste token filter. This will imply that the object must be a creature.
 * * `Inorganic` - An inorganic token filter. This will imply that the object must be an inorganic.
 * * `Object` - Filter for a specific object type. Include multiple filters for multiple object types.
 * * `Biome` - Filter objects that exist in specific biomes. Include multiple filters for multiple biomes.
 * * `Module` - Filter objects that exist in a specific module (by module id). This cannot work for multiple modules (i.e. it implies an OR condition for multiple modules).
 * * `Location` - Filter objects that exist in specific locations. This cannot work for multiple locations (i.e. it implies an OR condition for multiple locations).
 * * `None` - A dummy filter. This will not match any objects.
 */
export type Filter =
  /**
   * A creature token filter
   */
  | { creature: CreatureTag }
  /**
   * A creature caste token filter
   */
  | { creatureCaste: CasteTag }
  /**
   * An inorganic token filter
   */
  | { inorganic: InorganicToken }
  /**
   * A plant token filter
   */
  | { plant: PlantTag }
  /**
   * Filter for a specific object type
   */
  | { object: ObjectType }
  /**
   * Filter objects that exist in specific biomes
   */
  | { biome: Biome }
  /**
   * Filter objects that exist in specific modules
   */
  | { module: string }
  /**
   * Filter objects that exist in specific locations
   */
  | { location: RawModuleLocation }
  /**
   * Filter objects that match part of the search query
   */
  | { searchQuery: string }
  /**
   * Filter specifically by part of the identifier of the raw object
   */
  | { identifier: string }
  /**
   * A dummy filter
   */
  | "none";

/**
 * A filter that can be applied to a search. Multiple `SearchFilter`s can be combined to create complex search queries.
 *
 * # Fields
 *
 * * `required` - Whether the filter is required (or just optional) to be part of an object for a result to be included.
 * Using this, you can specify that the filter array is connected by an `AND` or an `OR`.
 * * `filter` - A list of filters that must resolve to true for the object to be included in the search results.
 */
export type SearchFilter = {
  /**
   * Whether the filter is required (or just optional) to be part of an object
   */
  required: boolean;
  /**
   * Whether the filter is inverted (i.e. the object must not match the filter)
   */
  inverted: boolean;
  /**
   * The filter to check against.
   */
  filters: Filter[];
};

/**
 * A summary of the parsing process.
 */
export type Summary = {
  /**
   * The total number of raws parsed.
   */
  totalRaws: string;
  /**
   * The number of raws of each type.
   */
  counts: [ObjectType, string][];
  /**
   * The number of raws of each location.
   */
  locationTotals: [RawModuleLocation, string][];
  /**
   * The duration of the parsing process.
   */
  parsingDuration: string;
  /**
   * The duration of the saving all raws to the store.
   */
  saveToStoreDuration: string;
  /**
   * The duration of the filtering process, which includes these steps:
   *
   * - Making search lookup
   * - Putting all graphics in the graphic store
   * - Putting all tile pages in the tile page store
   */
  filteringDuration: string;
  /**
   * The object types that were allowed.
   */
  objectsAllowed: ObjectType[];
  /**
   * The locations that were allowed.
   */
  locations: RawModuleLocation[];
};

/**
 * Options for getting graphics for an object.
 */
export type GraphicsOptions = {
  /**
   * The identifier of the object we want to get graphics for
   */
  identifier: string;
  /**
   * Should we include all graphics for that `object_id` or just the first one?
   * Default: false
   */
  allGraphics: boolean;
};

/**
 * Graphics search results
 */
export type GraphicsResults = {
  /**
   * The resulting graphics
   */
  matchingGraphics: Graphic[] | null;
  /**
   * The tile page(s) that the graphics are on
   */
  tilePages: TilePage[];
};

/**
 * Specific storage for graphics and tile pages.
 *
 * This is separate from the `Storage` struct because it reduces the locks on
 * the `Storage` struct. We don't need to lock the `Storage` struct when we're
 * just looking for graphics or tile pages.
 *
 * The `graphics_store` and `tile_page_store` are used to store the graphics
 * and tile pages parsed from the raws. This is done so that we don't have to
 * parse the raws every time we want to get a graphic or tile page.
 */
export type GraphicStorage = {
  /**
   * Holds all graphics by their identifier
   */
  graphics_store: { [key in string]: Graphic[] };
  /**
   * Holds all tile pages by their identifier
   */
  tile_page_store: { [key in string]: TilePage };
};

/**
 * Storage for module info files.
 *
 * This is separate from the `Storage` struct because it reduces the locks on
 * the `Storage` struct. We don't need to lock the `Storage` struct when we're
 * just looking for module info files.
 */
export type ModuleInfoStorage = {
  /**
   * Holds all module info files
   */
  module_info_store: InfoFile[];
};

/**
 * Information about the build, including version, Rust version, optimization level, debug status, dependencies, build time, and git commit hash.
 */
export type Info = {
  /**
   * App Version
   */
  version: string;
  /**
   * Output of `rustc -V`
   */
  rustVersion: string;
  /**
   * Compile-time optimization level
   */
  optimizationLevel: string;
  /**
   * Whether the app was built in debug mode
   */
  inDebug: boolean;
  /**
   * Dependencies used to build the app (includes transitive dependencies)
   */
  dependencies: [string, string][];
  /**
   * Build time in UTC
   */
  buildTime: string;
  /**
   * Git commit hash
   */
  gitCommitHash: string;
};

/**
 * Function: `parse_all_raws_info`
 *
 * Tracked data is the duration of the event and the total number of files parsed, which
 * can allow for some interesting analysis.
 */
export type ParseAllRawsInfo = {
  /**
   * The duration of the event.
   *
   * This is from `format!("{:?}", duration)` and usually looks something like "23.1234123ms"
   */
  duration: string;
  /**
   * The total number of files parsed.
   *
   * Can be used to calculate the average number of files parsed per second.
   */
  total_files: string;
};

/**
 * Function: `parse_and_store_raws`
 *
 * Tracked data is the duration of the event, the total number of files parsed, the duration
 * of storing the files, the total time elapsed, the types of raws parsed, and the locations
 * parsed from.
 *
 * This function on the backend is responsible for parsing the raws and storing them in memory.
 * The instructions for what raws to parse and where to parse them from are provided by the
 * frontend.
 */
export type ParseAndStoreRaws = {
  /**
   * The total number of files parsed.
   *
   * Can be used to calculate the average number of raws parsed per second.
   */
  total_raws_parsed: string;
  /**
   * The total elapsed time.
   *
   * This is from `format!("{:?}", duration2_test)` and usually looks something like "23.1234123ms"
   */
  elapsed_time: string;
  /**
   * The types of raws parsed.
   *
   * This is from `json!(options.raws_to_parse).to_string()` and usually looks something like
   * `[\"Creature\",\"MaterialTemplate\"]`
   */
  parsed_raw_types: string;
  /**
   * The locations parsed from.
   *
   * This is from `json!(options.locations_to_parse).to_string()` and usually looks something like
   * `[\"Vanilla\",\"InstalledMods\"]`
   */
  parsed_raw_locations: string;
};

/**
 * Update Skipped
 *
 * Tracked data is whether the update is skipped by the end user, and the versions involved.
 */
export type SkipUpdate = {
  /**
   * The version the user is currently on.
   */
  current_version: string;
  /**
   * The version the user is skipping.
   */
  to_version: string;
};

/**
 * Apply Update
 *
 * Tracked data is the versions involved.
 */
export type ApplyUpdate = {
  /**
   * The version the user is applying.
   */
  to_version: string;
};

/**
 * App Launch
 *
 * No data is collected, just the event.
 */
export type AppStarted = Record<string, never>;

/**
 * App Exit
 *
 * No data is collected, just the event.
 */
export type AppExited = Record<string, never>;

/**
 * An enum representing a biome.
 */
export type Biome =
  /**
   * A mountain biome.
   */
  | "Mountain"
  /**
   * A mountainous biome
   */
  | "Mountains"
  /**
   * A glacier biome.
   */
  | "Glacier"
  /**
   * A tundra biome.
   */
  | "Tundra"
  /**
   * A temperate freshwater swamp
   */
  | "SwampTemperateFreshwater"
  /**
   * A temperate saltwater swamp
   */
  | "SwampTemperateSaltwater"
  /**
   * A temperate freshwater marsh
   */
  | "MarshTemperateFreshwater"
  /**
   * A temperate saltwater marsh
   */
  | "MarshTemperateSaltwater"
  /**
   * A tropical freshwater swamp
   */
  | "SwampTropicalFreshwater"
  /**
   * A tropical saltwater swamp
   */
  | "SwampTropicalSaltwater"
  /**
   * A mangrove swamp
   */
  | "SwampMangrove"
  /**
   * A tropical freshwater marsh
   */
  | "MarshTropicalFreshwater"
  /**
   * A tropical saltwater marsh
   */
  | "MarshTropicalSaltwater"
  /**
   * A taiga forest
   */
  | "ForestTaiga"
  /**
   * A taiga
   */
  | "Taiga"
  /**
   * A temperate conifer forest
   */
  | "ForestTemperateConifer"
  /**
   * A temperate broadleaf forest
   */
  | "ForestTemperateBroadleaf"
  /**
   * A tropical conifer forest
   */
  | "ForestTropicalConifer"
  /**
   * A tropical broadleaf forest
   */
  | "ForestTropicalDryBroadleaf"
  /**
   * A tropical moist broadleaf forest
   */
  | "ForestTropicalMoistBroadleaf"
  /**
   * A temperate grassland
   */
  | "GrasslandTemperate"
  /**
   * A temperate savanna
   */
  | "SavannaTemperate"
  /**
   * A temperate shrubland
   */
  | "ShrublandTemperate"
  /**
   * A tropical grassland
   */
  | "GrasslandTropical"
  /**
   * A tropical savanna
   */
  | "SavannaTropical"
  /**
   * A tropical shrubland
   */
  | "ShrublandTropical"
  /**
   * A badland desert
   */
  | "DesertBadland"
  /**
   * A rocky desert
   */
  | "DesertRock"
  /**
   * A sandy desert
   */
  | "DesertSand"
  /**
   * A tropical ocean
   */
  | "OceanTropical"
  /**
   * A temperate ocean
   */
  | "OceanTemperate"
  /**
   * An arctic ocean
   */
  | "OceanArctic"
  /**
   * A temperate freshwater pool
   */
  | "PoolTemperateFreshwater"
  /**
   * A temperate brackishwater pool
   */
  | "PoolTemperateBrackishwater"
  /**
   * A temperate saltwater pool
   */
  | "PoolTemperateSaltwater"
  /**
   * A tropical freshwater pool
   */
  | "PoolTropicalFreshwater"
  /**
   * A tropical brackishwater pool
   */
  | "PoolTropicalBrackishwater"
  /**
   * A tropical saltwater pool
   */
  | "PoolTropicalSaltwater"
  /**
   * A temperate freshwater lake
   */
  | "LakeTemperateFreshwater"
  /**
   * A temperate brackishwater lake
   */
  | "LakeTemperateBrackishwater"
  /**
   * A temperate saltwater lake
   */
  | "LakeTemperateSaltwater"
  /**
   * A tropical freshwater lake
   */
  | "LakeTropicalFreshwater"
  /**
   * A tropical brackishwater lake
   */
  | "LakeTropicalBrackishwater"
  /**
   * A tropical saltwater lake
   */
  | "LakeTropicalSaltwater"
  /**
   * A temperate freshwater river
   */
  | "RiverTemperateFreshwater"
  /**
   * A temperate brackishwater river
   */
  | "RiverTemperateBrackishwater"
  /**
   * A temperate saltwater river
   */
  | "RiverTemperateSaltwater"
  /**
   * A tropical freshwater river
   */
  | "RiverTropicalFreshwater"
  /**
   * A tropical brackishwater river
   */
  | "RiverTropicalBrackishwater"
  /**
   * A tropical saltwater river
   */
  | "RiverTropicalSaltwater"
  /**
   * A subterranean freshwater source
   */
  | "SubterraneanWater"
  /**
   * A subterranean chasm
   */
  | "SubterraneanChasm"
  /**
   * A subterranean magma pool
   */
  | "SubterraneanLava"
  /**
   * All the main biomes
   */
  | "AllMain"
  /**
   * Any land biome
   */
  | "AnyLand"
  /**
   * Any ocean biome
   */
  | "AnyOcean"
  /**
   * Any lake biome
   */
  | "AnyLake"
  /**
   * Any temperate lake biome
   */
  | "AnyTemperateLake"
  /**
   * Any tropical lake biome
   */
  | "AnyTropicalLake"
  /**
   * Any river
   */
  | "AnyRiver"
  /**
   * Any temperate river
   */
  | "AnyTemperateRiver"
  /**
   * Any tropical river
   */
  | "AnyTropicalRiver"
  /**
   * Any pool
   */
  | "AnyPool"
  /**
   * Any non-freezing biome
   */
  | "NotFreezing"
  /**
   * Any temperate biome
   */
  | "AnyTemperate"
  /**
   * Any tropical biome
   */
  | "AnyTropical"
  /**
   * Any forest biome
   */
  | "AnyForest"
  /**
   * Any shrubland biome
   */
  | "AnyShrubland"
  /**
   * Any grassland biome
   */
  | "AnyGrassland"
  /**
   * Any savanna biome
   */
  | "AnySavanna"
  /**
   * Any temperate forest biome
   */
  | "AnyTemperateForest"
  /**
   * Any tropical forest biome
   */
  | "AnyTropicalForest"
  /**
   * Any temperate broadleaf forest biome
   */
  | "AnyTemperateBroadleaf"
  /**
   * Any tropical broadleaf forest biome
   */
  | "AnyTropicalBroadleaf"
  /**
   * Any wetland biome
   */
  | "AnyWetland"
  /**
   * Any temperate wetland biome
   */
  | "AnyTemperateWetland"
  /**
   * Any tropical wetland biome
   */
  | "AnyTropicalWetland"
  /**
   * Any tropical marsh biome
   */
  | "AnyTropicalMarsh"
  /**
   * Any temperate marsh biome
   */
  | "AnyTemperateMarsh"
  /**
   * Any tropical swamp biome
   */
  | "AnyTropicalSwamp"
  /**
   * Any temperate swamp biome
   */
  | "AnyTemperateSwamp"
  /**
   * Any desert biome
   */
  | "AnyDesert"
  /**
   * An unknown token
   */
  | "Unknown";

/**
 * The `Creature` struct represents a creature in a Dwarf Fortress, with the properties
 * that can be set in the raws. Not all the raws are represented here, only the ones that
 * are currently supported by the library.
 *
 * Some items like `CREATURE_VARIATION` and `CREATURE_VARIATION_CASTE` are saved in their raw
 * format. `SELECT_CREATURE` is saved here as a sub-creature object with all the properties
 * from that raw. This is because the `SELECT_CREATURE` raws are used to create new creatures
 * based on the properties of the creature they are applied to. But right now the application
 * of those changes is not applied, in order to preserve the original creature. So instead,
 * they are saved and can be applied later (at the consumer's discretion).
 */
export type Creature = {
  /**
   * The `metadata` field is of type `RawMetadata` and is used to provide additional information
   * about the raws the `Creature` is found in.
   */
  metadata?: Metadata | null;
  /**
   * The `identifier` field is a string that represents the identifier of the creature. It is used
   * to uniquely identify the creature (however it is not guaranteed to be unique across object types
   * or all raws parsed, *especially* if you are parsing multiple versions of the same raws).
   */
  identifier: string;
  /**
   * The `castes` field is a vector of `Caste` objects. Each `Caste` object represents a caste of the
   * creature. For example, a creature may have a `MALE` and `FEMALE` caste. Each `Caste` object has
   * its own properties, such as `name`, `description`, `body`, `flags`, etc.
   *
   * A lot of the properties of the `Creature` object are actually properties of a special `Caste`, `ALL`.
   */
  castes: Caste[];
  /**
   * Any tags that are not parsed into their own fields are stored in the `tags` field.
   */
  tags?: CreatureTag[] | null;
  /**
   * The biomes that this creature can be found in
   */
  biomes?: Biome[] | null;
  /**
   * Pref strings are things that make dwarves (or others?) like or dislike the creature.
   */
  prefStrings?: string[] | null;
  /**
   * The tile that represents the creature in the game (classic mode)
   */
  tile?: Tile | null;
  /**
   * Determines the chances of a creature appearing within its environment, with higher values resulting in more frequent appearance.
   *
   * Also affects the chance of a creature being brought in a caravan for trading. The game effectively considers all creatures that
   * can possibly appear and uses the FREQUENCY value as a weight - for example, if there are three creatures with frequencies 10/25/50,
   * the creature with `[FREQUENCY:50]` will appear approximately 58.8% of the time.
   *
   * Defaults to 50 if not specified.
   *
   * Minimum value is 0, maximum value is 100.
   *
   * Note: not to be confused with `[POP_RATIO]`.
   */
  frequency?: number | null;
  /**
   * The minimum/maximum numbers of how many creatures per spawned cluster. Vermin fish with this token in combination with
   * temperate ocean and river biome tokens will perform seasonal migrations.
   *
   * Defaults to [1,1] if not specified.
   */
  clusterNumber?: [number, number] | null;
  /**
   * The minimum/maximum numbers of how many of these creatures are present in each world map tile of the appropriate region.
   *
   * Defaults to [1,1] if not specified.
   */
  populationNumber?: [number, number] | null;
  /**
   * Depth that the creature appears underground. Numbers can be from 0 to 5. 0 is actually 'above ground' and can be used if the
   * creature is to appear both above and below ground. Values from 1-3 are the respective cavern levels, 4 is the magma sea and
   * 5 is the HFS.
   *
   * A single argument may be used instead of min and max.
   *
   * Civilizations that can use underground plants or animals will only export (via the embark screen or caravans) things that are available at depth 1.
   *
   * Default [0, 0] (aboveground)
   */
  undergroundDepth?: [number, number] | null;
  /**
   * Like `[BABYNAME]`, but applied regardless of caste.
   */
  generalBabyName?: SingPlurName | null;
  /**
   * Like `[CHILDNAME]`, but applied regardless of caste.
   */
  generalChildName?: SingPlurName | null;
  /**
   * The generic name for any creature of this type - will be used when distinctions between caste are unimportant. For names for specific castes,
   * use `[CASTE_NAME]` instead. If left undefined, the creature will be labeled as "nothing" by the game.
   */
  name: Name;
  /**
   * Copies another specified creature. This will override any definitions made before it; essentially, it makes this creature identical to the other one,
   * which can then be modified. Often used in combination with `[APPLY_CREATURE_VARIATION]` to import standard variations from a file.
   *
   * The vanilla giant animals and animal peoples are examples of this token combination.
   */
  copyTagsFrom?: string | null;
  /**
   * Applies the specified creature variation.
   *
   * These are stored "in the raw", i.e. how they appear in the raws. They are not handled until the end of the parsing process.
   */
  applyCreatureVariation?: string[] | null;
  /**
   * A generated field that is used to uniquely identify this object. It is generated from the `metadata`, `identifier`, and `ObjectType`.
   *
   * This field is always serialized.
   */
  objectId: string;
  /**
   * Various `SELECT_CREATUR` modifications.
   */
  selectCreatureVariation?: SelectCreature[] | null;
};

/**
 * An enum representing a creature tag.
 */
export type CreatureTag =
  /**
   * If set, the creature will blink between its `[Tile]` and its `[AltTile]`.
   *
   * Arguments:
   *
   * - the 'character' or tile number
   *
   * Appears as `ALTTILE:123`
   */
  | {
      AltTile: {
        /**
         * The character or tile number
         */
        character: number;
      };
    }
  /**
   * Applies the specified creature variation with the given arguments to the creature. See `[ApplyCreatureVariation]` for more information.
   *
   * Appears as `APPLY_CREATURE_VARIATION:SOME_VARIATION` or `APPLY_CREATURE_VARIATION:SOME_VARIATION:ARG1:ARG2:ARG3`
   */
  | {
      ApplyCreatureVariation: {
        /**
         * Creature variation ID to apply
         */
        id: string;
        /**
         * (Optional) any number of arguments to pass to the creature variation
         */
        args: string[];
      };
    }
  /**
   * Applies the effects of all pending `[CV_ADD_TAG]` and `[CV_REMOVE_TAG]` tokens that have been defined in the current creature (so far).
   *
   * Appears as `APPLY_CURRENT_CREATURE_VARIATION`
   */
  | "ApplyCurrentCreatureVariation"
  /**
   * Enables the creature to be kept in artificial hives by beekeepers.
   *
   * Appears as `ARTIFICIAL_HIVEABLE`
   */
  | "ArtificialHiveable"
  /**
   * Select a biome the creature may appear in.
   *
   * Appears as `BIOME:SomeBiomeId`
   */
  | {
      Biome: {
        /**
         * Biome identifier
         */
        id: string;
      };
    }
  /**
   * Defines a caste
   */
  | {
      Caste: {
        /**
         * The name of the caste
         */
        name: string;
      };
    }
  /**
   * Multiplies frequency by a factor of (integer)%.
   *
   * Appears as `CHANGE_FREQUENCY_PERC:100`
   */
  | {
      ChangeFrequencyPercent: {
        /**
         * The percentage to change the frequency by
         */
        percent: number;
      };
    }
  /**
   * The minimum/maximum numbers of how many creatures per spawned cluster. Vermin fish with this token in
   * combination with temperate ocean and river biome tokens will perform seasonal migrations.
   *
   * Defaults to 1:1 if not specified.
   *
   * Appears as `CLUSTER_NUMBER:1:1`
   */
  | {
      ClusterNumber: {
        /**
         * The minimum number of creatures per spawned cluster
         */
        min: number;
        /**
         * The maximum number of creatures per spawned cluster
         */
        max: number;
      };
    }
  /**
   * Copies another specified creature. This will override any definitions made before it; essentially, it makes this creature identical to the other one, which can then
   * be modified. Often used in combination with `[APPLY_CREATURE_VARIATION]` to import standard variations from a file. The vanilla giant animals and animal peoples are
   * examples of this token combination.
   *
   * Arguments:
   *
   * * `creature`: The identifier of the creature to copy
   *
   * Appears as `COPY_TAGS_FROM:SomeCreature`
   */
  | {
      CopyTagsFrom: {
        /**
         * The identifier of the creature to copy
         */
        creature: string;
      };
    }
  /**
   * Creatures active in their civilization's military will use this tile instead.
   *
   * Appears as `CREATURE_SOLDIER_TILE:123`
   */
  | {
      CreatureSoldierTile: {
        /**
         * The character or tile number
         */
        character: number;
      };
    }
  /**
   * The symbol of the creature in ASCII mode.
   *
   * Appears as `CREATURE_TILE:123`
   */
  | {
      CreatureTile: {
        /**
         * The character or tile number
         */
        character: number;
      };
    }
  /**
   * The color of the creature's tile.
   *
   * Arguments:
   *
   * * `foreground`: The foreground color
   * * `background`: The background color
   * * `brightness`: The brightness of the color
   *
   * Appears as `COLOR:0:0:0`
   */
  | {
      Color: {
        /**
         * The foreground color
         */
        foreground: number;
        /**
         * The background color
         */
        background: number;
        /**
         * The brightness of the color
         */
        brightness: number;
      };
    }
  /**
   * Adding this token to a creature prevents it from appearing in generated worlds (unless it's marked as always present for a particular
   * civilization). For example, adding it to dogs will lead to worlds being generated without dogs in them. Also removes the creature from the
   * object testing arena's spawn list. If combined with [Fanciful], artistic depictions of the creature will occur regardless. Used by centaurs,
   * chimeras and griffons in the vanilla game.
   *
   * Appears as `DOES_NOT_EXIST`
   */
  | "DoesNotExist"
  /**
   * Makes the creature appear as a large 3x3 wagon responsible for carrying trade goods, pulled by two `[WAGON_PULLER]` creatures and driven by a merchant.
   *
   * Appears as `EQUIPMENT_WAGON`
   */
  | "EquipmentWagon"
  /**
   * The creature is considered evil and will only show up in evil biomes. Civilizations with `[EntityToken::UseEvilAnimals]` can domesticate them
   * regardless of exotic status. Has no effect on cavern creatures except to restrict taming. A civilization with evil creatures can colonize evil areas.
   *
   * Appears as `EVIL`
   */
  | "Evil"
  /**
   * The creature is a thing of legend and known to all civilizations. Its materials cannot be requested or preferred. The tag also adds some art value modifiers.
   * Used by a number of creatures. Conflicts with `[CasteToken::CommonDomestic]`.
   */
  | "Fanciful"
  /**
   * Determines the chances of a creature appearing within its environment, with higher values resulting in more frequent appearance. Also affects the chance of a
   * creature being brought in a caravan for trading. The game effectively considers all creatures that can possibly appear and uses the FREQUENCY value as a weight
   *
   * For example, if there are three creatures with frequencies 10/25/50, the creature with [FREQUENCY:50] will appear approximately 58.8% of the time.
   *
   * Defaults to 50 if not specified. Not to be confused with `[PopulationRatio]`.
   *
   * Appears as `FREQUENCY:50`
   */
  | {
      Frequency: {
        /**
         * The frequency of the creature, a number between 0 and 100 (inclusive)
         */
        frequency: number;
      };
    }
  /**
   * Name of the creatures baby form. Applies to all castes but can be overridden by `[CasteToken::BabyName]`.
   *
   * Appears as `GENERAL_BABY_NAME:BabyName:BabyNames`
   */
  | {
      GeneralBabyName: {
        /**
         * The name of the baby
         */
        singular: string;
        /**
         * The plural name of the baby
         */
        plural: string;
      };
    }
  /**
   * Name of the creatures child form. Applies to all castes but can be overridden by `[CasteToken::ChildName]`.
   *
   * Appears as `GENERAL_CHILD_NAME:ChildName:ChildNames`
   */
  | {
      GeneralChildName: {
        /**
         * The name of the child
         */
        singular: string;
        /**
         * The plural name of the child
         */
        plural: string;
      };
    }
  /**
   * Found on procedurally generated creatures like forgotten beasts, titans, demons, angels, and night creatures. Cannot be specified in user-defined raws.
   *
   * Appears as `GENERATED`
   */
  | "Generated"
  /**
   * The color of the creature's glow tile.
   *
   * Arguments:
   *
   * * `foreground`: The foreground color
   * * `background`: The background color
   * * `brightness`: The brightness of the color
   *
   * Appears as `GLOWCOLOR:0:0:0`
   */
  | {
      GlowColor: {
        /**
         * The foreground color
         */
        foreground: number;
        /**
         * The background color
         */
        background: number;
        /**
         * The brightness of the color
         */
        brightness: number;
      };
    }
  /**
   * The creature's tile when it is glowing.
   *
   * Arguments:
   *
   * * `character`: The character or tile number
   *
   * Appears as `GLOWTILE:123`
   */
  | {
      GlowTile: {
        /**
         * The character or tile number
         */
        character: number;
      };
    }
  /**
   * Creature is considered good and will only show up in good biomes - unicorns, for example. Civilizations with `[EntityToken::UseGoodAnimals]` can
   * domesticate them regardless of exotic status. Has no effect on cavern creatures except to restrict taming. A civilization that has good
   * creatures can colonize good areas in world-gen.
   *
   * Appears as `GOOD`
   */
  | "Good"
  /**
   * When using tags from an existing creature, inserts new tags at the end of the creature.
   *
   * Appears as `GO_TO_END`
   */
  | "GoToEnd"
  /**
   * When using tags from an existing creature, inserts new tags at the beginning of the creature.
   *
   * Appears as `GO_TO_START`
   */
  | "GoToStart"
  /**
   * When using tags from an existing creature, inserts new tags after the specified tag.
   *
   * Arguments:
   *
   * * `tag`: The tag to insert after
   *
   * Appears as `GO_TO_TAG:TAG`
   */
  | {
      GoToTag: {
        /**
         * The tag to insert after
         */
        tag: string;
      };
    }
  /**
   * What product is harvested from beekeeping.
   *
   * Arguments:
   *
   * * `number`: The number of products harvested
   * * `time`: The time it takes before the next harvest
   * * `item tokens`: The item tokens that are harvested (some arbitrary list of items)
   *
   * Appears as `HARVEST_PRODUCT:1:1:ITEM_TOKENS`
   */
  | {
      HarvestProduct: {
        /**
         * The number of products harvested
         */
        number: number;
        /**
         * The time it takes before the next harvest
         */
        time: number;
        /**
         * The item tokens that are harvested (some arbitrary list of items)
         */
        item_tokens: string[];
      };
    }
  /**
   * This is the core requisite tag allowing the creature to spawn as a wild animal in the appropriate biomes. Requires specifying a [Biome] in which the creature will spawn.
   * Does not require specifying a frequency, population number, or cluster number.
   *
   * This tag stacks with `[CasteToken::Megabeast]`, `[CasteToken::SemiMegabeast]`, or `[CasteToken::NightCreatureHunter]`; if used with one of these tags, the creature will spawn
   * as both a boss and as a wild animal. This tag does not stack with `[CasteToken::FeatureBeast]` and if both are used the creature will not spawn. This tag is unaffected by
   * `[CasteToken::Demon]`.
   *
   * Appears as `LARGE_ROAMING`
   */
  | "LargeRoaming"
  /**
   * Allows you to play as a wild animal of this species in adventurer mode. Prevents trading of (tame) instances of this creature in caravans.
   *
   * Appears as `LOCAL_POPS_CONTROLLABLE`
   */
  | "LocalPopsControllable"
  /**
   * Wild animals of this species may occasionally join a civilization. Prevents trading of (tame) instances of this creature in caravans.
   *
   * Appears as `LOCAL_POPS_PRODUCE_HEROES`
   */
  | "LocalPopsProduceHeroes"
  /**
   * The creatures will scatter if they have this tag, or form tight packs if they don't.
   *
   * Appears as `LOOSE_CLUSTERS`
   */
  | "LooseClusters"
  /**
   * Marks if the creature is an actual real-life creature. Only used for age-names at present.
   */
  | "Mundane"
  /**
   * The generic name for any creature of this type - will be used when distinctions between caste are unimportant. For names for specific castes, use `[CASTE_NAME]` instead.
   * If left undefined, the creature will be labeled as "nothing" by the game.
   *
   * Appears as `NAME:Name:Names:NameAdj`
   */
  | {
      Name: {
        /**
         * The name of the creature
         */
        name: string;
        /**
         * The plural name of the creature
         */
        plural_name: string;
        /**
         * The adjective form of the creature's name
         */
        adjective: string;
      };
    }
  /**
   * Adds a material to selected materials. Used immediately after `[SELECT_MATERIAL]`.
   *
   * Appears as `PLUS_MATERIAL:Material`
   */
  | {
      PlusMaterial: {
        /**
         * The material to add
         */
        material: string;
      };
    }
  /**
   * The minimum/maximum numbers of how many of these creatures are present in each world map tile of the appropriate region. Defaults to 1:1 if not specified.
   *
   * Appears as `POPULATION_NUMBER:1:1`
   */
  | {
      PopulationNumber: {
        /**
         * The minimum number of creatures per spawned cluster
         */
        min: number;
        /**
         * The maximum number of creatures per spawned cluster
         */
        max: number;
      };
    }
  /**
   * Sets what other creatures prefer about this creature.
   *
   * "Urist likes dwarves for their beards."
   *
   * Multiple entries will be chosen from at random. Creatures lacking a PREFSTRING token will never appear under another's preferences.
   *
   * Appears as `PREFSTRING:PrefString`
   */
  | {
      PrefString: {
        /**
         * The preference string
         */
        pref_string: string;
      };
    }
  /**
   * The generic name for members of this profession, at the creature level. In order to give members of specific castes different names for professions,
   * use `[CASTE_PROFESSION_NAME]` instead.
   *
   * Appears as `PROFESSION_NAME:ProfessionId:ProfessionName:ProfessionNames`
   */
  | {
      ProfessionName: {
        /**
         * The profession id
         */
        id: string;
        /**
         * The name of the profession
         */
        name: string;
        /**
         * The plural name of the profession
         */
        plural_name: string;
      };
    }
  /**
   * Removes a material from the creature.
   *
   * Appears as `REMOVE_MATERIAL:Material`
   */
  | {
      RemoveMaterial: {
        /**
         * The material to remove
         */
        material: string;
      };
    }
  /**
   * Removes a tissue from the creature.
   *
   * Appears as `REMOVE_TISSUE:Tissue`
   */
  | {
      RemoveTissue: {
        /**
         * The tissue to remove
         */
        tissue: string;
      };
    }
  /**
   * The creature will only show up in "savage" biomes. Has no effect on cavern creatures. Cannot be combined with [GOOD] or [EVIL].
   *
   * Appears as `SAVAGE`
   */
  | "Savage"
  /**
   * Adds an additional previously defined caste to the selection. Used after `[SELECT_CASTE]`.
   *
   * Appears as `SELECT_ADDITIONAL_CASTE:Caste`
   */
  | {
      SelectAdditionalCaste: {
        /**
         * The caste to add
         */
        caste: string;
      };
    }
  /**
   * Selects a previously defined caste
   *
   * Appears as `SELECT_CASTE:Caste`
   */
  | {
      SelectCaste: {
        /**
         * The caste to select
         */
        caste: string;
      };
    }
  /**
   * Selects a locally defined material. Can be ALL.
   *
   * Appears as `SELECT_MATERIAL:Material`
   */
  | {
      SelectMaterial: {
        /**
         * The material to select
         */
        material: string;
      };
    }
  /**
   * Selects a tissue for editing.
   *
   * Appears as `SELECT_TISSUE:Tissue`
   */
  | {
      SelectTissue: {
        /**
         * The tissue to select
         */
        tissue: string;
      };
    }
  /**
   * Boasting speeches relating to killing this creature. Examples include `text_dwarf.txt` and `text_elf.txt` in `data\vanilla\vanilla_creatures\objects`.
   *
   * Appears as `SLAIN_CASTE:SomeSpeechSet`
   */
  | {
      SlainSpeech: {
        /**
         * The speech set to use
         */
        slain_speech: string;
      };
    }
  /**
   * Determines how keen a creature's sense of smell is - lower is better. At 10000, a creature cannot smell at all.
   *
   * Appears as `SMELL_TRIGGER:10000`
   */
  | {
      SmellTrigger: {
        /**
         * The smell trigger
         */
        smell_trigger: number;
      };
    }
  /**
   * If this creature is active in its civilization's military, it will blink between its default tile and this one.
   *
   * Appears as `SOLDIER_ALTTILE:SomeTile`
   */
  | {
      SoldierAltTile: {
        /**
         * The tile to use
         */
        tile: string;
      };
    }
  /**
   * Found on generated angels. This is the historical figure ID of the deity with which the angel is associated. Since HFIDs are not predictable before worldgen,
   * this isn't terribly usable in mods.
   *
   * Appears as `SOURCE_HFID:123`
   */
  | {
      SourceHfid: {
        /**
         * The historical figure ID
         */
        hfid: number;
      };
    }
  /**
   * Sets what religious spheres the creature is aligned to, for purposes of being worshipped via the [POWER] token. Also affects the layout of hidden fun stuff,
   * and the creature's name.
   *
   * Appears as `SPHERE:SomeSphere`
   */
  | {
      Sphere: {
        /**
         * The sphere to use
         */
        sphere: string;
      };
    }
  /**
   * Begins defining a tissue in the creature file. Follow this with standard tissue definition tokens to define the tissue properties.
   *
   * Arguments:
   *
   * * `name`: The name of the tissue
   *
   * Appears as `TISSUE:SomeTissue`
   */
  | {
      Tissue: {
        /**
         * The name of the tissue
         */
        name: string;
      };
    }
  /**
   * A large swarm of vermin can be disturbed, usually in adventurer mode.
   *
   * Appears as `TRIGGERABLE_GROUP:5:10`
   */
  | {
      TriggerableGroup: {
        /**
         * The minimum number of vermin in the swarm
         */
        min: number;
        /**
         * The maximum number of vermin in the swarm
         */
        max: number;
      };
    }
  /**
   * Creature will occur in every region with the correct biome. Does not apply to [EVIL]/[GOOD] tags.
   *
   * Appears as `UBIQUITOUS`
   */
  | "Ubiquitous"
  /**
   * Depth that the creature appears underground. Numbers can be from 0 to 5. 0 is actually 'above ground' and can be used if the creature is to appear both above and below ground.
   * Values from 1-3 are the respective cavern levels, 4 is the magma sea and 5 is the HFS. A single argument may be used instead of min and max. Demons use only 5:5;
   * user-defined creatures with both this depth and [FLIER] will take part in the initial wave from the HFS alongside generated demons, but without [FLIER] they will only spawn from
   * the map edges. Civilizations that can use underground plants or animals will only export (via the embark screen or caravans) things that are available at depth 1.
   *
   * Arguments:
   *
   * * `min`: The minimum depth
   * * `max`: The maximum depth
   *
   * Appears as `UNDERGROUND_DEPTH:1:3`
   */
  | {
      UndergroundDepth: {
        /**
         * The minimum depth
         */
        min: number;
        /**
         * The maximum depth
         */
        max: number;
      };
    }
  /**
   * Defines a new caste derived directly from a previous caste. The new caste inherits all properties of the old one. The effect of this tag is automatic if one has not yet defined any castes:
   * "Any caste-level tag that occurs before castes are explicitly declared is saved up and placed on any caste that is declared later, unless the caste is explicitly derived from another caste."
   *
   * "When DF detects duplicate tokens in the raws of the same object, a failsafe seems to kick in; it takes the bottom-most of the duplicates, and disregards the others. In the case of tokens
   * added by a mod, it prioritizes the duplicate in the mod." This means that if a tag is defined in the base-caste and redefined in the derived caste, the derived tag overwrites the base tag.
   *
   * Arguments:
   *
   * * `caste`: The name of the new caste
   * * `original_caste`: The name of the original caste to copy
   *
   * Appears as `USE_CASTE:SomeCaste:SomeOriginalCaste`
   */
  | {
      UseCaste: {
        /**
         * The name of the new caste
         */
        caste: string;
        /**
         * The name of the original caste to copy
         */
        original_caste: string;
      };
    }
  /**
   * Defines a new local creature material and populates it with all properties defined in the specified local creature material.
   *
   * Arguments:
   *
   * * `material`: The name of the new material
   * * `original_material`: The name of the original material to copy
   *
   * Appears as `USE_MATERIAL:SomeMaterial:SomeOriginalMaterial`
   */
  | {
      UseMaterial: {
        /**
         * The name of the new material
         */
        material: string;
        /**
         * The name of the original material to copy
         */
        original_material: string;
      };
    }
  /**
   * Defines a new local creature material and populates it with all properties defined in the specified template. There seems to be a limit of 200 materials per creature.
   *
   * Arguments:
   *
   * * `material`: The name of the new material
   * * `template`: The name of the template to copy
   *
   * Appears as `USE_MATERIAL_TEMPLATE:SomeMaterial:SomeTemplate`
   */
  | {
      UseMaterialTemplate: {
        /**
         * The name of the new material
         */
        material: string;
        /**
         * The name of the template to copy
         */
        template: string;
      };
    }
  /**
   * Defines a new local creature tissue and populates it with all properties defined in the local tissue specified in the second argument.
   *
   * Arguments:
   *
   * * `tissue`: The name of the new tissue
   * * `original_tissue`: The name of the original tissue to copy
   *
   * Appears as `USE_TISSUE:SomeTissue:SomeOriginalTissue`
   */
  | {
      UseTissue: {
        /**
         * The name of the new tissue
         */
        tissue: string;
        /**
         * The name of the original tissue to copy
         */
        original_tissue: string;
      };
    }
  /**
   * Loads a tissue template listed in `OBJECT:TISSUE_TEMPLATE` files, such as `tissue_template_default.txt`.
   *
   * Arguments:
   *
   * * `tissue`: The name of the new tissue
   * * `template`: The name of the template to copy
   *
   * Appears as `USE_TISSUE_TEMPLATE:SomeTissue:SomeTemplate`
   */
  | {
      UseTissueTemplate: {
        /**
         * The name of the new tissue
         */
        tissue: string;
        /**
         * The name of the template to copy
         */
        template: string;
      };
    }
  /**
   * Changes the language of the creature into unintelligible 'kobold-speak', which creatures of other species will be unable to understand. If a civilized creature has this and is not
   * part of a [SKULKING] civ, it will tend to start wars with all nearby civilizations and will be unable to make peace treaties due to 'inability to communicate'.
   *
   * Appears as `UTTERNANCES`
   */
  | "Utterances"
  /**
   * The vermin creature will attempt to eat exposed food. See `[PENETRATEPOWER]`. Distinct from `[VERMIN_ROTTER]`.
   *
   * Appears as `VERMIN_EATER`
   */
  | "VerminEater"
  /**
   * The vermin appears in water and will attempt to swim around.
   *
   * Appears as `VERMIN_FISH`
   */
  | "VerminFish"
  /**
   * The creature appears in "general" surface ground locations. Note that this doesn't stop the creature from flying if it can (most vermin birds have this tag).
   *
   * Appears as `VERMIN_GROUNDER`
   */
  | "VerminGrounder"
  /**
   * The vermin are attracted to rotting stuff and loose food left in the open and cause unhappy thoughts to dwarves who encounter them. Present on flies, knuckle worms,
   * acorn flies, and blood gnats. Speeds up decay?
   *
   * Appears as `VERMIN_ROTTER`
   */
  | "VerminRotter"
  /**
   * The creature randomly appears near dirt or mud, and may be uncovered by creatures that have the `[ROOT_AROUND]` interaction such as geese and chickens.
   * Dwarves will ignore the creature when given the "Capture live land animal" task.
   *
   * Appears as `VERMIN_SOIL`
   */
  | "VerminSoil"
  /**
   * The vermin will appear in a single tile cluster of many vermin, such as a colony of ants.
   *
   * Appears as `VERMIN_SOIL_COLONY`
   */
  | "VerminSoilColony"
  /**
   * An unknown tag.
   */
  | "Unknown"
  /**
   * Mates to breed
   */
  | "MatesToBreed"
  /**
   * Has two genders
   */
  | "TwoGenders"
  /**
   * All castes are alive
   */
  | "AllCastesAlive"
  /**
   * Is a small race
   */
  | "SmallRace"
  /**
   * Occurs as an entity
   */
  | "OccursAsEntityRace"
  /**
   * Equipment used
   */
  | "Equipment";

/**
 * Gaits are a way to describe how a creature moves. Defined in the raws with:
 *
 * "GAIT:type:name:full speed:build up time:turning max:start speed:energy use"
 *
 * * use `NO_BUILD_UP` if you jump immediately to full speed
 *
 * these optional flags go at the end:
 *
 * * `LAYERS_SLOW` - fat/muscle layers slow the movement (muscle-slowing counter-acted by strength bonus)
 * * `STRENGTH` - strength attribute can speed/slow movement
 * * `AGILITY` - agility attribute can speed/slow movement
 * * `STEALTH_SLOWS:<n>` - n is percentage slowed
 * * it would be interesting to allow quirky attributes (like mental stats), but they aren't supported yet
 *
 * Examples:
 *
 * `[CV_NEW_TAG:GAIT:WALK:Sprint:!ARG4:10:3:!ARG2:50:LAYERS_SLOW:STRENGTH:AGILITY:STEALTH_SLOWS:50]`
 * `[CV_NEW_TAG:GAIT:WALK:Run:!ARG3:5:3:!ARG2:10:LAYERS_SLOW:STRENGTH:AGILITY:STEALTH_SLOWS:20]`
 * `[CV_NEW_TAG:GAIT:WALK:Jog:!ARG2:NO_BUILD_UP:5:LAYERS_SLOW:STRENGTH:AGILITY:STEALTH_SLOWS:10]`
 * `[CV_NEW_TAG:GAIT:WALK:Walk:!ARG1:NO_BUILD_UP:0]`
 * `[CV_NEW_TAG:GAIT:WALK:Stroll:!ARG5:NO_BUILD_UP:0]`
 * `[CV_NEW_TAG:GAIT:WALK:Creep:!ARG6:NO_BUILD_UP:0]`
 */
export type Gait = {
  /**
   * The type of gait
   */
  gaitType: GaitType;
  /**
   * The name of the gait
   */
  name: string;
  /**
   * The maximum speed achievable by a creature using this gait.
   */
  maxSpeed: number;
  /**
   * The energy use of the gait
   */
  energyUse: number;
  /**
   * The gait modifiers
   *
   * These are optional, and may be empty.
   */
  modifiers: Modifier[];
};

/**
 * An enum representing a gait type.
 */
export type GaitType =
  /**
   * Travel on foot/the ground
   * Used for moving normally over ground tiles.
   */
  | "walk"
  /**
   * Travel on foot/the ground
   * Used for moving over ground tiles whilst prone.
   */
  | "crawl"
  /**
   * Climbing on walls, etc.
   * Used for moving whilst climbing.
   */
  | "climb"
  /**
   * Swimming in water/liquid
   * Used for moving through tiles containing water or magma at a depth of at least 4/7.
   */
  | "swim"
  /**
   * Flying through the air
   * Used for moving through open space.
   */
  | "fly"
  /**
   * Other gait type which is unexpected, but we can still handle it
   */
  | { other: string }
  /**
   * Unknown gait type (unset)
   */
  | "unknown";

/**
 * An enum representing a gait modifier.
 */
export type Modifier =
  /**
   * Fat/muscle layers slow the movement (muscle-slowing counter-acted by strength bonus)
   * Makes `THICKENS_ON_ENERGY_STORAGE` and `THICKENS_ON_STRENGTH` tissue layers slow movement depending on how thick they are.
   * Adding the `STRENGTH` gait flag counteracts the impact of the latter layer.
   */
  | "layersSlow"
  /**
   * Speeds/slows movement depending on the creature's Strength stat.
   */
  | "strength"
  /**
   * Speeds/slows movement depending on the creature's Agility stat.
   */
  | "agility"
  /**
   * Stealth slows movement by the specified percentage when the creature is sneaking.
   */
  | {
      stealthSlows: {
        /**
         * The percentage slowed
         */
        percentage: number;
      };
    }
  /**
   * No build up time
   */
  | "noBuildUp"
  /**
   * Build up time. Only used if the gait has a build up time.
   */
  | {
      buildUp: {
        /**
         * The build up time indicates how long it will take for a creature using this gait to go from `<start speed>` to `<max speed>`.
         * For example, a value of 10 means that it should be able to reach the maximum speed by moving 10 tiles in a straight line over even terrain.
         */
        time: number;
        /**
         * The turning max indicates the maximum speed permissible when the creature suddenly changes its direction of motion.
         * The creature's speed will be reduced to `<max turning speed>` if traveling at a higher speed than this before turning.
         */
        turning_max: number;
        /**
         * The creature's speed when it starts moving using this gait
         */
        start_speed: number;
      };
    };

/**
 * Tokens that can be found in a creature's caste definitions.
 */
export type CasteTag =
  /**
   * Prevents tamed creature from being made available for adoption, instead allowing it to automatically adopt whoever it wants.
   * The basic requirements for adoption are intact, and the creature will only adopt individuals who have a preference for their species.
   * Used by cats in the vanilla game. When viewing a tame creature with this token, the message "This animal isn't interested in your
   * wishes" will appear instead of "This adorable animal can't work" or "This animal is waiting to be trained".
   *
   * Appears as `ADOPTS_OWNER`
   */
  | "AdoptsOwner"
  /**
   * Makes the creature need alcohol to get through the working day; it will choose to drink booze instead of water if possible.
   * Going sober for too long reduces speed.
   *
   * Appears as `ALCOHOL_DEPENDENT`
   */
  | "AlcoholDependent"
  /**
   * Sets the creature to be active during the day, night, and twilight in Adventurer Mode. Seems to be a separate value from `[DIURNAL]/[NOCTURNAL]/[CREPUSCULAR]`,
   * rather than implying them.
   *
   * Appears as `ALL_ACTIVE`
   */
  | "AllActive"
  /**
   * Caste-specific version of `[Creature::AltTile]`. Requires `[Tile]`.
   *
   * Appears as `CASTE_ALTTILE:SomeTile`
   */
  | {
      AltTile: {
        /**
         * The tile to use
         */
        tile: string;
      };
    }
  /**
   * Found on `[LargePredator]`s who ambush their prey. Instead of charging relentlessly at prey, the predator will wait till the prey is
   * within a few squares before charging. May or may not work on other creatures.
   *
   * Appears as `AMBUSHPREDATOR`
   */
  | "AmbushPredator"
  /**
   * Allows a creature to breathe both in and out of water (unlike [Aquatic]) - does not prevent drowning in magma.
   *
   * Appears as `AMPHIBIOUS`
   */
  | "Amphibious"
  /**
   * Applies the specified creature variation with the given arguments to the creature. See `[ApplyCreatureVariation]` for more information.
   *
   * Appears as `APPLY_CREATURE_VARIATION:SOME_VARIATION` or `APPLY_CREATURE_VARIATION:SOME_VARIATION:ARG1:ARG2:ARG3`
   */
  | {
      ApplyCreatureVariation: {
        /**
         * Creature variation ID to apply
         */
        id: string;
        /**
         * (Optional) any number of arguments to pass to the creature variation
         */
        args: string[];
      };
    }
  /**
   * Applies the effects of all pending `[CV_ADD_TAG]` and `[CV_REMOVE_TAG]` tokens that have been defined in the current creature (so far).
   *
   * Appears as `APPLY_CURRENT_CREATURE_VARIATION`
   */
  | "ApplyCurrentCreatureVariation"
  /**
   * Enables the creature to breathe in water, but causes it to air-drown on dry land.
   *
   * Appears as `AQUATIC`
   */
  | "Aquatic"
  /**
   * Causes the creature to be excluded from the object testing arena's creature spawning list. Typically applied to spoileriffic creatures.
   *
   * Appears as `ARENA_RESTRICTED`
   */
  | "ArenaRestricted"
  /**
   * Prevents the creature from attacking or frightening creatures with the [Natural] tag.
   *
   * Appears as `AT_PEACE_WITH_WILDLIFE`
   */
  | "AtPeaceWithWildlife"
  /**
   * Defines the attack name, and the body part used.
   *
   * Appears as `ATTACK:NAME:BODYPART:BY_CATEGORY:HORN` or similar
   */
  | {
      Attack: {
        /**
         * The name of the attack
         */
        name: string;
        /**
         * The body part used for the attack
         */
        body_part: string;
      };
    }
  /**
   * Specifies when a megabeast or semi-megabeast will attack the fortress. The attacks will start occurring when at least one of the requirements is met.
   * Setting a value to 0 disables the trigger.
   *
   * Appears as `ATTACK_TRIGGER:0:1:2`
   */
  | {
      AttackTrigger: {
        /**
         * Population trigger
         */
        population: number;
        /**
         * Exported wealth trigger
         */
        exported_wealth: number;
        /**
         * Created wealth trigger
         */
        created_wealth: number;
      };
    }
  /**
   * Age at which creature is considered a child, the default is zero. One can think of this as the duration of the baby stage.
   *
   * Appears as `BABY:12`
   */
  | {
      Baby: {
        /**
         * The age at which the creature is considered a child
         */
        age: number;
      };
    }
  /**
   * Defines a new name for a creature in baby state at the caste level. For non-caste-specific baby names, see `[CreatureToken::GeneralBabyName]`.
   *
   * Appears as `BABYNAME:SomeName:SomeNames`
   */
  | {
      BabyName: {
        /**
         * Singular name for the baby
         */
        singular: string;
        /**
         * Plural name for the baby
         */
        plural: string;
      };
    }
  /**
   * Creature may be subject to beaching, becoming stranded on shores, where they will eventually air-drown. The number indicates the frequency of the occurrence.
   * Presumably requires the creature to be [Aquatic]. Used by orcas, sperm whales and sea nettle jellyfish in the vanilla game.
   *
   * Appears as `BEACH_FREQUENCY:100`
   */
  | {
      BeachFrequency: {
        /**
         * Frequency of beaching
         */
        frequency: number;
      };
    }
  /**
   * The creature is non-aggressive by default, and will never automatically be engaged by companions or soldiers, running away from any creatures
   * that are not friendly to it, and will only defend itself if it becomes enraged. Can be thought of as the counterpoint of the `[LargePredator]` tag.
   * When tamed, animals with this tag will be useless for fortress defense.
   *
   * Appears as `BENIGN`
   */
  | "Benign"
  /**
   * Specifies what the creature's blood is made of.
   *
   * Appears as `BLOOD:SomeMaterial:SomeToken`
   */
  | {
      Blood: {
        /**
         * Blood material
         */
        material: string;
        /**
         * Blood token
         */
        state: string;
      };
    }
  /**
   * Causes vampire-like behavior; the creature will suck the blood of unconscious victims when its thirst for blood grows sufficiently large. When controlling the
   * creature in adventure mode, this can be done at will. Seems to be required to make the creature denouncable (in-world) as a creature of the night.
   *
   * Appears as `BLOODSUCKER`
   */
  | "BloodSucker"
  /**
   * Draws body parts from `OBJECT:BODY` files (such as `body_default.txt`)
   *
   * Appears as `BODY:BODY_WITH_HEAD_FLAG:HEART:GUTS:BRAIN:MOUTH`
   */
  | {
      Body: {
        /**
         * Body parts arguments
         */
        body_parts: string[];
      };
    }
  /**
   * These body modifiers give individual creatures different characteristics. In the case of `HEIGHT`, `BROADNESS` and `LENGTH`, the modifier is also a percentage change to
   * the `BODY_SIZE` of the individual creature. The seven numbers afterward give a distribution of ranges. Each interval has an equal chance of occurring.
   *
   * Example: `BODY_APPEARANCE_MODIFIER:HEIGHT:90:95:98:100:102:105:110`
   *
   * * `HEIGHT`: marks the height to be changed
   * * `90:95:98:100:102:105:110`: sets the range from the shortest (90% of the average height) to the tallest (110% of the average height) creature variation.
   */
  | {
      BodyAppearanceModifier: {
        /**
         * Body part to modify
         */
        attribute: string;
        /**
         * Range of values, spread from lowest to median to highest
         */
        values: [number, number, number, number, number, number, number];
      };
    }
  /**
   * Loads a plan from listed `OBJECT:BODY_DETAIL_PLAN` files, such as `b_detail_plan_default.txt`. Mass applies `USE_MATERIAL_TEMPLATE`, mass alters RELSIZE, alters
   * body part positions, and will allow tissue layers to be defined. Tissue layers are defined in order of skin to bone here.
   *
   * Example: `BODY_DETAIL_PLAN:VERTEBRATE_TISSUE_LAYERS:SKIN:FAT:MUSCLE:BONE:CARTILAGE`
   *
   * This creates the detailed body of a fox, the skin, fat, muscle, bones and cartilage out of the vertebrate tissues. A maggot would only need:
   *
   * `BODY_DETAIL_PLAN:EXOSKELETON_TISSUE_LAYERS:SKIN:FAT:MUSCLE`
   */
  | {
      BodyDetailPlan: {
        /**
         * Body detail plan to load
         */
        body_plan: string;
        /**
         * Body detail plan arguments
         */
        arguments: string[];
      };
    }
  /**
   * Sets size at a given age. Size is in cubic centimeters, and for normal body materials, is roughly equal to the creature's average weight in grams.
   *
   * Appears as `BODY_SIZE:0:0:1000`
   */
  | {
      BodySize: {
        /**
         * Year at which the size is set
         */
        year: number;
        /**
         * Days at which the size is set
         */
        days: number;
        /**
         * Size in cubic centimeters
         */
        size: number;
      };
    }
  /**
   * Substitutes body part text with replacement text. Draws gloss information from `OBJECT:BODY`files (such as `body_default.txt`)
   *
   * Appears as `BODYGLOSS:SomeGloss`
   */
  | {
      BodyGloss: {
        /**
         * The gloss to use on the body part
         */
        gloss: string;
      };
    }
  /**
   * Creature eats bones. Implies [Carnivore]. Adventurers with this token are currently unable to eat bones.
   *
   * Appears as `BONECARN`
   */
  | "BoneCarn"
  /**
   * Adds a type to a body part - used with `[SetBodyPartGroup]`. In vanilla DF, this is used for adding the type `[Geldable]` to the lower body of certain creatures.
   *
   * Appears as `BP_ADD_TYPE:SomeBodyPartType`
   */
  | {
      BodyPartAddType: {
        /**
         * The body part type to add
         */
        body_part_type: string;
      };
    }
  /**
   * Sets up the breadth of possibilities for appearance qualities for a selected `BP` group. e.g.:
   *
   * * Eyes (`CLOSE_SET`, `DEEP_SET`, `ROUND_VS_NARROW`, `LARGE_IRIS`)
   * * Lips (`THICKNESS`)
   * * Nose (`BROADNESS`, `LENGTH`, `UPTURNED`, `CONVEX`)
   * * Ear (`SPLAYED_OUT`, `HANGING_LOBES`, `BROADNESS`, `HEIGHT`)
   * * Tooth (`GAPS`)
   * * Skull (`HIGH_CHEEKBONES`, `BROAD_CHIN`, `JUTTING CHIN`, `SQUARE_CHIN`)
   * * Neck (`DEEP_VOICE`, `RASPY_VOICE`)
   * * Head (`BROADNESS`, `HEIGHT`)
   *
   * Appears as `BP_APPEARANCE_MODIFIER:SomeQuality:0:0:0:0:0:0:0`
   */
  | {
      BodyPartAppearanceModifier: {
        /**
         * The quality that can appear
         */
        quality: string;
        /**
         * The spread of the quality, from lowest to median to highest
         */
        spread: [number, number, number, number, number, number, number];
      };
    }
  /**
   * Removes a type from a body part. Used with `[SetBodyPartGroup]`.
   *
   * Appears as `BP_REMOVE_TYPE:SomeBodyPartType`
   */
  | {
      BodyPartRemoveType: {
        /**
         * The body part type to remove
         */
        body_part_type: string;
      };
    }
  /**
   * Allows a creature to destroy furniture and buildings. Value `1` targets mostly doors, hatches, furniture and the like. Value `2` targets
   * anything not made with the b + C commands.
   *
   * Appears as `BUILDINGDESTROYER:1`
   */
  | {
      BuildingDestroyer: {
        /**
         * Whether the creature focuses on doors, hatches, furniture, etc. (`1`) or anything not made with the b + C commands (`2`)
         */
        door_and_furniture_focused: boolean;
      };
    }
  /**
   * The creature can perform an interaction.
   *
   * Appears as `CAN_DO_INTERACTION:SomeInteraction`
   */
  | {
      CanDoInteraction: {
        /**
         * Interaction to allow
         */
        interaction: string;
      };
    }
  /**
   * The creature gains skills and can have professions. If a member of a civilization (even a pet) has this token, it'll need to eat, drink and sleep.
   * Note that this token makes the creature unable to be eaten by an adventurer, so it is not recommended for uncivilized monsters. Adventurers lacking
   * this token can allocate but not increase attributes and skills. Skills allocated will disappear on start.
   *
   * Appears as `CAN_LEARN`
   */
  | "CanLearn"
  /**
   * Can talk. Note that this is not necessary for a creature to gain social skills.
   *
   * Appears as `CAN_SPEAK`
   */
  | "CanSpeak"
  /**
   * Creature cannot climb, even if it has free grasp parts.
   *
   * Appears as `CANNOT_CLIMB`
   */
  | "CannotClimb"
  /**
   * Creature cannot jump.
   *
   * Appears as `CANNOT_JUMP`
   */
  | "CannotJump"
  /**
   * Acts like `[NotLiving]`, except that `[OpposedToLife]` creatures will attack them.
   *
   * Appears as `CANNOT_UNDEAD`
   */
  | "CannotUndead"
  /**
   * Allows the creature to open doors that are set to be unpassable for pets. In adventure mode, creatures lacking this token will be unable to pass through door
   * tiles except whilst these are occupied by other creatures. Not currently useful in Fortress mode as doors can no longer be set unpassable for pets.
   *
   * Appears as `CANOPENDOORS`
   */
  | "CanOpenDoors"
  /**
   * Creature only eats meat. If the creature goes on rampages in worldgen, it will often devour the people/animals it kills.
   * Does not seem to affect the diet of the adventurer in adventure mode.
   *
   * Appears as `CARNIVORE`
   */
  | "Carnivore"
  /**
   * Gives the creature a bonus in caves. Also causes cave adaptation.
   *
   * Appears as `CAVE_ADAPT`
   */
  | "CaveAdaptation"
  /**
   * Multiplies body size by a factor of (integer)%. 50 halves size, 200 doubles.
   *
   * Appears as `CHANGE_BODY_SIZE_PERC:100`
   */
  | {
      ChangeBodySizePercent: {
        /**
         * The percentage to change the body size by
         */
        percent: number;
      };
    }
  /**
   * Age at which creature is considered an adult - one can think of this as the duration of the child stage. Allows the creature's offspring to be
   * rendered fully tame if trained during their childhood.
   *
   * Appears as `CHILD:12`
   */
  | {
      Child: {
        /**
         * The age at which the creature is considered an adult
         */
        age: number;
      };
    }
  /**
   * Defines a name for the creature in child state at the caste level. For non-caste-specific child names, see `[CreatureToken::GeneralChildName]`.
   *
   * Appears as `CHILDNAME:SomeName:SomeNames`
   */
  | {
      ChildName: {
        /**
         * Singular name for the child
         */
        singular: string;
        /**
         * Plural name for the child
         */
        plural: string;
      };
    }
  /**
   * Number of eggs laid in one sitting.
   *
   * Appears as `CLUTCH_SIZE:1:1`
   */
  | {
      ClutchSize: {
        /**
         * Minimum number of eggs laid in one sitting
         */
        min: number;
        /**
         * Maximum number of eggs laid in one sitting
         */
        max: number;
      };
    }
  /**
   * Caste-specific color
   *
   * Arguments:
   *
   * * `foreground`: The foreground color
   * * `background`: The background color
   * * `brightness`: The brightness of the color
   *
   * Appears as `CASTE_COLOR:0:0:0`
   */
  | {
      Color: {
        /**
         * The foreground color
         */
        foreground: number;
        /**
         * The background color
         */
        background: number;
        /**
         * The brightness of the color
         */
        brightness: number;
      };
    }
  /**
   * When combined with any of `[Pet]`, `[PackAnimal]`, `[WagonPuller]` and/or `[Mount]`, the creature is guaranteed to be domesticated by any civilization with
   * `[EntityToken::CommonDomesticPet]`, `[EntityToken::CommonDomesticPackAnimal]`, `[EntityToken::CommonDomesticWagonPuller]` and/or `[EntityToken::CommonDomesticMount]`
   * respectively. Such civilizations will always have access to the creature, even in the absence of wild populations. This token is invalid on `[CreatureToken::Fanciful]` creatures.
   *
   * Appears as `COMMON_DOMESTIC`
   */
  | "CommonDomestic"
  /**
   * Creatures of this caste's species with the `[SpouseConverter]` and `[NightCreatureHunter]` tokens will kidnap `[SpouseConversionTarget]`s of an appropriate
   * sex and convert them into castes with `CONVERTED_SPOUSE`.
   *
   * Appears as `CONVERTED_SPOUSE`
   */
  | "ConvertedSpouse"
  /**
   * Set this to allow the creature to be cooked in meals without first being butchered/cleaned. Used by some water-dwelling vermin such as mussels, nautiluses and oysters.
   *
   * Appears as `COOKABLE_LIVE`
   */
  | "CookableLive"
  /**
   * Creature is 'berserk' and will attack all other creatures, except members of its own species that also have the CRAZED tag. It will show Berserk in the unit list.
   * Berserk creatures go on rampages during worldgen much more frequently than non-berserk ones.
   *
   * Appears as `CRAZED`
   */
  | "Crazed"
  /**
   * An arbitrary creature classification. Can be set to anything, but the only vanilla uses are `GENERAL_POISON` (used in syndromes), `EDIBLE_GROUND_BUG`
   * (used as targets for `[GobbleVerminClass]`), `MAMMAL`, and `POISONOUS` (both used for kobold pet eligibility). A single creature can have multiple classes.
   *
   * Appears as `CREATURE_CLASS:SomeClass`
   */
  | {
      CreatureClass: {
        /**
         * The creature class
         */
        class: string;
      };
    }
  /**
   * Sets the creature to be active at twilight in adventurer mode.
   *
   * Appears as `CREPUSCULAR`
   */
  | "Crepuscular"
  /**
   * Allows a creature to steal and eat edible items from a site. It will attempt to grab a food item and immediately make its way to the map's edge,
   * where it will disappear with it. If the creature goes on rampages during worldgen, it will often steal food instead of attacking. Trained and tame instances
   * of the creature will no longer display this behavior.
   *
   * Appears as `CURIOUSBEAST_EATER`
   */
  | "CuriousBeastEater"
  /**
   * Allows a creature to (very quickly) drink your alcohol. Or spill the barrel to the ground. Also affects undead versions of the creature. Unlike food or item thieves,
   * drink thieves will consume your alcohol on the spot rather than run away with one piece of it. Trained and tame instances of the creature will no longer display this behavior.
   *
   * Appears as `CURIOUSBEAST_GUZZLER`
   */
  | "CuriousBeastGuzzler"
  /**
   * Allows a creature to steal things (apparently, of the highest value it can find). It will attempt to grab an item of value and immediately make its way to the map's edge,
   * where it will disappear with it. If a creature with any of the CURIOUSBEAST tokens carries anything off the map, even if it is a caravan's pack animal, it will be reported
   * as stealing everything it carries. If the creature goes on rampages in worldgen, it will often steal items instead of attacking - kea birds are infamous for this.
   * Trained and tame instances of the creature will no longer display this behavior. Also, makes the creature unable to drop hauled items until it enters combat.
   *
   * Appears as `CURIOUSBEAST_ITEM`
   */
  | "CuriousBeastItem"
  /**
   * Adds a tag. Used in conjunction with creature variation templates.
   *
   * Appears as `CV_ADD_TAG:SomeTag`
   */
  | {
      CreatureVariationAddTag: {
        /**
         * The tag to add
         */
        tag: string;
      };
    }
  /**
   * Removes a tag. Used in conjunction with creature variation templates.
   *
   * Appears as `CV_REMOVE_TAG:SomeTag`
   */
  | {
      CreatureVariationRemoveTag: {
        /**
         * The tag to remove
         */
        tag: string;
      };
    }
  /**
   * Found on generated demons. Marks the caste to be used in the initial wave after breaking into the underworld, and by the demon civilizations created during world-gen breachings
   *
   * Appears as `DEMON`
   */
  | "Demon"
  /**
   * A brief description of the creature type, as displayed when viewing the creature's description/thoughts & preferences screen.
   */
  | {
      Description: {
        /**
         * The description to use
         */
        description: string;
      };
    }
  /**
   * Causes the creature to die upon attacking. Used by honey bees to simulate them dying after using their stingers.
   *
   * Appears as `DIE_WHEN_VERMIN_BITE`
   */
  | "DieWhenVerminBite"
  /**
   * Increases experience gain during adventure mode. Creatures with a difficulty of 11 or higher are not assigned for quests in adventure mode.
   *
   * Appears as `DIFFICULTY:10`
   */
  | {
      Difficulty: {
        /**
         * The difficulty of the creature
         */
        difficulty: number;
      };
    }
  /**
   * Sets the creature to be active during the day in Adventurer Mode.
   *
   * Appears as `DIURNAL`
   */
  | "Diurnal"
  /**
   * The creature hunts vermin by diving from the air. On tame creatures, it has the same effect as `[HuntsVermin]`. Found on peregrine falcons.
   *
   * Appears as `DIVE_HUNTS_VERMIN`
   */
  | "DiveHuntsVermin"
  /**
   * Defines the item that the creature drops upon being butchered. Used with `[ExtraButcherObject]`.
   *
   * Appears as `EBO_ITEM:SomeItem:SomeMaterial`
   */
  | {
      ExtraButcherObjectItem: {
        /**
         * The item to add
         */
        item: string;
        /**
         * The material of the item
         */
        material: string;
      };
    }
  /**
   * The shape of the creature's extra butchering drop. Used with `[ExtraButcherObject]`.
   *
   * Appears as `EBO_SHAPE:SomeShape`
   */
  | {
      ExtraButcherObjectShape: {
        /**
         * The shape to add
         */
        shape: string;
      };
    }
  /**
   * Defines the material composition of eggs laid by the creature. Egg-laying creatures in the default game define this 3 times, using `LOCAL_CREATURE_MAT:EGGSHELL`,
   * `LOCAL_CREATURE_MAT:EGG_WHITE`, and then `LOCAL_CREATURE_MAT:EGG_YOLK`. Eggs will be made out of eggshell. Edibility is determined by tags on whites or yolk,
   * but they otherwise do not exist.
   *
   * Appears as `EGG_MATERIAL:SomeMaterial:SomeState`
   */
  | {
      EggMaterial: {
        /**
         * The material to use
         */
        material: string;
        /**
         * The state of the material
         */
        state: string;
      };
    }
  /**
   * Determines the size of laid eggs. Doesn't affect hatching or cooking, but bigger eggs will be heavier, and may take longer to be hauled depending on the hauler's strength.
   *
   * Appears as `EGG_SIZE:100`
   */
  | {
      EggSize: {
        /**
         * The size of the egg
         */
        size: number;
      };
    }
  /**
   * Allows the creature to wear or wield items.
   *
   * Appears as `EQUIPS`
   */
  | "Equips"
  /**
   * The creature drops an additional object when butchered, as defined by `[ExtraButcherObjectItem]` and `[ExtraButcherObjectShape]`.
   * Used for gizzard stones in default creatures. For some materials, needs to be defined after caste definitions with `SELECT_CASTE:ALL`
   *
   * Appears as `EXTRA_BUTCHER_OBJECT`
   */
  | {
      ExtraButcherObject: {
        /**
         * Details about the extra butcher object
         */
        object_type: string;
        /**
         * Arguments for the extra butcher object
         */
        arguments: string[];
      };
    }
  /**
   * Defines a creature extract which can be obtained via small animal dissection.
   *
   * Appears as `EXTRACT:SomeExtract`
   */
  | {
      Extract: {
        /**
         * The extract material
         */
        material: string;
      };
    }
  /**
   * The creature can see regardless of whether it has working eyes and has full 360 degree vision, making it impossible to strike the creature from a blind spot
   * in combat. Invisible creatures will also be seen, namely intelligent undead using a "vanish" power.
   *
   * Appears as `EXTRAVISION`
   */
  | "Extravision"
  /**
   * Found on subterranean animal-man tribals. Currently defunct. In previous versions, it caused these creatures to crawl out of chasms and underground rivers.
   *
   * Appears as `FEATURE_ATTACK_GROUP`
   */
  | "FeatureAttackGroup"
  /**
   * Found on forgotten beasts. Presumably makes it act as such, initiating underground attacks on fortresses, or leads to the pop-up message upon encountering one.
   * Hides the creature from displaying in a `world_sites_and_pops.txt` file. Does not create historical figures like generated forgotten beasts do.
   *
   * Requires specifying a `[Biome]` in which the creature will live, and both surface and subterranean biomes are allowed. Does not stack with `[LargeRoaming]` and if
   * both are used the creature will not spawn. Appears to be incompatible with [Demon] even if used in separate castes.
   *
   * Appears as `FEATURE_BEAST`
   */
  | "FeatureBeast"
  /**
   * Makes the creature biologically female, enabling her to bear young. Usually specified inside a caste.
   *
   * Appears as `FEMALE`
   */
  | "Female"
  /**
   * Makes the creature immune to FIREBALL and FIREJET attacks, and allows it to path through high temperature zones, like lava or fires. Does not, by itself,
   * make the creature immune to the damaging effects of burning in fire, and does not prevent general heat damage or melting on its own (this would require adjustments
   * to be made to the creature's body materials - see the dragon raws for an example).
   *
   * Appears as `FIREIMMUNE`
   */
  | "FireImmune"
  /**
   * Like `[FireImmune]`, but also renders the creature immune to `DRAGONFIRE` attacks.
   *
   * Appears as `FIREIMMUNE_SUPER`
   */
  | "FireImmuneSuper"
  /**
   * The creature's corpse is a single `FISH_RAW` food item that needs to be cleaned (into a FISH item) at a fishery to become edible. Before being cleaned the item is
   * referred to as "raw". The food item is categorized under "fish" on the food and stocks screens, and when uncleaned it is sorted under "raw fish" in the stocks
   * (but does not show up on the food screen).
   *
   * Without this or `[CookableLive]`, fished vermin will turn into food the same way as non-vermin creatures, resulting in multiple units of food (meat, brain, lungs,
   * eyes, spleen etc.) from a single fished vermin. These units of food are categorized as meat by the game.
   *
   * Appears as `FISHITEM`
   */
  | "FishItem"
  /**
   * The creature's body is constantly at this temperature, heating up or cooling the surrounding area. Alters the temperature of the creature's inventory and all
   * adjacent tiles, with all the effects that this implies - may trigger wildfires at high enough values. Also makes the creature immune to extreme heat or cold, as
   * long as the temperature set is not harmful to the materials that the creature is made from. Corpses and body parts of creatures with a fixed temperature maintain
   * their temperature even after death.
   *
   * Note that temperatures of 12000 and higher may cause pathfinding issues in fortress mode.
   *
   * Appears as `FIXED_TEMP:10000`
   */
  | {
      FixedTemp: {
        /**
         * The temperature of the creature
         */
        temperature: number;
      };
    }
  /**
   * If engaged in combat, the creature will flee at the first sign of resistance. Used by kobolds in the vanilla game.
   *
   * Appears as `FLEEQUICK`
   */
  | "FleeQuick"
  /**
   * Allows a creature to fly, independent of it having wings or not. Fortress Mode pathfinding only partially incorporates flying - flying creatures need a land path
   * to exist between them and an area in order to access it, but as long as one such path exists, they do not need to use it, instead being able to fly over intervening
   * obstacles. Winged creatures with this token can lose their ability to fly if their wings are crippled or severed. Winged creatures without this token will be unable
   * to fly. (A 'wing' in this context refers to any body part with its own FLIER token).
   *
   * Appears as `FLIER`
   */
  | "Flier"
  /**
   * Defines a gait by which the creature can move. Typically defined by using `APPLY_CREATURE_VARIATION:STANDARD_GAIT:xxx` in the creature's raws, instead of
   * by using this token directly. See [Gait] for more detailed information.
   *
   * Since it's a bit complicated, we let the [Gait] `from_value()` handle parsing this token.
   *
   * Appears (typically) as `CV_NEW_TAG:GAIT:WALK:Sprint:!ARG4:10:3:!ARG2:50:LAYERS_SLOW:STRENGTH:AGILITY:STEALTH_SLOWS:50`
   */
  | {
      Gait: {
        /**
         * The value of the token
         */
        gait: string;
      };
    }
  /**
   * Has the same function as `[MaterialForceMultiplier]`, but applies to all attacks instead of just those involving a specific material. Appears to be overridden by
   * `[MaterialForceMultiplier]` (werebeasts, for example, use both tokens to provide resistance to all materials, with one exception to which they are especially vulnerable).
   *
   * When struck with a weapon made of the any material, the force exerted will be multiplied by A/B.
   *
   * Appears as `GENERAL_MATERIAL_FORCE_MULTIPLIER:1:1`
   */
  | {
      GeneralMaterialForceMultiplier: {
        /**
         * The material to apply the multiplier to
         */
        value_a: number;
        /**
         * The multiplier to apply
         */
        value_b: number;
      };
    }
  /**
   * Makes the creature get infections from necrotic tissue.
   *
   * Appears as `GETS_INFECTIONS_FROM_ROT`
   */
  | "GetsInfectionsFromRot"
  /**
   * Makes the creature's wounds become infected if left untreated for too long.
   *
   * Appears as `GETS_WOUND_INFECTIONS`
   */
  | "GetsWoundInfections"
  /**
   * Caste-specific glow color.
   *
   * Arguments:
   *
   * * `foreground`: The foreground color
   * * `background`: The background color
   * * `brightness`: The brightness of the color
   *
   * Appears as `CASTE_GLOWCOLOR:0:0:0`
   */
  | {
      GlowColor: {
        /**
         * The foreground color
         */
        foreground: number;
        /**
         * The background color
         */
        background: number;
        /**
         * The brightness of the color
         */
        brightness: number;
      };
    }
  /**
   * Caste-specific glow tile.
   *
   * Appears as `CASTE_GLOWTILE:SomeTile`
   */
  | {
      GlowTile: {
        /**
         * The tile to use
         */
        tile: string;
      };
    }
  /**
   * The creature can and will gnaw its way out of animal traps and cages using the specified verb, depending on the material from which it is made (normally wood).
   *
   * Appears as `GNAWER:SomeVerb`
   */
  | {
      Gnawer: {
        /**
         * The verb to use
         */
        verb: string;
      };
    }
  /**
   * The creature eats vermin of the specified class.
   *
   * Appears as `GOBBLE_VERMIN_CLASS:SomeVerminClass`
   */
  | {
      GobbleVerminClass: {
        /**
         * The vermin class to eat
         */
        vermin_class: string;
      };
    }
  /**
   * The creature eats a specific vermin.
   *
   * Appears as `GOBBLE_VERMIN_CREATURE:SomeVerminCreature:SomeVerminCaste`
   */
  | {
      GobbleVerminCreature: {
        /**
         * The vermin creature to eat
         */
        vermin_creature: string;
        /**
         * The vermin caste to eat
         */
        vermin_caste: string;
      };
    }
  /**
   * The value determines how rapidly grass is trampled when a creature steps on it - a value of 0 causes the creature to never damage grass,
   * while a value of 100 causes grass to be trampled as rapidly as possible.
   *
   * Defaults to 5.
   *
   * Appears as `GRASS_TRAMPLE:5`
   */
  | {
      GrassTrample: {
        /**
         * The trample value
         */
        trample: number;
      };
    }
  /**
   * Used in Creature Variants. This token changes the adult body size to the average of the old adult body size and the target value and scales all intermediate
   * growth stages by the same factor.
   *
   * Appears as `GRAVITATE_BODY_SIZE:25`
   */
  | {
      GravitateBodySize: {
        /**
         * The target body size of the creature when it is an adult (fully grown)
         */
        target: number;
      };
    }
  /**
   * The creature is a grazer - if tamed in fortress mode, it needs a pasture to survive. The higher the number, the less frequently it needs to eat in order to live.
   *
   * Not used since 0.40.12, replaced by `[StandardGrazer]` to fix Bug 4113.
   *
   * Appears as `GRAZER:100`
   */
  | {
      Grazer: {
        /**
         * The grazer value
         */
        grazer: number;
      };
    }
  /**
   * Defines certain behaviors for the creature. The habit types are:
   *
   * * `COLLECT_TROPHIES`
   * * `COOK_PEOPLE`
   * * `COOK_VERMIN`
   * * `GRIND_VERMIN`
   * * `COOK_BLOOD`
   * * `GRIND_BONE_MEAL`
   * * `EAT_BONE_PORRIDGE`
   * * `USE_ANY_MELEE_WEAPON`
   * * `GIANT_NEST`
   * * `COLLECT_WEALTH`
   *
   * These require the creature to have a [Lair] to work properly, and also don't seem to work on creatures who are not a `[SemiMegabeast]`, `[Megabeast]`, or `[NightCreatureHunter]`.
   *
   * Appears as `HABIT:SomeHabit`
   */
  | {
      Habit: {
        /**
         * The habit to add
         */
        habit: string;
      };
    }
  /**
   * "If you set `HABIT_NUM` to a number, it should give you that exact number of habits according to the weights.". All lists of `HABIT`s are preceded by `[HABIT_NUM:TEST_ALL]`
   *
   * Appears as `HABIT_NUM:2` or `HABIT_NUM:TEST_ALL`
   */
  | {
      HabitNumber: {
        /**
         * The number of habits to add. A value of `TEST_ALL` will add all habits and will cause number to be 0.
         */
        number: number;
      };
    }
  /**
   * The creature has nerves in its muscles. Cutting the muscle tissue can sever motor and sensory nerves.
   *
   * Appears as `HAS_NERVES`
   */
  | "HasNerves"
  /**
   * The creature has a shell. Seemingly no longer used - holdover from previous versions.
   *
   * Appears as `HASSHELL`
   */
  | "HasShell"
  /**
   * Default 'NONE'. The creature's normal body temperature. Creature ceases maintaining temperature on death unlike fixed material temperatures.
   * Provides minor protection from environmental temperature to the creature.
   *
   * Appears as `HOMEOTHERM:10000`
   */
  | {
      Homeotherm: {
        /**
         * The temperature of the creature, as number or `NONE` which is the default
         */
        temperature: number | null;
      };
    }
  /**
   * Creature hunts and kills nearby vermin, randomly walking between places with food laying on the ground or in stockpiles, to check for possible `[VerminEater]` vermin,
   * but they'll kill any other vermin too.
   */
  | "HuntsVermin"
  /**
   * The creature cannot move. Found on sponges. Will also stop a creature from breeding in fortress mode (MALE and FEMALE are affected, if one is IMMOBILE no breeding will happen).
   *
   * Appears as `IMMOBILE`
   */
  | "Immobile"
  /**
   * The creature is immobile while on land. Only works on [Aquatic] creatures which can't breathe on land.
   *
   * Appears as `IMMOBILE_LAND`
   */
  | "ImmobileLand"
  /**
   * The creature radiates fire. It will ignite, and potentially completely destroy, items the creature is standing on. Also gives the vermin a high chance of escaping from animal
   * traps and cages made of any flammable materials (specifically ones that could be ignited by magma).
   *
   * Appears as `IMMOLATE`
   */
  | "Immolate"
  /**
   * Alias for `[CanSpeak]` + `[CanLearn]`.
   *
   * Appears as `INTELLIGENT`
   */
  | "Intelligent"
  /**
   * Specifies interaction details following a `[CanDoInteraction]` token.
   *
   * Appears as `CDI:SomeArgs:etc`
   */
  | {
      InteractionDetail: {
        /**
         * Arbitrary arguments for the interaction
         */
        args: string[];
      };
    }
  /**
   * Determines if the creature leaves behind a non-standard corpse (i.e. wood, statue, bars, stone, pool of liquid, etc.). Ethics may prevent actually using the item in jobs or reactions.
   *
   * Appears as `ITEMCORPSE:ItemToken:MaterialToken`
   */
  | {
      ItemCorpse: {
        /**
         * The item token to use
         */
        item: string;
        /**
         * The material token to use
         */
        material: string;
      };
    }
  /**
   * The quality of an item-type corpse left behind. Valid values are: 0 for ordinary, 1 for well-crafted, 2 for finely-crafted, 3 for superior, 4 for exceptional, 5 for masterpiece.
   *
   * Appears as `ITEMCORPSE_QUALITY:3`
   */
  | {
      ItemCorpseQuality: {
        /**
         * The quality of the item
         */
        quality: number;
      };
    }
  /**
   * Found on megabeasts, semimegabeasts, and night creatures. The creature will seek out sites of this type and take them as lairs. The lair types are:
   *
   * * `SIMPLE_BURROW`
   * * `SIMPLE_MOUND`
   * * `WILDERNESS_LOCATION`
   * * `SHRINE`
   * * `LABYRINTH`
   *
   * Appears as `LAIR:SomeLair:Probability`
   */
  | {
      Lair: {
        /**
         * The lair type
         */
        lair: string;
        /**
         * The probability of the lair
         */
        probability: number;
      };
    }
  /**
   * Defines certain features of the creature's lair. The only valid characteristic is `HAS_DOORS`.
   *
   * Appears as `LAIR_CHARACTERISTIC:SomeCharacteristic`
   */
  | {
      LairCharacteristic: {
        /**
         * The characteristic to add
         */
        characteristic: string;
      };
    }
  /**
   * This creature will actively hunt adventurers in its lair.
   *
   * Appears as `LAIR_HUNTER`
   */
  | "LairHunter"
  /**
   * What this creature says while hunting adventurers in its lair.
   *
   * Appears as `LAIR_HUNTER_SPEECH:SomeSpeech`
   */
  | {
      LairHunterSpeech: {
        /**
         * The file containing what the creature says
         */
        speech_file: string;
      };
    }
  /**
   * Will attack things that are smaller than it (like dwarves). Only one group of "large predators" (possibly two groups on "savage" maps) will appear on any given map.
   * In adventure mode, large predators will try to ambush and attack you (and your party will attack them back). When tamed, large predators tend to be much more
   * aggressive to enemies than non-large predators, making them a good choice for an animal army. They may go on rampages in worldgen, and adventurers may receive quests
   * to kill them. Also, they can be mentioned in the intro paragraph when starting a fortress e.g. "ere the wolves get hungry."
   *
   * Appears as `LARGE_PREDATOR`
   */
  | "LargePredator"
  /**
   * Creature lays eggs instead of giving birth to live young.
   *
   * Appears as `LAYS_EGGS`
   */
  | "LaysEggs"
  /**
   * Creature lays the specified item instead of regular eggs.
   *
   * Appears as `LAYS_UNUSUAL_EGGS:SomeItem:SomeMaterial`
   */
  | {
      LaysUnusualEggs: {
        /**
         * The item to lay
         */
        item: string;
        /**
         * The material of the item
         */
        material: string;
      };
    }
  /**
   * The creature has ligaments in its `[CONNECTIVE_TISSUE_ANCHOR]` tissues (bone or chitin by default). Cutting the bone/chitin tissue severs the ligaments,
   * disabling motor function if the target is a limb.
   *
   * Appears as `LIGAMENTS:SomeMaterial:HealingRate`
   */
  | {
      Ligaments: {
        /**
         * The material to use
         */
        material: string;
        /**
         * The healing rate
         */
        healing_rate: number;
      };
    }
  /**
   * The creature will generate light, such as in adventurer mode at night.
   *
   * Appears as `LIGHT_GEN`
   */
  | "LightGen"
  /**
   * The creature will attack enemies rather than flee from them. This tag has the same effect on player-controlled creatures - including modded dwarves.
   * Retired as of v0.40.14 in favor of `[LargePredator]`.
   *
   * Appears as `LIKES_FIGHTING`
   */
  | "LikesFighting"
  /**
   * Creature uses "sssssnake talk" (multiplies 'S' when talking - "My name isss Recisssiz."). Used by serpent men and reptile men in the vanilla game.
   * C's with the same pronunciation (depending on the word) are not affected by this token.
   *
   * Appears as `LISP`
   */
  | "Lisp"
  /**
   * Determines the number of offspring per one birth; default 1-3, not used in vanilla raws.
   *
   * Appears as `LITTERSIZE:1:3`
   */
  | {
      LitterSize: {
        /**
         * The minimum number of offspring
         */
        min: number;
        /**
         * The maximum number of offspring
         */
        max: number;
      };
    }
  /**
   * Lets a creature open doors that are set to forbidden in fortress mode.
   *
   * Appears as `LOCKPICKER`
   */
  | "LockPicker"
  /**
   * Determines how well a creature can see in the dark - higher is better. Dwarves have 10000, which amounts to perfect nightvision.
   *
   * Appears as `LOW_LIGHT_VISION:10000`
   */
  | {
      LowLightVision: {
        /**
         * The vision value
         */
        vision: number;
      };
    }
  /**
   * According to Toady One, this is completely interchangeable with `[AtPeaceWithWildlife]` and might have been used in very early versions of the game by
   * wandering wizards or the ent-type tree creatures that used to be animated by elves.
   *
   * Appears as `MAGICAL`
   */
  | "Magical"
  /**
   * The creature is able to see while submerged in magma.
   *
   * Appears as `MAGMA_VISION`
   */
  | "MagmaVision"
  /**
   * Makes the creature biologically male.
   *
   * Appears as `MALE`
   */
  | "Male"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_LAUGH`
   */
  | "MannerismLaugh"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_SMILE`
   */
  | "MannerismSmile"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_WALK`
   */
  | "MannerismWalk"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_SIT`
   */
  | "MannerismSit"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_BREATH`
   */
  | "MannerismBreath"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_POSTURE`
   */
  | "MannerismPosture"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_STRETCH`
   */
  | "MannerismStretch"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_EYELIDS`
   */
  | "MannerismEyelids"
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_FINGERS:SomeFinger:SomeFingers`
   */
  | {
      MannerismFingers: {
        /**
         * The finger mannerism to add
         */
        finger: string;
        /**
         * The fingers mannerism to add
         */
        fingers: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_NOSE:SomeNose`
   */
  | {
      MannerismNose: {
        /**
         * The nose mannerism to add
         */
        nose: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_EAR:SomeEar`
   */
  | {
      MannerismEar: {
        /**
         * The ear mannerism to add
         */
        ear: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_HEAD:SomeHead`
   */
  | {
      MannerismHead: {
        /**
         * The head mannerism to add
         */
        head: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_EYES:SomeEyes`
   */
  | {
      MannerismEyes: {
        /**
         * The eyes mannerism to add
         */
        eyes: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_MOUTH:SomeMouth`
   */
  | {
      MannerismMouth: {
        /**
         * The mouth mannerism to add
         */
        mouth: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_HAIR:SomeHair`
   */
  | {
      MannerismHair: {
        /**
         * The hair mannerism to add
         */
        hair: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_KNUCKLES:SomeKnuckles`
   */
  | {
      MannerismKnuckles: {
        /**
         * The knuckles mannerism to add
         */
        knuckles: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_LIPS:SomeLips`
   */
  | {
      MannerismLips: {
        /**
         * The lips mannerism to add
         */
        lips: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_CHEEK:SomeCheek`
   */
  | {
      MannerismCheek: {
        /**
         * The cheek mannerism to add
         */
        cheek: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_NAILS:SomeNails`
   */
  | {
      MannerismNails: {
        /**
         * The nails mannerism to add
         */
        nails: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_FEET:SomeFeet`
   */
  | {
      MannerismFeet: {
        /**
         * The feet mannerism to add
         */
        feet: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_ARMS:SomeArms`
   */
  | {
      MannerismArms: {
        /**
         * The arms mannerism to add
         */
        arms: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded.
   *
   * Appears as `MANNERISM_HANDS:SomeHands`
   */
  | {
      MannerismHands: {
        /**
         * The hands mannerism to add
         */
        hands: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded. Appears to be unused.
   *
   * Appears as `MANNERISM_TONGUE:SomeTongue`
   */
  | {
      MannerismTongue: {
        /**
         * The tongue mannerism to add
         */
        tongue: string;
      };
    }
  /**
   * Adds a possible mannerism to the creature's profile. These are not defined in raws but hardcoded. Appears to be unused.
   *
   * Appears as `MANNERISM_LEG:SomeLeg`
   */
  | {
      MannerismLeg: {
        /**
         * The leg mannerism to add
         */
        leg: string;
      };
    }
  /**
   * Sets the creature to be active at dawn in adventurer mode.
   *
   * Appears as `MATUTINAL`
   */
  | "Matutinal"
  /**
   * Determines the creature's natural lifespan, using the specified minimum and maximum age values (in years). Each individual creature with this token is generated with a
   * predetermined date (calculated down to the exact tick!) between these values, at which it is destined to die of old age, should it live long enough. Note that the
   * probability of death at any given age does not increase as the creature gets older [3].
   *
   * Creatures which lack this token are naturally immortal. The `NO_AGING` syndrome tag will prevent death by old age from occurring. Also note that, among civilized creatures,
   * castes which lack this token will refuse to marry others with it, and vice versa.
   *
   * Appears as `MAXAGE:100:150`
   */
  | {
      MaxAge: {
        /**
         * The minimum age of the creature
         */
        min: number;
        /**
         * The maximum age of the creature
         */
        max: number;
      };
    }
  /**
   * Makes the creature slowly stroll around, unless it's in combat or performing a job. If combined with `[CanLearn]`, will severely impact their pathfinding and lead the creature
   * to move extremely slowly when not performing any task. Problematically applies to animal people based on the animal and war trained animals.
   *
   * Appears as `MEANDERER`
   */
  | "Meanderer"
  /**
   * A 'boss' creature. A small number of the creatures are created during worldgen, their histories and descendants (if any) will be tracked in worldgen (as opposed to simply 'spawning'),
   * and they will occasionally go on rampages, potentially leading to worship if they attack the same place multiple times. Their presence and number will also influence age names.
   * When appearing in fortress mode, they will have a pop-up message announcing their arrival. They will remain hostile to military even after being tamed.
   *
   * Requires specifying a `[Biome]` in which the creature will live. Subterranean biomes appear to not be allowed. Does stack with `[LargeRoaming]` and if both are used the creature will spawn
   * as both historical bosses and as wild animals.
   *
   * Appears as `MEGABEAST`
   */
  | "Megabeast"
  /**
   * Default is 200. This means you can increase your attribute to 200% of its starting value (or the average value + your starting value if that is higher).
   *
   * Arguments:
   *
   * * `attribute`: The attribute to modify
   * * `percentage`: The percentage to modify the attribute by
   *
   * Appears as `MENT_ATT_CAP_PERC:Attribute:200`
   */
  | {
      MentalAttributeCapPercentage: {
        /**
         * The attribute to modify
         */
        attribute: string;
        /**
         * The percentage to modify the attribute by
         */
        percentage: number;
      };
    }
  /**
   * Sets up a mental attribute's range of values (0-5000). All mental attribute ranges default to 200:800:900:1000:1100:1300:2000.
   *
   * Arguments:
   *
   * * `attribute`: The attribute to modify
   * * `ranges`: The ranges from lowest to highest with 7 steps
   *
   * Appears as `MENT_ATT_RANGE:Attribute:200:800:900:1000:1100:1300:2000`
   */
  | {
      MentalAttributeRange: {
        /**
         * The attribute to modify
         */
        attribute: string;
        /**
         * The ranges from lowest to highest with 7 steps
         */
        ranges: [number, number, number, number, number, number, number];
      };
    }
  /**
   * Mental attribute gain/decay rates. Lower numbers in the last three slots make decay occur faster. Defaults are 500:4:5:4.
   *
   * Arguments:
   *
   * * `attribute`: The attribute to modify
   * * `improvement_cost`: The cost to improve the attribute
   * * `decay_rate_unused`: The decay rate of the attribute when it is unused
   * * `decay_rate_rusty`: The decay rate of the attribute when it is rusty
   * * `decay_rate_demotion`: The decay rate of the attribute when it is demoted
   *
   * Appears as `MENT_ATT_RATE:Attribute:500:4:5:4`
   */
  | {
      MentalAttributeRate: {
        /**
         * The attribute to modify
         */
        attribute: string;
        /**
         * The cost to improve the attribute
         */
        improvement_cost: number;
        /**
         * The decay rate of the attribute when it is unused
         */
        decay_rate_unused: number;
        /**
         * The decay rate of the attribute when it is rusty
         */
        decay_rate_rusty: number;
        /**
         * The decay rate of the attribute when it is demoted
         */
        decay_rate_demotion: number;
      };
    }
  /**
   * Allows the creature to be milked in the farmer's workshop. The frequency is the amount of ticks the creature needs to "recharge" (i.e. how much time needs to pass before
   * it can be milked again). Does not work on sentient creatures, regardless of ethics.
   *
   * Arguments:
   *
   * * `material`: The material of the milk
   * * `frequency`: The frequency the creature can be milked
   *
   * Appears as `MILKABLE:SomeMaterial:1000`
   */
  | {
      Milkable: {
        /**
         * The material of the milk
         */
        material: string;
        /**
         * The frequency the creature can be milked
         */
        frequency: number;
      };
    }
  /**
   * The creature spawns stealthed and will attempt to path into the fortress, pulling any levers it comes across. It will be invisible on the map and unit list until spotted by a citizen,
   * at which point the game will pause and recenter on the creature.
   *
   * Used by gremlins in the vanilla game. "They go on little missions to mess with various fortress buildings, not just levers."
   *
   * Appears as `MISCHIEVOUS` or `MISCHIEVIOUS` (sic)
   */
  | "Mischievous"
  /**
   * Seemingly no longer used.
   *
   * Appears as `MODVALUE:SomeValue`
   */
  | {
      ModValue: {
        /**
         * The value to modify
         */
        value: string;
      };
    }
  /**
   * Creature may be used as a mount. No use for the player in fortress mode, but enemy sieging forces may arrive with cavalry. Mounts are usable in adventure mode.
   *
   * Appears as `MOUNT`
   */
  | "Mount"
  /**
   * Creature may be used as a mount, but civilizations cannot domesticate it in worldgen without certain exceptions.
   *
   * Appears as `MOUNT_EXOTIC`
   */
  | "MountExotic"
  /**
   * Allows the creature to have all-around vision as long as it has multiple heads that can see.
   *
   * Appears as `MULTIPART_FULL_VISION`
   */
  | "MultipartFullVision"
  /**
   * Makes the species usually produce a single offspring per birth, with a 1/500 chance of using the [LITTERSIZE] as usual. Requires [FEMALE].
   *
   * Appears as `MULTIPLE_LITTER_RARE`
   */
  | "MultipleLitterRare"
  /**
   * Name of the caste
   *
   * Arguments:
   *
   * * `singular`: The singular name of the caste
   * * `plural`: The plural name of the caste
   * * `adjective`: The adjective form of the caste
   *
   * Appears as `CASTE_NAME:SomeName:SomeNames:SomeAdjective`
   */
  | {
      Name: {
        /**
         * The singular name of the caste
         */
        singular: string;
        /**
         * The plural name of the caste
         */
        plural: string;
        /**
         * The adjective form of the caste
         */
        adjective: string;
      };
    }
  /**
   * Animal is considered to be natural. NATURAL animals will not engage creatures tagged with `[AtPeaceWitHWildlife]` in combat unless they are
   * members of a hostile entity and vice-versa.
   *
   * Appears as `NATURAL` or `NATURAL_ANIMAL`
   */
  | "Natural"
  /**
   * The creature possesses the specified skill at this level inherently - that is, it begins with the skill at this level, and the skill may never
   * rust below that. A value of 15 is legendary.
   *
   * Arguments:
   *
   * * `skill`: The skill token to add
   * * `level`: The level of the skill
   *
   * Appears as `NATURAL_SKILL:SomeSkill:15`
   */
  | {
      NaturalSkill: {
        /**
         * The skill token to add
         */
        skill: string;
        /**
         * The level of the skill
         */
        level: number;
      };
    }
  /**
   * Creatures with this token can appear in bogeyman ambushes in adventure mode, where they adopt classical bogeyman traits such as stalking the adventurer
   * and vaporising when dawn breaks. Such traits do not manifest if the creature is encountered outside of a bogeyman ambush (for instance, as a megabeast
   * or a civilised being). In addition, their corpses and severed body parts turn into smoke after a short while. Note that setting the "Number of Bogeyman Types"
   * in advanced world generation to 0 will only remove randomly-generated bogeymen.
   *
   * Appears as `NIGHT_CREATURE_BOGEYMAN`
   */
  | "NightCreatureBogeyman"
  /**
   * Found on some necromancers. Creatures with this tag may periodically "perform horrible experiments" offscreen, during which they can use creature-targeting
   * interactions with an `[I_SOURCE:EXPERIMENT]` tag on living creatures in their area. Worlds are generated with a list of procedurally-generated experiments,
   * allowing necromancers to turn living people and animals into ghouls and other experimental creatures, and these will automatically be available to all experimenters;
   * it does not appear possible to prevent this. You can mod in your own custom experiment interactions, but these are used very infrequently due to the large number
   * of generated experiments.
   *
   * Appears as `NIGHT_CREATURE_EXPERIMENTER`
   */
  | "NightCreatureExperimenter"
  /**
   * Found on night trolls and werebeasts. Implies that the creature is a night creature, and shows its description in legends mode entry. The creature is always hostile and
   * will start no quarter combat with any nearby creatures, except for members of its own race. Note that this tag does not override the creature's normal behavior in fortress
   * mode except for the aforementioned aggression, and doesn't prevent the creature from fleeing the battles it started. It also removes the creature's materials from stockpile
   * settings list, making them be stored there regardless of settings.
   *
   * Does stack with `[LARGE_ROAMING]` and if both are used the creature will spawn as both historical hunters and as wild animals; this requires specifying a [BIOME] in which the
   * creature will live, and subterranean biomes are allowed.
   *
   * This tag causes the usual behaviour of werebeasts in worldgen, that is, fleeing towns upon being cursed and conducting raids from a lair. If this tag is absent from a deity
   * curse, the accursed will simply be driven out of towns in a similar manner to vampires. When paired with `SPOUSE_CONVERTER`, a very small population of the creature will be
   * created during worldgen (sometimes only a single individual will be created), and their histories will be tracked (that is, they will not spawn spontaneously later, they must
   * either have children or convert other creatures to increase their numbers). The creature will settle in a lair and go on rampages during worldgen. It will actively attempt to
   * seek out potential conversion targets to abduct, convert, and have children with (if possible).
   *
   * Appears as `NIGHT_CREATURE_HUNTER`
   */
  | "NightCreatureHunter"
  /**
   * Found on nightmares. Corpses and severed body parts derived from creatures with this token turn into smoke after a short while.
   *
   * Appears as `NIGHT_CREATURE_NIGHTMARE`
   */
  | "NightCreatureNightmare"
  /**
   * Creature doesn't require connected body parts to move; generally used on undead creatures with connections that have rotted away.
   *
   * Appears as `NO_CONNECTIONS_FOR_MOVEMENT`
   */
  | "NoConnectionsForMovement"
  /**
   * Creature cannot become dizzy.
   *
   * Appears as `NO_DIZZINESS`
   */
  | "NoDizziness"
  /**
   * Creature does not need to drink.
   *
   * Appears as `NO_DRINK`
   */
  | "NoDrink"
  /**
   * Creature does not need to eat.
   *
   * Appears as `NO_EAT`
   */
  | "NoEat"
  /**
   * The creature caste does not appear in autumn.
   *
   * Appears as `NO_AUTUMN`
   */
  | "NoFall"
  /**
   * Creature cannot suffer fevers.
   *
   * Appears as `NO_FEVERS`
   */
  | "NoFevers"
  /**
   * The creature is biologically sexless. Makes the creature unable to breed.
   *
   * Appears as `NO_GENDER`
   */
  | "NoGender"
  /**
   * The creature cannot raise any physical attributes.
   *
   * Appears as `NO_PHYS_ATT_GAIN`
   */
  | "NoPhysicalAttributeGain"
  /**
   * The creature cannot lose any physical attributes.
   *
   * Appears as `NO_PHYS_ATT_RUST`
   */
  | "NoPhysicalAttributeRust"
  /**
   * Creature does not need to sleep. Can still be rendered unconscious by other means.
   *
   * Appears as `NO_SLEEP`
   */
  | "NoSleep"
  /**
   * The creature caste does not appear in spring.
   *
   * Appears as `NO_SPRING`
   */
  | "NoSpring"
  /**
   * The creature caste does not appear in summer.
   *
   * Appears as `NO_SUMMER`
   */
  | "NoSummer"
  /**
   * Creature doesn't require an organ with the [THOUGHT] tag to survive or attack; generally used on creatures that don't have brains.
   *
   * Appears as `NO_THOUGHT_CENTER_FOR_MOVEMENT`
   */
  | "NoThoughtCenterForMovement"
  /**
   * Prevents creature from selecting its color based on its profession (e.g. Miner, Hunter, Wrestler).
   *
   * Appears as `NO_UNIT_TYPE_COLOR`
   */
  | "NoUnitTypeColor"
  /**
   * Likely prevents the creature from leaving broken vegetation tracks
   *
   * Appears as `NO_VEGETATION_PERTURB`
   */
  | "NoVegetationDisturbance"
  /**
   * The creature caste does not appear in winter.
   *
   * Appears as `NO_WINTER`
   */
  | "NoWinter"
  /**
   * Creature has no bones.
   *
   * Appears as `NOBONES`
   */
  | "NoBones"
  /**
   * Creature doesn't need to breathe or have [BREATHE] parts in body, nor can it drown or be strangled. Creatures living in magma must have this tag,
   * otherwise they will drown.
   *
   * Appears as `NOBREATHE`
   */
  | "NoBreathe"
  /**
   * Sets the creature to be active at night in adventure mode.
   *
   * Appears as `NOCTURNAL`
   */
  | "Nocturnal"
  /**
   * Creature has no emotions. It is immune to the effects of stress and unable to rage, and its needs cannot be fulfilled in any way.
   * Used on undead in the vanilla game.
   *
   * Appears as `NOEMOTION`
   */
  | "NoEmotion"
  /**
   * Creature can't become tired or over-exerted from taking too many combat actions or moving at full speed for extended periods of time.
   *
   * Appears as `NOEXERT`
   */
  | "NoExert"
  /**
   * Creature doesn't feel fear and will never flee from battle, and will be immune to ghosts' attempts to 'scare it to death'.
   * Additionally, it causes bogeymen and nightmares to become friendly towards the creature.
   *
   * Appears as `NOFEAR`
   */
  | "NoFear"
  /**
   * Creature will not be hunted or fed to wild beasts.
   *
   * Appears as `NOMEAT`
   */
  | "NoMeat"
  /**
   * Creature isn't nauseated by gut hits and cannot vomit.
   *
   * Appears as `NONAUSEA`
   */
  | "NoNausea"
  /**
   * Creature doesn't feel pain.
   *
   * Appears as `NOPAIN`
   */
  | "NoPain"
  /**
   * Creature will not drop a hide when butchered.
   *
   * Appears as `NOSKIN`
   */
  | "NoSkin"
  /**
   * Creature will not drop a skull on butchering, rot, or decay of severed head.
   *
   * Appears as `NOSKULL`
   */
  | "NoSkull"
  /**
   * Does not produce miasma when rotting.
   *
   * Appears as `NOSMELLYROT`
   */
  | "NoSmellyRot"
  /**
   * Weapons can't get stuck in the creature.
   *
   * Appears as `NOSTUCKINS`
   */
  | "NoStuckIns"
  /**
   * Creature can't be stunned and knocked unconscious by pain or head injuries. Creatures with this tag never wake up from sleep in Fortress Mode.
   * If this creature needs to sleep while playing, it will die.
   *
   * Appears as `NOSTUN`
   */
  | "NoStun"
  /**
   * Cannot be butchered.
   *
   * Appears as `NOT_BUTCHERABLE`
   */
  | "NotButcherable"
  /**
   * Cannot be raised from the dead by necromancers or evil clouds. Implies the creature is not a normal living being. Used by vampires, mummies and
   * inorganic creatures like the amethyst man and bronze colossus. Creatures who are `[OPPOSED_TO_LIFE]` (undead) will be docile towards creatures with this token.
   *
   * Appears as `NOT_LIVING`
   */
  | "NotLiving"
  /**
   * Creature doesn't require a [THOUGHT] body part to survive. Has the added effect of preventing speech, though directly controlling creatures that would otherwise
   * be capable of speaking allows them to engage in conversation.
   *
   * Appears as `NOTHOUGHT`
   */
  | "NoThought"
  /**
   * How easy the creature is to smell. The higher the number, the easier the creature is to sniff out. Defaults to 50.
   * Vanilla creatures have values from 0 (undetectable) to 90 (noticeable by humans and dwarves).
   *
   * Appears as `ODOR_LEVEL:50`
   */
  | {
      OdorLevel: {
        /**
         * The odor level, defaults to 50
         */
        odor_level: number;
      };
    }
  /**
   * What the creature smells like. If no odor string is defined, the creature name (not the caste name) is used.
   *
   * Appears as `ODOR_STRING:SomeOdor`
   */
  | {
      OdorString: {
        /**
         * The odor string to use
         */
        odor_string: string;
      };
    }
  /**
   * Is hostile to all creatures except undead and other non-living ones and will show Opposed to life in the unit list. Used by undead in the vanilla game.
   * Functions without the `[NOT_LIVING]` token, and seems to imply said token as well. Undead will not be hostile to otherwise-living creatures given this token.
   * Living creatures given this token will attack living creatures that lack it, while ignoring other living creatures that also have this token.
   *
   * Appears as `OPPOSED_TO_LIFE`
   */
  | "OpposedToLife"
  /**
   * Determines caste's likelihood of having sexual attraction to certain sexes. Values default to 75:20:5 for the same sex and 5:20:75 for the opposite sex.
   * The first value indicates how likely to be entirely uninterested in the sex, the second decides if the creature will be able to become lovers with that sex,
   * the third decides whether they will be able to marry in worldgen and post-worldgen world activities (which implies being able to become lovers). Marriage seems
   * to be able to happen in fort mode play regardless, as long as they are lovers first.
   *
   * Arguments:
   *
   * * `caste`: The caste to set orientation to (MALE or FEMALE typically)
   * * `disinterested_chance`: The chance of being disinterested in `caste`
   * * `casual_chance`: The chance of being casually interested in `caste`
   * * `strong_chance`: The chance of being strongly interested in `caste`
   *
   * Appears as `ORIENTATION:SomeCaste:75:20:5`
   */
  | {
      Orientation: {
        /**
         * The caste to set orientation to
         */
        caste: string;
        /**
         * The chance of being disinterested in `caste`
         */
        disinterested_chance: number;
        /**
         * The chance of being casually interested in `caste`
         */
        casual_chance: number;
        /**
         * The chance of being strongly interested in `caste`
         */
        strong_chance: number;
      };
    }
  /**
   * Lets you play as an outsider of this species in adventure mode.
   *
   * Appears as `OUTSIDER_CONTROLLABLE`
   */
  | "OutsiderControllable"
  /**
   * Allows the creature to be used as a pack animal. Used by merchants without wagons and adventurers. Also prevents creature from dropping hauled items on its own
   *
   * Note: do not use for player-controllable creatures! May lead to the creature being domesticated during worldgen, even if it doesn't have `[COMMON_DOMESTIC]`.
   *
   * Appears as `PACK_ANIMAL`
   */
  | "PackAnimal"
  /**
   * The creature is immune to all paralyzing special attacks.
   *
   * Appears as `PARALYZEIMMUNE`
   */
  | "ParalyzeImmune"
  /**
   * Used to control the bat riders with paralyze-dart blowguns that flew through the 2D chasm. Doesn't do anything now.
   *
   * Appears as `PATTERNFLIER`
   */
  | "PatternFlier"
  /**
   * In earlier versions, creature would generate pearls. Does nothing in the current version
   *
   * Appears as `PEARL`
   */
  | "Pearl"
  /**
   * Controls the ability of vermin to find a way into containers when they are eating food from your stockpiles.
   *
   * Objects made of most materials (e.g. metal) roll a number from 0-100, and if the resulting number is greater than the penetrate power, their contents escape for the time
   * being. Objects made of wood, leather, amber, or coral roll 0-95, and items made of cloth roll 0-90.
   *
   * Appears as `PENETRATEPOWER:100`
   */
  | {
      PenetratePower: {
        /**
         * The penetration power
         */
        penetrate_power: number;
      };
    }
  /**
   * Determines the range and chance of personality traits. Standard is 0:50:100.
   *
   * Arguments:
   *
   * * `personality_trait`: The trait to modify
   * * `low`: The lowest chance of having the trait
   * * `median`: The median chance of having the trait
   * * `high`: The highest chance of having the trait
   *
   * Appears as `PERSONALITY:SomeTrait:0:50:100`
   */
  | {
      Personality: {
        /**
         * The trait to modify
         */
        personality_trait: string;
        /**
         * The lowest chance of having the trait
         */
        low: number;
        /**
         * The median chance of having the trait
         */
        median: number;
        /**
         * The highest chance of having the trait
         */
        high: number;
      };
    }
  /**
   * Allows the creature to be tamed in Fortress mode. Prerequisite for all other working animal roles. Civilizations that encounter it in worldgen
   * will tame and domesticate it for their own use. Adding this to civilization members will classify them as pets instead of citizens, with all the
   * problems that entails. However, you can solve these problems using the popular plugin Dwarf Therapist, which is completely unaffected by the tag.
   *
   * Appears as `PET`
   */
  | "Pet"
  /**
   * Allows the creature to be tamed in Fortress mode. Prequisite for all other working animal roles. Civilizations cannot domesticate it in worldgen,
   * with certain exceptions. Adding this to civilization members will classify them as pets instead of citizens, with all the problems that entails.
   *
   * Appears as `PET_EXOTIC`
   */
  | "PetExotic"
  /**
   * How valuable a tamed animal is. Actual cost in points in the embarking screen is 1+(PETVALUE/2) for an untrained animal, 1+PETVALUE for a war/hunting one.
   *
   * Appears as `PETVALUE:100`
   */
  | {
      PetValue: {
        /**
         * The pet value
         */
        pet_value: number;
      };
    }
  /**
   * Divides the creature's [PETVALUE] by the specified number. Used by honey bees to prevent a single hive from being worth a fortune.
   *
   * Appears as `PETVALUE_DIVISOR:2`
   */
  | {
      PetValueDivisor: {
        /**
         * The divisor
         */
        divisor: number;
      };
    }
  /**
   * Default is 200. This means you can increase your attribute to 200% of its starting value (or the average value + your starting value if that is higher).
   *
   * Appears as `PHYS_ATT_CAP_PERC:Attribute:200`
   */
  | {
      PhysicalAttributeCapPercentage: {
        /**
         * The attribute to modify
         */
        attribute: string;
        /**
         * The percentage to modify the attribute by
         */
        percentage: number;
      };
    }
  /**
   * Sets up a physical attribute's range of values (0-5000). All physical attribute ranges default to 200:700:900:1000:1100:1300:2000.
   *
   * Appears as `PHYS_ATT_RANGE:Attribute:200:700:900:1000:1100:1300:2000`
   */
  | {
      PhysicalAttributeRange: {
        /**
         * The attribute to modify
         */
        attribute: string;
        /**
         * The ranges from lowest to highest with 7 steps
         */
        ranges: [number, number, number, number, number, number, number];
      };
    }
  /**
   * Physical attribute gain/decay rates. Lower numbers in the last three slots make decay occur faster. Defaults for `STRENGTH`, `AGILITY`, `TOUGHNESS`, and `ENDURANCE`
   * are `500:3:4:3`, while `RECUPERATION` and `DISEASE_RESISTANCE` default to `500:NONE:NONE:NONE`.
   *
   * Arguments:
   *
   * * `attribute`: The attribute to modify
   * * `improvement_cost`: The cost to improve the attribute
   * * `decay_rate_unused`: The decay rate of the attribute when it is unused
   * * `decay_rate_rusty`: The decay rate of the attribute when it is rusty
   * * `decay_rate_demotion`: The decay rate of the attribute when it is demoted
   *
   * Appears as `PHYS_ATT_RATE:Attribute:500:3:4:3`
   */
  | {
      PhysicalAttributeRate: {
        /**
         * The attribute to modify
         */
        attribute: string;
        /**
         * The cost to improve the attribute
         */
        improvement_cost: number;
        /**
         * The decay rate of the attribute when it is unused
         */
        decay_rate_unused: number;
        /**
         * The decay rate of the attribute when it is rusty
         */
        decay_rate_rusty: number;
        /**
         * The decay rate of the attribute when it is demoted
         */
        decay_rate_demotion: number;
      };
    }
  /**
   * Adds a body part group to selected body part group. Presumably used immediately after `[SET_BP_GROUP]`.
   *
   * Arguments:
   *
   * * `body_part_selector`: The body part selector to use
   * * `body_part_group`: The body part group to add
   *
   * Appears as `PLUS_BP_GROUP:SomeBodyPartSelector:SomeBodyPartGroup`
   */
  | {
      PlusBodyPartGroup: {
        /**
         * The body part selector to use
         */
        body_part_selector: string;
        /**
         * The body part group to add
         */
        body_part_group: string;
      };
    }
  /**
   * Weighted population of caste; Lower is rarer. Not to be confused with [FREQUENCY].
   *
   * Appears as `POP_RATIO:100`
   */
  | {
      PopulationRatio: {
        /**
         * The population ratio
         */
        pop_ratio: number;
      };
    }
  /**
   * Allows the being to represent itself as a deity, allowing it to become the leader of a civilized group. Used by unique demons in the vanilla game.
   * Requires `[CAN_SPEAK]` to actually do anything more than settle at a location (e.g. write books, lead armies, profane temples). Doesn't appear to do anything
   * for creatures that are already civilized. Once the creature ascends to a position of leadership, it will proceed to act as a standard ruler for their
   * entity and fulfill the same functions (hold tournaments, tame creatures, etc.).
   *
   * Appears as `POWER`
   */
  | "Power"
  /**
   * Caste-specific profession name.
   *
   * Arguments:
   *
   * * `profession`: The profession name / unit type token ID
   * * `singular`: The singular name of the profession
   * * `plural`: The plural name of the profession
   *
   * Appears as `CASTE_PROFESSION_NAME:SomeProfession:SomeName:SomeNames`
   */
  | {
      ProfessionName: {
        /**
         * The profession name / unit type token ID
         */
        profession: string;
        /**
         * The singular name of the profession
         */
        singular: string;
        /**
         * The plural name of the profession
         */
        plural: string;
      };
    }
  /**
   * Creature has a percentage chance to flip out at visible non-friendly creatures. Enraged creatures attack anything regardless of timidity and get a
   * strength bonus to their hits. This is what makes badgers so hardcore.
   *
   * Appears as `PRONE_TO_RAGE:100`
   */
  | {
      ProneToRage: {
        /**
         * The rage chance
         */
        rage_chance: number;
      };
    }
  /**
   * The creature has pus. Specifies the stuff secreted by infected wounds.
   *
   * Arguments:
   *
   * * `material`: The material of the pus
   * * `material_state`: The material state of the pus
   *
   * Appears as `PUS:SomeMaterial:SomeMaterialState`
   */
  | {
      Pus: {
        /**
         * The material of the pus
         */
        material: string;
        /**
         * The material state of the pus
         */
        material_state: string;
      };
    }
  /**
   * Specifies a new relative size for a part than what is stated in the body plan. For example, dwarves have larger livers.
   *
   * Arguments:
   *
   * * `body_part_selector`: The body part selector to use
   * * `body_part`: The body part to modify
   * * `relative_size`: The relative size of the body part (by percentage?)
   *
   * Appears as `RELATIVE_SIZE:SomeBodyPartSelector:SomeBodyPart:100`
   */
  | {
      RelativeSize: {
        /**
         * The body part selector to use
         */
        body_part_selector: string;
        /**
         * The body part to modify
         */
        body_part: string;
        /**
         * The relative size of the body part (by percentage?)
         */
        relative_size: number;
      };
    }
  /**
   * What the creature's remains are called.
   *
   * Appears as `REMAINS:SomeRemain:SomeRemains`
   */
  | {
      Remains: {
        /**
         * The singular name of the remains
         */
        singular: string;
        /**
         * The plural name of the remains
         */
        plural: string;
      };
    }
  /**
   * What color the creature's remains are.
   *
   * Appears as `REMAINS_COLOR:SomeColor`
   */
  | {
      RemainsColor: {
        /**
         * The color of the remains
         */
        remains_color: string;
      };
    }
  /**
   * Goes with `[VERMIN_BITE]` and `[DIE_WHEN_VERMIN_BITE]`, the vermin creature will leave remains on death when biting.
   * Leaving this tag out will cause the creature to disappear entirely after it bites.
   *
   * Appears as `REMAINS_ON_VERMIN_BITE_DEATH`
   */
  | "RemainsOnVerminBiteDeath"
  /**
   * Unknown remains variation.
   *
   * Appears as `REMAINS_UNDETERMINED`
   */
  | "RemainsUndetermined"
  /**
   * The creature will retract into the specified body part(s) when threatened. It will be unable to move or attack, but enemies will only be able to attack the specified body part(s). When one of the specified body part is severed off, the creature automatically unretracts and cannot retract anymore. More than one body part can be selected by using `BY_TYPE` or `BY_CATEGORY`.
   *
   * Second-person descriptions are used for adventurer mode natural ability. `"<pro_pos>"` can be used in the descriptions, being replaced with the proper pronoun (or lack thereof) in-game.
   *
   * Undead curled up creatures are buggy, specifically those that retract into their upper bodies: echidnas, hedgehogs and pangolins. The upper body is prevented from collapsing by a separate body part (the middle spine), which cannot be attacked when the creature is retracted. See `[PREVENTS_PARENT_COLLAPSE]`. Living creatures eventually succumb to blood loss, but undead creatures do not. Giant creatures also take a very long time to bleed out.
   *
   * Arguments:
   *
   * * `body_part_selector`: The body part selector to use
   * * `body_part`: The body part to retract
   * * `second_person`: Description using "you" and "your"
   * * `third_person`: Description using "it" and "its"
   * * `second_person_cancel`: Description using "you" and "your" when the creature is no longer retracted
   * * `third_person_cancel`: Description using "it" and "its" when the creature is no longer retracted
   *
   * Appears as `RETRACT_INTO_BP:SomeBodyPartSelector:SomeBodyPart:SomeSecondPerson:SomeThirdPerson:SomeSecondPersonCancel:SomeThirdPersonCancel`
   */
  | {
      RetractIntoBodyPart: {
        /**
         * The body part selector to use
         */
        body_part_selector: string;
        /**
         * The body part to retract
         */
        body_part: string;
        /**
         * Description using "you" and "your"
         */
        second_person: string;
        /**
         * Description using "it" and "its"
         */
        third_person: string;
        /**
         * Description using "you" and "your" when the creature is no longer retracted
         */
        second_person_cancel: string;
        /**
         * Description using "it" and "its" when the creature is no longer retracted
         */
        third_person_cancel: string;
      };
    }
  /**
   * Cat behavior. If it kills a vermin creature and has an owner, it carries the remains in its mouth and drops them at their feet. Requires `[HUNTS_VERMIN]`.
   *
   * Appears as `RETURNS_VERMIN_KILLS_TO_OWNER`
   */
  | "ReturnsVerminKillsToOwner"
  /**
   * Creature will occasionally root around in the grass, looking for insects. Used for flavor in Adventurer Mode, spawns vermin edible for this creature in Fortress Mode. Creatures missing the specified body part will be unable to perform this action. The action produces a message (visible in adventure mode) in the form:
   *
   * [creature] [verb text] the [description of creature's location]
   *
   * In adventure mode, the "rooting around" ability will be included in the "natural abilities" menu, represented by its second person verb text.
   *
   * Arguments:
   *
   * * `body_part_selector`: The body part selector to use
   * * `body_part`: The body part to use
   * * `second_person_verb`: Verb to use in second person tense ("you")
   * * `third_person_verb`: Verb to use in third person tense ("it")
   *
   * Appears as `ROOT_AROUND:SomeBodyPartSelector:SomeBodyPart:SomeSecondPersonVerb:SomeThirdPersonVerb`
   */
  | {
      RootAround: {
        /**
         * The body part selector to use
         */
        body_part_selector: string;
        /**
         * The body part to use
         */
        body_part: string;
        /**
         * Verb to use in second person tense ("you")
         */
        second_person_verb: string;
        /**
         * Verb to use in third person tense ("it")
         */
        third_person_verb: string;
      };
    }
  /**
   * Causes the specified tissue layer(s) of the indicated body part(s) to secrete the designated material. A size 100 ('covering') contaminant is created over the affected body part(s) in its specified material state (and at the temperature appropriate to this state) when the trigger condition is met, as long as one of the secretory tissue layers is still intact. Valid triggers are:
   *
   * * `CONTINUOUS`: Secretion occurs once every 40 ticks in fortress mode, and every tick in adventurer mode.
   * * `EXERTION`: Secretion occurs continuously (at the rate described above) whilst the creature is at minimum Tired following physical exertion. Note that this cannot occur if the creature has [NOEXERT].
   * * `EXTREME_EMOTION`:  Secretion occurs continuously (as above) whilst the creature is distressed. Cannot occur in creatures with [NOEMOTION].
   *
   * Arguments:
   *
   * * `material_token`: The material of the secretion
   * * `material_state`: The material state of the secretion
   * * `body_part_selector`: The body part selector to use
   * * `body_part`: The body part to use
   * * `tissue_layer`: The tissue layer to use
   * * `trigger`: The trigger to use (`CONTINUOUS`, `EXERTION`, `EXTREME_EMOTION`)
   *
   * Appears as `SECRETION:SomeMaterial:SomeMaterialState:SomeBodyPartSelector:SomeBodyPart:SomeTissueLayer:SomeTrigger`
   */
  | {
      Secretion: {
        /**
         * The material of the secretion
         */
        material_token: string;
        /**
         * The material state of the secretion
         */
        material_state: string;
        /**
         * The body part selector to use
         */
        body_part_selector: string;
        /**
         * The body part to use
         */
        body_part: string;
        /**
         * The tissue layer to use
         */
        tissue_layer: string;
        /**
         * The trigger to use (`CONTINUOUS`, `EXERTION`, `EXTREME_EMOTION`)
         */
        trigger: string;
      };
    }
  /**
   * Essentially the same as [MEGABEAST], but more of them are created during worldgen. See the semi-megabeast page for details.
   *
   * Appears as `SEMIMEGABEAST`
   */
  | "SemiMegabeast"
  /**
   * Gives the creature the ability to sense creatures belonging to the specified creature class even when they lie far beyond line of sight, including through walls and floors.
   * It also appears to reduce or negate the combat penalty of blind units when fighting creatures they can sense. In adventure mode, the specified tile will be used to represent
   * sensed creatures when they cannot be seen directly.
   *
   * Arguments:
   *
   * * `creature_class`: The creature class to sense
   * * `tile`: The tile to use
   * * `color`: via foreground, background, and brightness values
   *
   * Appears as `SENSE_CREATURE_CLASS:SomeCreatureClass:SomeTile:0:0:0`
   */
  | {
      SenseCreatureClass: {
        /**
         * The creature class to sense
         */
        creature_class: string;
        /**
         * The tile to use
         */
        tile: string;
        /**
         * The foreground color to use
         */
        foreground: number;
        /**
         * The background color to use
         */
        background: number;
        /**
         * The brightness to use
         */
        brightness: number;
      };
    }
  /**
   * Begins a selection of body parts.
   *
   * Arguments:
   *
   * * `body_part_selector`: The body part selector to use (`BY_TYPE`, `BY_CATEGORY`, `BY_TOKEN`)
   * * `body_part`: The body part to use (via category, type or token)
   *
   * Appears as `SET_BP_GROUP:SomeBodyPartSelector:SomeBodyPart`
   */
  | {
      SetBodyPartGroup: {
        /**
         * The body part selector to use (`BY_TYPE`, `BY_CATEGORY`, `BY_TOKEN`)
         */
        body_part_selector: string;
        /**
         * The body part to use (via category, type or token)
         */
        body_part: string;
      };
    }
  /**
   * The rate at which this creature learns this skill. Requires `[CAN_LEARN]` or `[INTELLIGENT]` to function.
   *
   * Arguments:
   *
   * * `skill`: The skill to modify
   * * `rate`: The rate to modify the skill by (percentage)
   *
   * Appears as `SKILL_LEARN_RATE:SomeSkill:100`
   */
  | {
      SkillLearnRate: {
        /**
         * The skill to modify
         */
        skill: string;
        /**
         * The rate to modify the skill by
         */
        rate: number;
      };
    }
  /**
   * The rate at which this creature learns all skills. Requires `[CAN_LEARN]` or `[INTELLIGENT]` to function.
   *
   * Arguments:
   *
   * * `rate`: The rate to modify the skill by (percentage)
   *
   * Appears as `SKILL_LEARN_RATES:100`
   */
  | {
      SkillLearnRates: {
        /**
         * The rate to modify the skill by
         */
        rate: number;
      };
    }
  /**
   * Like `[SKILL_RATES]`, but applies to individual skills instead. Requires `[CAN_LEARN]` or `[INTELLIGENT]` to function.
   *
   * Arguments:
   *
   * * `skill`: The skill to modify
   * * `improvement_rate`: The improvement rate to modify the skill by (percentage)
   * * `decay_rate_unused`: The decay rate of the skill when it is unused
   * * `decay_rate_rusty`: The decay rate of the skill when it is rusty
   * * `decay_rate_demotion`: The decay rate of the skill when it is demoted
   *
   * Appears as `SKILL_RATE:SomeSkill:100:3:4:3`
   */
  | {
      SkillRate: {
        /**
         * The skill to modify
         */
        skill: string;
        /**
         * The improvement rate to modify the skill by
         */
        improvement_rate: number;
        /**
         * The decay rate of the skill when it is unused
         */
        decay_rate_unused: number;
        /**
         * The decay rate of the skill when it is rusty
         */
        decay_rate_rusty: number;
        /**
         * The decay rate of the skill when it is demoted
         */
        decay_rate_demotion: number;
      };
    }
  /**
   * Affects skill gain and decay. Lower numbers in the last three slots make decay occur faster (`[SKILL_RATES:100:1:1:1]` would cause rapid decay).
   * The counter (decay) rates may also be replaced with NONE.
   *
   * Default is `[SKILL_RATES:100:8:16:16]`. Requires `[CAN_LEARN]` or `[INTELLIGENT]` to function.
   *
   * Arguments:
   *
   * * `improvement_rate`: The improvement rate to modify the skill by (percentage)
   * * `decay_rate_unused`: The decay rate of the skill when it is unused
   * * `decay_rate_rusty`: The decay rate of the skill when it is rusty
   * * `decay_rate_demotion`: The decay rate of the skill when it is demoted
   *
   * Appears as `SKILL_RATES:100:8:16:16`
   */
  | {
      SkillRates: {
        /**
         * The improvement rate to modify the skill by
         */
        improvement_rate: number;
        /**
         * The decay rate of the skill when it is unused
         */
        decay_rate_unused: number;
        /**
         * The decay rate of the skill when it is rusty
         */
        decay_rate_rusty: number;
        /**
         * The decay rate of the skill when it is demoted
         */
        decay_rate_demotion: number;
      };
    }
  /**
   * The rate at which this skill decays. Lower values cause the skill to decay faster. Requires `[CAN_LEARN]` or `[INTELLIGENT]` to function.
   *
   * Arguments:
   *
   * * `skill`: The skill to modify
   * * `decay_rate_unused`: The decay rate of the skill when it is unused
   * * `decay_rate_rusty`: The decay rate of the skill when it is rusty
   * * `decay_rate_demotion`: The decay rate of the skill when it is demoted
   *
   * Appears as `SKILL_RUST_RATE:SomeSkill:3:4:3`
   */
  | {
      SkillRustRate: {
        /**
         * The skill to modify
         */
        skill: string;
        /**
         * The decay rate of the skill when it is unused
         */
        decay_rate_unused: number;
        /**
         * The decay rate of the skill when it is rusty
         */
        decay_rate_rusty: number;
        /**
         * The decay rate of the skill when it is demoted
         */
        decay_rate_demotion: number;
      };
    }
  /**
   * The rate at which all skills decay. Lower values cause the skills to decay faster. Requires `[CAN_LEARN]` or `[INTELLIGENT]` to function.
   *
   * Arguments:
   *
   * * `decay_rate_unused`: The decay rate of the skill when it is unused
   * * `decay_rate_rusty`: The decay rate of the skill when it is rusty
   * * `decay_rate_demotion`: The decay rate of the skill when it is demoted
   *
   * Appears as `SKILL_RUST_RATES:3:4:3`
   */
  | {
      SkillRustRates: {
        /**
         * The decay rate of the skill when it is unused
         */
        decay_rate_unused: number;
        /**
         * The decay rate of the skill when it is rusty
         */
        decay_rate_rusty: number;
        /**
         * The decay rate of the skill when it is demoted
         */
        decay_rate_demotion: number;
      };
    }
  /**
   * Caste-specific `[SLAIN_SPEECH]`.
   *
   * Appears as `SLAIN_CASTE_SPEECH:SomeSpeechSet`
   */
  | {
      SlainSpeech: {
        /**
         * The speech set to use
         */
        speech_file: string;
      };
    }
  /**
   * Shorthand for `[CAN_LEARN]` + `[SKILL_LEARN_RATES:50]`. Used by a number of 'primitive' creatures (like ogres, giants and troglodytes) in the vanilla game.
   * Applicable to player races. Prevents a player from recruiting nobility, even basic ones. Subterranean creatures with this token combined with [EVIL] will become
   * servants of goblins in their civilizations, in the style of trolls.
   *
   * Appears as `SLOW_LEARNER`
   */
  | "SlowLearner"
  /**
   * Creature leaves "remains" instead of a corpse. Used by vermin.
   *
   * Appears as `SMALL_REMAINS`
   */
  | "SmallRemains"
  /**
   * Caste-specific solider tile.
   *
   * Appears as `CASTE_SOLDIER_TILE:SomeTile`
   */
  | {
      SoldierTile: {
        /**
         * The tile to use
         */
        tile: string;
      };
    }
  /**
   * Caste-specific solider alt tile.
   *
   * Appears as `CASTE_SOLDIER_ALTTILE:SomeTile`
   */
  | {
      SoldierAltTile: {
        /**
         * The tile to use
         */
        tile: string;
      };
    }
  /**
   * Creature makes sounds periodically, which can be heard in Adventure mode.
   *
   * For example, with `SOUND:PEACEFUL_INTERMITTENT:100:1000:VOCALIZATION:bark:barks:a loud bark`
   *
   * * First-person reads "You 'bark'"
   * * Third-person reads "The capybara 'barks'"
   * * Out of sight reads "You hear 'a loud bark'"
   *
   * Arguments:
   *
   * * `sound_type`: The sound type to use (`ALERT` or `PEACEFUL_INTERMITTENT`)
   * * `sound_range`: The range of the sound (in tiles)
   * * `sound_interval`: A delay before the sound is produced again (in ticks)
   * * `requires_breathing`: Whether the creature needs to breathe to make the sound
   * * `first_person`: The first-person description of the sound
   * * `third_person`: The third-person description of the sound
   * * `out_of_sight`: The out-of-sight description of the sound
   *
   * Appears as `SOUND:SomeSoundType:100:1000:SomeFirstPerson:SomeThirdPerson:SomeOutOfSight`
   */
  | {
      Sound: {
        /**
         * The sound type to use (`ALERT` or `PEACEFUL_INTERMITTENT`)
         */
        sound_type: string;
        /**
         * The range of the sound (in tiles)
         */
        sound_range: number;
        /**
         * A delay before the sound is produced again (in ticks)
         */
        sound_interval: number;
        /**
         * Whether the creature needs to breathe to make the sound
         */
        requires_breathing: boolean;
        /**
         * The first-person description of the sound
         */
        first_person: string;
        /**
         * The third-person description of the sound
         */
        third_person: string;
        /**
         * The out-of-sight description of the sound
         */
        out_of_sight: string;
      };
    }
  /**
   * Creature will only appear in biomes with this plant or creature available.
   * Grazers given a specific type of grass (such as pandas and bamboo) will only eat that grass and nothing else, risking starvation if there's none available.
   *
   * Arguments:
   *
   * * `food_type`: The type of the required food
   * * `identifier`: The identifier of the required plant or creature
   *
   * Appears as `SPECIFIC_FOOD:PLANT:Bamboo` or `SPECIFIC_FOOD:CREATURE:Tiger`
   */
  | {
      SpecificFood: {
        /**
         * The type of the required food
         */
        food_type: ObjectType;
        /**
         * The identifier of the required plant or creature
         */
        identifier: string;
      };
    }
  /**
   * This creature can be converted by a night creature with `[SPOUSE_CONVERTER]`.
   *
   * Appears as `SPOUSE_CONVERSION_TARGET`
   */
  | "SpouseConversionTarget"
  /**
   * If the creature has the `[NIGHT_CREATURE_HUNTER]` tag, it will kidnap `[SPOUSE_CONVERSION_TARGET]`s and transform them into the caste of its species
   * with the `[CONVERTED_SPOUSE]` tag during worldgen. It may also start families this way.
   *
   * Appears as `SPOUSE_CONVERTER`
   */
  | "SpouseConverter"
  /**
   * If the creature rules over a site, it will cause the local landscape to be corrupted into evil surroundings associated with the creature's spheres.
   * The creature must have at least one of the following spheres for this to take effect: BLIGHT, DEATH, DISEASE, DEFORMITY, NIGHTMARES. The first three kill vegetation,
   * while the others sometimes do. The last two get evil plants and evil animals sometimes. NIGHTMARES gets bogeymen. [4] Used by demons in the vanilla game.
   *
   * Appears as `SPREAD_EVIL_SPHERES_IF_RULER`
   */
  | "SpreadEvilSpheresIfRuler"
  /**
   * Caste does not require [GRASP] body parts to climb -- it can climb with [STANCE] parts instead.
   *
   * Appears as `STANCE_CLIMBER`
   */
  | "StanceClimber"
  /**
   * Acts as [GRAZER] but set to 20000*G*(max size)^(-3/4), where G defaults to 100 but can be set in `d_init`, and the whole thing is trapped between 150 and 3 million.
   * Used for all grazers in the default creature raws.
   *
   * Appears as `STANDARD_GRAZER`
   */
  | "StandardGrazer"
  /**
   * The creature will get strange moods in fortress mode and can produce artifacts.
   *
   * Appears as `STRANGE_MOODS`
   */
  | "StrangeMoods"
  /**
   * Gives the creature knowledge of any secrets with `[SUPERNATURAL_LEARNING_POSSIBLE]` that match its spheres and also prevents it from becoming a vampire or werebeast.
   * Other effects are unknown.
   *
   * Appears as `SUPERNATURAL`
   */
  | "Supernatural"
  /**
   * The creature naturally knows how to swim perfectly and does not use the swimmer skill, as opposed to `[SWIMS_LEARNED]` below.
   * However, Fortress mode AI never paths into water anyway, so it's less useful there.
   *
   * Appears as `SWIMS_INNATE`
   */
  | "SwimsInnate"
  /**
   * The creature swims only as well as their present swimming skill allows them to.
   *
   * Appears as `SWIMS_LEARNED`
   */
  | "SwimsLearned"
  /**
   * Dilutes the effects of syndromes which have the specified identifier. A percentage of 100 is equal to the regular syndrome effect severity, higher percentages reduce severity.
   *
   * Arguments:
   *
   * * `syndrome`: The syndrome to modify
   * * `percentage`: The percentage to modify the syndrome by
   *
   * Appears as `SYNDROME_DILUTION_FACTOR:SomeSyndrome:100`
   */
  | {
      SyndromeDilutionFactor: {
        /**
         * The syndrome to modify
         */
        syndrome: string;
        /**
         * The percentage to modify the syndrome by
         */
        percentage: number;
      };
    }
  /**
   * The creature has tendons in its `[CONNECTIVE_TISSUE_ANCHOR]` tissues (bone or chitin by default).
   * Cutting the bone/chitin tissue severs the tendons, disabling motor function if the target is a limb.
   *
   * Arguments:
   *
   * * `material`: The material of the tendons
   * * `healing_rate`: The rate at which the tendons heal (lower is faster)
   *
   * Appears as `TENDONS:SomeMaterial:100`
   */
  | {
      Tendons: {
        /**
         * The material of the tendons
         */
        material: string;
        /**
         * The rate at which the tendons heal (lower is faster)
         */
        healing_rate: number;
      };
    }
  /**
   * The creature's webs can catch larger creatures.
   *
   * Appears as `THICKWEB`
   */
  | "ThickWeb"
  /**
   * Caste-specific tile.
   *
   * Appears as `CASTE_TILE:SomeTile`
   */
  | {
      Tile: {
        /**
         * The tile to use
         */
        tile: string;
      };
    }
  /**
   * Adds the tissue layer to wherever it is required.
   *
   * Non-argument Locations can be FRONT, RIGHT, LEFT, TOP, BOTTOM. Argument locations are AROUND and CLEANS, requiring a further body part and a % of coverage/cleansing
   *
   * Arguments:
   *
   * * `body_part_selector`: The body part selector to use (`BY_TYPE`, `BY_CATEGORY`, `BY_TOKEN`)
   * * `body_part`: The body part to use (via category, type or token)
   * * `tissue`: The name of the tissue to use
   * * `location`: The location to use (`FRONT`, `RIGHT`, `LEFT`, `TOP`, `BOTTOM`) or with an additional argument, (`AROUND`, `CLEANS`) with a body part and a percentage
   *
   * Appears as `[TISSUE_LAYER:SomeBodyPartSelector:SomeBodyPart:SomeTissue:SomeLocation]` or `[TISSUE_LAYER:SomeBodyPartSelector:SomeBodyPart:SomeTissue:SomeLocation:SomeBodyPart:100]`
   * ALSO appears as `[TISSUE_LAYER_OVER:SomeBodyPartSelector:SomeBodyPart:SomeTissue:SomeLocation]` or `[TISSUE_LAYER_OVER:SomeBodyPartSelector:SomeBodyPart:SomeTissue:SomeLocation:SomeBodyPart:100]`
   */
  | {
      TissueLayer: {
        /**
         * The body part selector to use (`BY_TYPE`, `BY_CATEGORY`, `BY_TOKEN`)
         */
        body_part_selector: string;
        /**
         * The body part to use (via category, type or token)
         */
        body_part: string;
        /**
         * The name of the tissue to use
         */
        tissue: string;
        /**
         * The location to use (FRONT, RIGHT, LEFT, TOP, BOTTOM) or with an additional argument, (AROUND, CLEANS) with a body part and a percentage
         */
        location: string;
      };
    }
  /**
   * Adds the tissue layer under a given part.
   *
   * For example, an iron man has a gaseous poison within, and this tissue (GAS is its name) has the token `[TISSUE_LEAKS]` and its state is GAS, so when you puncture the iron outside and
   * damage this tissue it leaks gas (can have a syndrome by using a previous one in the creature sample.)
   * `[TISSUE_LAYER_UNDER:BY_CATEGORY:ALL:{tissue}]`
   *
   * `{tissue}` is what will be under the `TISSUE_LAYER`; here is an example Tissue from the Iron Man:
   *
   * `[TISSUE:GAS] [TISSUE_NAME:gas:NP] [TISSUE_MATERIAL:LOCAL_CREATURE_MAT:GAS] [TISSUE_MAT_STATE:GAS] [RELATIVE_THICKNESS:50] [TISSUE_LEAKS] [TISSUE_SHAPE:LAYER]`
   *
   * Arguments:
   *
   * * `body_part_selector`: The body part selector to use (`BY_TYPE`, `BY_CATEGORY`, `BY_TOKEN`)
   * * `body_part`: The body part to use (via category, type or token)
   * * `tissue`: The name of the tissue to use
   *
   * Appears as `TISSUE_LAYER_UNDER:SomeBodyPartSelector:SomeBodyPart:SomeTissue`
   */
  | {
      TissueLayerUnder: {
        /**
         * The body part selector to use (`BY_TYPE`, `BY_CATEGORY`, `BY_TOKEN`)
         */
        body_part_selector: string;
        /**
         * The body part to use (via category, type or token)
         */
        body_part: string;
        /**
         * The name of the tissue to use
         */
        tissue: string;
      };
    }
  /**
   * Found on titans. Cannot be specified in user-defined raws.
   *
   * Appears as `TITAN`
   */
  | "Titan"
  /**
   * How much the creature can carry when used by merchants. 1000 by default. If a civilization uses a custom pack animal via `ALWAYS_PACK`, you must manually add a capacity to the raws of that
   * creature itself. Capacity defaults to null leading to empty caravans.
   *
   * Arguments:
   *
   * * `capacity`: The capacity of the creature
   *
   * Appears as `TRADE_CAPACITY:1000`
   */
  | {
      TradeCapacity: {
        /**
         * The capacity of the creature
         */
        capacity: number;
      };
    }
  /**
   * Shortcut for `[TRAINABLE_HUNTING]` + `[TRAINABLE_WAR]`.
   *
   * Appears as `TRAINABLE`
   */
  | "Trainable"
  /**
   * Can be trained as a hunting beast, increasing speed.
   *
   * Appears as `TRAINABLE_HUNTING`
   */
  | "TrainableHunting"
  /**
   * Can be trained as a war beast, increasing strength and endurance.
   *
   * Appears as `TRAINABLE_WAR`
   */
  | "TrainableWar"
  /**
   * Allows the creature to go into martial trances. Used by dwarves in the vanilla game.
   *
   * Appears as `TRANCES`
   */
  | "Trances"
  /**
   * The creature will never trigger traps it steps on. Used by a number of creatures. Doesn't make the creature immune to remotely activated traps (like retractable spikes being triggered
   * while the creature is standing over them). TRAPAVOID creatures lose this power if they're immobilized while standing in a trap, be it by stepping on thick web, being paralyzed or being
   * knocked unconscious.
   *
   * Appears as `TRAPAVOID`
   */
  | "TrapAvoid"
  /**
   * The creature is displayed as blue when in 7/7 water. Used on fish and amphibious creatures which swim under the water.
   *
   * Appears as `UNDERSWIM`
   */
  | "UnderSwim"
  /**
   * Found on generated demons; causes the game to create a single named instance of the demon which will emerge from the underworld and take over civilizations during worldgen.
   *
   * Appears as `UNIQUE_DEMON`
   */
  | "UniqueDemon"
  /**
   * Like `[AT_PEACE_WITH_WILDLIFE]`, but also makes the creature more valued in artwork by civilisations with the PLANT sphere. [5] Used by grimelings in the vanilla game.
   *
   * Appears as `VEGETATION`
   */
  | "Vegetation"
  /**
   * Enables vermin to bite other creatures, injecting the specified material. See `[SPECIALATTACK_INJECT_EXTRACT]` for details about injection - this token presumably works in a similar manner.
   *
   * Arguments:
   *
   * * `chance`: The chance to inject the material
   * * `verb`: The verb to use (e.g. "bitten, stung")
   * * `material`: The material to inject
   * * `material_state`: The material state to inject
   *
   * Appears as `VERMIN_BITE:100:bitten:SomeMaterial:SomeMaterialState`
   */
  | {
      VerminBite: {
        /**
         * The chance to inject the material
         */
        chance: number;
        /**
         * The verb to use (e.g. "bitten, stung")
         */
        verb: string;
        /**
         * The material to inject
         */
        material: string;
        /**
         * The material state to inject
         */
        material_state: string;
      };
    }
  /**
   * Some dwarves will hate the creature and get unhappy thoughts when around it. See the list of hateable vermin for details.
   *
   * Appears as `VERMIN_HATEABLE`
   */
  | "VerminHateable"
  /**
   * This makes the creature move in a swarm of creatures of the same race as it (e.g. swarm of flies, swarm of ants).
   *
   * Appears as `VERMIN_MICRO`
   */
  | "VerminMicro"
  /**
   * The creature cannot be caught by fishing.
   *
   * Appears as `VERMIN_NOFISH`
   */
  | "VerminNoFish"
  /**
   * The creature will not be observed randomly roaming about the map.
   *
   * Appears as `VERMIN_NOROAM`
   */
  | "VerminNoRoam"
  /**
   * The creature cannot be caught in baited animal traps; however, a "catch live land animal" task may still be able to capture one if a dwarf finds one roaming around.
   *
   * Appears as `VERMIN_NOTRAP`
   */
  | "VerminNoTrap"
  /**
   * Old shorthand for "does cat stuff". Contains `[AT_PEACE_WITH_WILDLIFE]` + `[RETURNS_VERMIN_KILLS_TO_OWNER]` + `[HUNTS_VERMIN]` + `[ADOPTS_OWNER]`.
   *
   * Appears as `VERMINHUNTER`
   */
  | "VerminHunter"
  /**
   * Sets the creature to be active during the evening in adventurer mode.
   *
   * Appears as `VESPERTINE`
   */
  | "Vespertine"
  /**
   * Value should determine how close you have to get to a critter before it attacks (or prevents adv mode travel etc.) Default is 20.
   *
   * Appears as `VIEWRANGE:20`
   */
  | {
      ViewRange: {
        /**
         * The view range of the creature, default is 20
         */
        view_range: number;
      };
    }
  /**
   * The width of the creature's vision arcs, in degrees (i.e. 0 to 360). The first number is binocular vision, the second is non-binocular vision.
   * Binocular vision has a minimum of about 10 degrees, monocular, a maximum of about 350 degrees. Values past these limits will be accepted, but will default to ~10 degrees
   * and ~350 degrees respectively.
   *
   * Defaults are 60:120.
   *
   * Appears as `VISION_ARC:60:120`
   */
  | {
      VisionArc: {
        /**
         * The binocular vision arc of the creature, default is 60
         */
        binocular: number;
        /**
         * The non-binocular vision arc of the creature, default is 120
         */
        non_binocular: number;
      };
    }
  /**
   * Allows the creature to pull caravan wagons. If a civilization doesn't have access to any, it is restricted to trading with pack animals.
   *
   * Appears as `WAGON_PULLER`
   */
  | "WagonPuller"
  /**
   * Allows the creature to create webs, and defines what the webs are made of.
   *
   * Arguments:
   *
   * * `material`: The material of the webs
   *
   * Appears as `WEBBER:SomeMaterial`
   */
  | {
      Webber: {
        /**
         * The material of the webs
         */
        material: string;
      };
    }
  /**
   * The creature will not get caught in thick webs. Used by creatures who can shoot thick webs (such as giant cave spiders) in order to make them immune to their own attacks.
   *
   * Appears as `WEBIMMUNE`
   */
  | "WebImmune"
  /**
   * An unknown token.
   */
  | "Unknown"
  /**
   * A night creature
   */
  | "NightCreature"
  /**
   * Not fire immune
   */
  | "NotFireImmune"
  /**
   * Has blood
   */
  | "HasBlood"
  /**
   * Can grasp
   */
  | "Grasp"
  /**
   * The gait of the race
   */
  | "RaceGait"
  /**
   * Cannot breathe water
   */
  | "CannotBreatheWater"
  /**
   * Is a natural animal
   */
  | "NaturalAnimal"
  /**
   * Is a curious beast
   */
  | "CuriousBeast"
  /**
   * Is a flying curious beast
   */
  | "CannotBreatheAir";

/**
 * A struct representing a creature caste.
 */
export type Caste = {
  identifier: string;
  tags?: CasteTag[] | null;
  description?: string | null;
  babyName?: SingPlurName | null;
  casteName?: Name | null;
  childName?: SingPlurName | null;
  /**
   * Default \[0,0\]
   */
  clutchSize?: [number, number] | null;
  /**
   * Default \[0,0\]
   */
  litterSize?: [number, number] | null;
  /**
   * Default \[0,0\]
   */
  maxAge?: [number, number] | null;
  baby?: number | null;
  child?: number | null;
  difficulty?: number | null;
  eggSize?: number | null;
  grassTrample?: number | null;
  grazer?: number | null;
  lowLightVision?: number | null;
  petValue?: number | null;
  popRatio?: number | null;
  changeBodySizePercentage?: number | null;
  creatureClass?: string[] | null;
  bodySize?: BodySize[] | null;
  milkable?: Milkable | null;
  tile?: Tile | null;
  /**
   * The gaits by which the creature can move.
   */
  gaits?: Gait[] | null;
};

/**
 * An enum representing a creature effect property.
 */
export type CreatureEffectProperty =
  /**
   * The severity of the effect. Higher values appear to be worse, with SEV:1000 `CE_NECROSIS` causing a part to near-instantly become rotten.
   */
  | "Severity"
  /**
   * The probability of the effect actually manifesting in the victim, as a percentage. 100 means always, 1 means a 1 in 100 chance.
   */
  | "Probability"
  /**
   * (Optional) Determines if the effect can be hindered by the target creature's disease resistance attribute.
   * Without this token, disease resistance is ignored. (yes, it's spelled incorrectly)
   */
  | "Resistible"
  /**
   * (Optional) This token presumably causes the severity of the effect to scale with the size of the creature compared
   * to the size of the dose of contagion they received, but has yet to be extensively tested.
   */
  | "SizeDilutes"
  /**
   * (Optional) As above, this token has yet to be tested but presumably delays the onset of an effect according to the size of the victim.
   */
  | "SizeDelays"
  /**
   * (Optional; overrides BP tokens) This tag causes an effect to ignore all BP tokens and then forces the game to attempt to apply the effect to
   * the limb that came into contact with the contagion - i.e. the part that was bitten by the creature injecting the syndrome material,
   * or the one that was splattered by a contact contagion. If an effect can not be applied to the contacted limb (such as `IMPAIR_FUNCTION` on a non-organ)
   * then this token makes the effect do nothing. This token also makes inhaled syndromes have no effect.
   */
  | "Localized"
  /**
   * (Optional) This effect only affects tissue layers with the VASCULAR token.
   */
  | "VascularOnly"
  /**
   * (Optional) This effect only affects tissue layers with the MUSCULAR token.
   */
  | "MuscularOnly"
  /**
   * (Optional; overridden by LOCALIZED) Specifies which body parts and tissues the effect is to be applied to. Not every effect requires a target!
   * For example, if you wanted to target the lungs of a creature, you would use `BP:BY_CATEGORY:LUNG:ALL`. The effect would act on all body parts
   * within the creature with the CATEGORY tag LUNG and affect all tissue layers. For another example, say you wanted to cause the skin to rot off a creature -
   * you could use `BP:BY_CATEGORY:ALL:SKIN`, targeting the SKIN tissue on all body parts. Multiple targets can be given in one effect by placing the BP tokens end to end.
   * This is one of the most powerful and useful aspects of the syndrome system, as it allows you to selectively target body parts relevant to the contagion,
   * like lungs for coal dust inhalation, or the eyes for exposure to an acid gas.
   */
  | "BodyPart"
  /**
   * `BY_CATEGORY:X` to target body parts with a matching `[CATEGORY:X]` body token (or `ALL` to affect everything)
   */
  | "ByCategory"
  /**
   * `BY_TYPE:X` to target body parts having a particular type (`UPPERBODY`, `LOWERBODY`, `HEAD`, `GRASP`, or `STANCE`)
   */
  | "ByType"
  /**
   * `BY_TOKEN:X` to target individual body parts by their ID as specified by the `[BP]` token of the body plan definition.
   */
  | "ByToken"
  /**
   * Determines the time after exposure, in ticks, when the effect starts. Required for all effects.
   */
  | "Start"
  /**
   * (Optional) Determines the time after exposure, in ticks, when the effect reaches its peak intensity.
   */
  | "Peak"
  /**
   * (Optional) Determines the time after exposure, in ticks, when the effect ends.
   */
  | "End"
  /**
   * (Optional) Multiplies the duration values of the effect by the specified amount in Fortress mode.
   */
  | "DwfStretch"
  /**
   * (Optional) Makes the effect begin immediately rather than ramping up.
   */
  | "AbruptStart"
  /**
   * (Optional) Makes the effect end immediately rather than ramping down.
   */
  | "AbruptEnd"
  /**
   * (Optional) Combination of `ABRUPT_START` and `ABRUPT_END`.
   */
  | "Abrupt"
  /**
   * (Optional) Can be hidden by a unit assuming a secret identity, such as a vampire.
   */
  | "CanBeHidden"
  /**
   * Unknown value for default.
   */
  | "Unknown";

/**
 * An enum representing a creature effect token.
 */
export type CreatureEffectToken =
  /**
   * Afflicts the targeted body part with intense pain. If no target is specified this applies to all body parts.
   */
  | "Pain"
  /**
   * Causes the targeted body part to swell up. Extreme swelling may lead to necrosis.
   */
  | "Swelling"
  /**
   * Causes pus to ooze from the afflicted body part.
   */
  | "Oozing"
  /**
   * Causes the targeted body part to undergo bruising.
   */
  | "Bruising"
  /**
   * Covers the targeted body part with blisters.
   */
  | "Blisters"
  /**
   * Causes numbness in the affected body part, blocking pain. Extreme numbness may lead to sensory nerve damage.
   * If no target is specified this applies to all body parts.
   */
  | "Numbness"
  /**
   * Causes complete paralysis of the affected body part. Paralysis on a limb may lead to motor nerve damage.
   * If no target is specified this causes total paralysis, which can lead to suffocation of smaller creatures.
   */
  | "Paralysis"
  /**
   * Causes the Fever condition.
   */
  | "Fever"
  /**
   * Causes the targeted body part to start bleeding, with heavy enough bleeding resulting in the death of the sufferer.
   * Some conditions seem to cause bleeding to be fatal no matter how weak.
   */
  | "Bleeding"
  /**
   * This effect results in the sufferer periodically coughing blood, which stains the tile they're on and requires cleanup.
   * It doesn't appear to be lethal, but may cause minor bleeding damage.
   */
  | "CoughingBlood"
  /**
   * This effect results in the sufferer periodically vomiting blood, which stains the tile they're on and requires cleanup.
   * It doesn't appear to be lethal, but may cause minor bleeding damage.
   */
  | "VomitingBlood"
  /**
   * Causes the Nausea condition, and heavy vomiting. Can eventually lead to dehydration and death.
   */
  | "Nausea"
  /**
   * Renders the creature unconscious.
   */
  | "Unconsciousness"
  /**
   * Causes the targeted body part to rot, with associated tissue damage, miasma emission and bleeding.
   * The victim slowly bleeds to death if the wound is not treated. Badly necrotic limbs will require amputation.
   */
  | "Necrosis"
  /**
   * An organ afflicted with this effect is rendered inoperable.
   * E.g., if both lungs are impaired the creature can't breathe and will suffocate. This token only affects organs, not limbs.
   */
  | "ImpairFunction"
  /**
   * Causes the Drowsiness condition
   */
  | "Drowsiness"
  /**
   * Inflicts the Dizziness condition, occasional fainting and a general slowdown in movement and work speed.
   */
  | "Dizziness"
  /**
   * Decreases the severity of pain produced by wounds or syndrome effects on the targeted body part.
   * The SEV value probably controls by how much the pain is decreased.
   */
  | "ReducePain"
  /**
   * Decreases the severity of swelling on the targeted body part.
   */
  | "ReduceSwelling"
  /**
   * Decreases the severity of any paralysis effects on the targeted body part.
   */
  | "ReduceParalysis"
  /**
   * Decreases the severity of any dizziness the creature has.
   */
  | "ReduceDizziness"
  /**
   * Decreases the severity of any nausea the creature has.
   */
  | "ReduceNausea"
  /**
   * Decreases the severity of any fever the creature has.
   */
  | "ReduceFever"
  /**
   * Decreases the severity of the bleeding of any wounds or syndrome effects on the targeted body part.
   * The SEV value probably controls by how much the bleeding is decreased.
   */
  | "StopBleeding"
  /**
   * Closes any wounds on the targeted body part with speed depending on the SEV value.
   */
  | "CloseOpenWounds"
  /**
   * Probably decreases the severity of the infection from infected wounds over time.
   */
  | "CureInfection"
  /**
   * Heals the tissues of the targeted body part with speed depending on the SEV value.
   */
  | "HealTissues"
  /**
   * Heals the nerves of the targeted body part with speed depending on the SEV value.
   */
  | "HealNerves"
  /**
   * Causes missing body parts to regrow. SEV controls how quickly body parts are regrown.
   */
  | "RegrowParts"
  /**
   * Add a tag
   */
  | "AddTag"
  /**
   * Remove a tag
   */
  | "RemoveTag"
  /**
   * Display name of the effect
   */
  | "DisplayName"
  /**
   * Display tile of the effect
   */
  | "DisplayTile"
  /**
   * Whether the tile flashes
   */
  | "FlashTile"
  /**
   * Physical attribute change
   */
  | "PhysAttChange"
  /**
   * Mental attribute change
   */
  | "MentAttChange"
  /**
   * Speed change
   */
  | "SpeedChange"
  /**
   * Skill roll adjustment
   */
  | "SkillRollAdjust"
  /**
   * Body appearance modifier
   */
  | "BodyAppearanceModifier"
  /**
   * Body part appearance modifier
   */
  | "BodyPartAppearanceModifier"
  /**
   * Body transformation
   */
  | "BodyTransformation"
  /**
   * Material force multiplier
   */
  | "MaterialForceMultiplier"
  /**
   * Can do an interaction
   */
  | "CanDoInteraction"
  /**
   * Can do a special attack interaction
   */
  | "SpecialAttackInteraction"
  /**
   * Can do a body mat interaction
   */
  | "BodyMatInteraction"
  /**
   * Can sense creatures of a class
   */
  | "SenseCreatureClass"
  /**
   * Feel emotion
   */
  | "FeelEmotion"
  /**
   * Changes the personality of the creature
   */
  | "ChangePersonality"
  /**
   * Erratic behavior
   */
  | "ErraticBehavior"
  /**
   * Unknown
   */
  | "Unknown";

/**
 * A creature variation.
 */
export type CreatureVariation = {
  /**
   * Common Raw file Things
   */
  metadata?: Metadata | null;
  identifier: string;
  objectId: string;
  /**
   * Creature variations are basically just a set of simple tag actions which are applied to
   * the creature which is being modified. The tags are applied in order EXCEPT for the convert
   * tags which are applied in a reverse order.
   */
  rules: CreatureVariationRule[];
  /**
   * A creature variation can define any number of arguments which can be used in the rules.
   * These arguments replace instances of `!ARGn` in the rules. Use `apply_arguments` to apply
   * a set of arguments to a creature variation (and get a very specific variation back). Use
   * `apply_to_creature` to apply the variation to a creature (it also takes arguments and will
   * apply them to the variation before applying the variation to the creature).
   */
  argumentCount: string;
};

/**
 * A variation rule for a creature.
 */
export type CreatureVariationRule =
  /**
   * An unknown rule.
   */
  | "Unknown"
  /**
   * Removes a tag from a creature.
   */
  | {
      RemoveTag: {
        /**
         * The tag to remove.
         */
        tag: string;
        /**
         * The value to remove.
         */
        value: string | null;
      };
    }
  /**
   * Adds a new tag to a creature.
   */
  | {
      NewTag: {
        /**
         * The tag to add.
         */
        tag: string;
        /**
         * The value to add.
         */
        value: string | null;
      };
    }
  /**
   * Adds a new tag to a creature.
   */
  | {
      AddTag: {
        /**
         * The tag to add.
         */
        tag: string;
        /**
         * The value to add.
         */
        value: string | null;
      };
    }
  /**
   * Converts a tag on a creature.
   */
  | {
      ConvertTag: {
        /**
         * The tag to convert.
         */
        tag: string;
        /**
         * The target value to convert.
         */
        target: string | null;
        /**
         * The replacement value to convert to.
         */
        replacement: string | null;
      };
    }
  /**
   * Adds a new tag to a creature if a condition is met.
   */
  | {
      ConditionalNewTag: {
        /**
         * The tag to add.
         */
        tag: string;
        /**
         * The value to add.
         */
        value: string | null;
        /**
         * The index of the argument to check.
         */
        argument_index: string;
        /**
         * The requirement for the argument.
         */
        argument_requirement: string;
      };
    }
  /**
   * Adds a new tag to a creature if a condition is met.
   */
  | {
      ConditionalAddTag: {
        /**
         * The tag to add.
         */
        tag: string;
        /**
         * The value to add.
         */
        value: string | null;
        /**
         * The index of the argument to check.
         */
        argument_index: string;
        /**
         * The requirement for the argument.
         */
        argument_requirement: string;
      };
    }
  /**
   * Removes a tag from a creature if a condition is met.
   */
  | {
      ConditionalRemoveTag: {
        /**
         * The tag to remove.
         */
        tag: string;
        /**
         * The value to remove.
         */
        value: string | null;
        /**
         * The index of the argument to check.
         */
        argument_index: string;
        /**
         * The requirement for the argument.
         */
        argument_requirement: string;
      };
    }
  /**
   * Converts a tag on a creature if a condition is met.
   */
  | {
      ConditionalConvertTag: {
        /**
         * The tag to convert.
         */
        tag: string;
        /**
         * The target value to convert.
         */
        target: string | null;
        /**
         * The replacement value to convert to.
         */
        replacement: string | null;
        /**
         * The index of the argument to check.
         */
        argument_index: string;
        /**
         * The requirement for the argument.
         */
        argument_requirement: string;
      };
    };

/**
 * An enum representing a creature variation tag.
 */
export type CVTag =
  /**
   * A tag to add a new tag to the creature.
   */
  | "NewTag"
  /**
   * A tag to add a tag to the creature.
   */
  | "AddTag"
  /**
   * A tag to remove a tag from the creature.
   */
  | "RemoveTag"
  /**
   * A tag to convert a tag to a new tag.
   */
  | "ConvertTag"
  /**
   * A tag to convert a tag to a new tag with specific token
   */
  | "ConvertTagMaster"
  /**
   * A tag to convert a tag to a new tag with specific target
   */
  | "ConvertTagTarget"
  /**
   * A tag to convert a tag to a new tag with specific replacement
   */
  | "ConvertTagReplacement"
  /**
   * Conditionally add a new tag to the creature.
   */
  | "ConditionalNewTag"
  /**
   * Conditionally add a tag to the creature.
   */
  | "ConditionalAddTag"
  /**
   * Conditionally remove a tag from the creature.
   */
  | "ConditionalRemoveTag"
  /**
   * Conditionally convert a tag to a new tag.
   */
  | "ConditionalConvertTag"
  /**
   * An unknown tag.
   */
  | "Unknown";

/**
 * A struct representing an Entity object.
 */
export type Entity = {
  metadata?: Metadata | null;
  identifier: string;
  objectId: string;
  tags: EntityToken[];
  creature?: string | null;
  translation?: string | null;
  exclusiveStartBiome?: string | null;
  biomeSupport?: [string, number][] | null;
  settlementBiome?: string[] | null;
  startBiome?: string[] | null;
  likesSites?: string[] | null;
  toleratesSites?: string[] | null;
  worldConstructions?: string[] | null;
  maxPopNumber?: number | null;
  maxSitePopNumber?: number | null;
  maxStartingCivNumber?: number | null;
  permittedBuildings?: string[] | null;
  permittedJobs?: string[] | null;
  permittedReactions?: string[] | null;
  currency?: [string, number][] | null;
  artFacetModifier?: [string, number][] | null;
  artImageElementModifier?: [string, number][] | null;
  itemImprovementModifier?: [string, number][] | null;
  selectSymbols?: [string, string][] | null;
  subselectSymbols?: [string, string][] | null;
  cullSymbols?: [string, string][] | null;
  friendlyColor?: Color | null;
  religion?: string | null;
  religionSpheres?: string[] | null;
  sphereAlignments?: string[] | null;
  positions?: Position[] | null;
  landHolderTrigger?: string | null;
  siteVariablePositions?: string[] | null;
  variablePositions?: string[] | null;
  ethics?: [string, string][] | null;
  values?: [string, number][] | null;
  variableValues?: [string, number, number][] | null;
  activeSeason?: string | null;
  banditry?: number | null;
  progressTriggerPopulation?: number | null;
  progressTriggerProduction?: number | null;
  progressTriggerTrade?: number | null;
  progressTriggerPopulationSiege?: number | null;
  progressTriggerProductionSiege?: number | null;
  progressTriggerTradeSiege?: number | null;
  scholars?: string[] | null;
  ammo?: string[] | null;
  armors?: [string, number][] | null;
  diggers?: string[] | null;
  gloves?: [string, number][] | null;
  helms?: [string, number][] | null;
  instrument?: string[] | null;
  pants?: [string, number][] | null;
  shields?: string[] | null;
  shoes?: [string, number][] | null;
  siegeAmmo?: string[] | null;
  tool?: string[] | null;
  toys?: string[] | null;
  trapComponents?: string[] | null;
  weapons?: string[] | null;
  gemShape?: string[] | null;
  stoneShape?: string[] | null;
  sourceHfid?: number | null;
};

/**
 * Tokens that can be found in an entity raw file.
 */
export type EntityToken =
  /**
   * Allows adventure mode for entities with sites.
   */
  | "AllMainPopsControllable"
  /**
   * Allows fortress mode. If multiple entities have the `SITE_CONTROLLABLE` token, then at embark the specific civs can be chosen on
   * the civ list screen. At least one civilization must have this token.
   */
  | "SiteControllable"
  /**
   * Arguments: creature
   *
   * The type of creature that will inhabit the civilization. If multiple creature types are specified, each civilization will randomly
   * choose one of the creatures. In entities with multiple possible creatures, you can manipulate the chance of one creature being
   * chosen by adding multiple identical creature tags. For instance adding `[CREATURE:DWARF][CREATURE:DWARF][CREATURE:DWARF][CREATURE:ELF]`
   * to the same entity will make the civs created about 75% dwarven, 25% elven. It should be noted that civilizations are in general
   * weighted by this token.
   *
   * For example, if you have one entity with three `[CREATURE:DWARF]` entries and another separate entity with a single `[CREATURE:ELF]` entry,
   * then you can expect to see three times as many of the former placed as the latter.
   */
  | "Creature"
  /**
   * Arguments: number (integer)
   *
   * Found on generated angel entities. Appears to draw from creatures with this HFID, which associates the entity with a historical
   * figure of the same ID corresponding to a deity.
   */
  | "SourceHfid"
  /**
   * Arguments: biome, frequency
   *
   * Controls the expansion of the civilization's territory. The higher the number is relative to other `BIOME_SUPPORT` tokens in the entity,
   * the faster it can spread through the biome. These numbers are evaluated relative to each other, i.e. if one biome is 1 and the other is 2,
   * the spread will be the same as if one was 100 and the other was 200. Civs can spread out over biomes they cannot actually build in;
   *
   * For example, humans spread quickly over oceans but cannot actually build in them.
   *
   * e.g. `[BIOME_SUPPORT:ANY_GRASSLAND:4]`
   */
  | "BiomeSupport"
  /**
   * Arguments: biome
   *
   * If the civ's territory crosses over this biome, it can build settlements here.
   *
   * e.g. `[SETTLEMENT_BIOME:ANY_GRASSLAND]`
   */
  | "SettlementBiome"
  /**
   * Arguments: biome
   *
   * Combination of `EXCLUSIVE_START_BIOME` and `SETTLEMENT_BIOME`; allows the civ to start in and create settlements in the biome.
   *
   * e.g. `[START_BIOME:ANY_FOREST]`
   */
  | "StartBiome"
  /**
   * Arguments: biome
   *
   * The birth of the civilization can occur in this biome, but cannot (necessarily) build in it.
   * If the civ does not have `SETTLEMENT_BIOME` or `START_BIOME` for the biome in question, it will only construct a single settlement there.
   *
   * e.g. `[EXCLUSIVE_START_BIOME:MOUNTAIN]`
   */
  | "ExclusiveStartBiome"
  /**
   * Arguments: site type
   *
   * Valid site types are `DARK_FORTRESS` (π), `CAVE` (•), `CAVE_DETAILED` (Ω), `TREE_CITY` (î), and `CITY` (#).
   * Also recognizes `PLAYER_FORTRESS` (creates a civ of hillocks only), and `MONUMENT` (creates a civ without visible sites
   * (except tombs and castles), but may cause worldgen crashes). `FORTRESS` is no longer a valid entry, castles are
   * currently controlled by `BUILDS_OUTDOOR_FORTIFICATIONS`. Defaults to `CITY`. Selecting `CAVE` causes the classic kobold behavior
   * of not showing up on the "neighbors" section of the site selection screen. Selecting `DARK_FORTRESS` also allows generation
   * of certain other structures. It also gives the civ a special overlord.
   *
   * `CAVE_DETAILED` civilizations will create fortresses in mountainous regions and hillocks in non-mountainous regions.
   *
   * e.g. `[DEFAULT_SITE_TYPE:CAVE_DETAILED]`
   */
  | "DefaultSiteType"
  /**
   * Arguments: site type
   *
   * Most residents will try to move to this site type, unless already at one.
   *
   * e.g. `[LIKES_SITE:CAVE_DETAILED]`
   */
  | "LikesSite"
  /**
   * Arguments: site type
   *
   * Some residents will try to move to this site type, unless already at one.
   *
   * e.g. `[TOLERATES_SITE:CITY]`
   */
  | "ToleratesSite"
  /**
   * Arguments: construction
   *
   * Controls which constructions the civ will build on the world map. Valid constructions are ROAD, TUNNEL, BRIDGE, and WALL.
   *
   * e.g. `[WORLD_CONSTRUCTION:BRIDGE] [WORLD_CONSTRUCTION:ROAD] [WORLD_CONSTRUCTION:TUNNEL] [WORLD_CONSTRUCTION:WALL]`
   */
  | "WorldConstruction"
  /**
   * Arguments: number
   *
   * Max historical population per entity. Multiply this by max starting civ to get the total maximum historical population of the species.
   *
   * Defaults to 500.
   *
   * e.g. `[MAX_POP_NUMBER:500]`
   */
  | "MaxPopNumber"
  /**
   * Arguments: number
   *
   * Max historical population per individual site.
   *
   * Defaults to 50.
   *
   * e.g. `[MAX_SITE_POP_NUMBER:200]`
   */
  | "MaxSitePopNumber"
  /**
   * Arguments: number
   *
   * Max number of civ to spawn at world generation. Worldgen picks entities in some sequential order from the raws,
   * and once it reaches the end of the list, it will begin again at the top. Setting this number lower than 100,
   * like say, 7, will cause worldgen to skip over the civ for placement if there are already 7 civs of this type.
   *
   * Note that if all civs are set to lower numbers, and the number of starting civs is set higher than the
   * maximum possible amount of civs in total, it will gracefully stop placing civs and get down to the history
   * aspect of worldgen.
   *
   * Defaults to 3.
   *
   * e.g `[MAX_STARTING_CIV_NUMBER:3]`
   */
  | "MaxStartingCivNumber"
  /**
   * Arguments: building name
   *
   * The named, custom building can be built by a civilization in Fortress Mode.
   *
   * e.g. `[PERMITTED_BUILDING:SOAP_MAKER]`
   */
  | "PermittedBuilding"
  /**
   * Arguments: profession
   *
   * Allows this job type to be selected. This applies to worldgen creatures, in the embark screen, and in play.
   * Certain professions also influence the availability of materials for trade.
   *
   * e.g. `[PERMITTED_JOB:MINER]`
   */
  | "PermittedJob"
  /**
   * Arguments: reaction name
   *
   * Allows this reaction to be used by a civilization. It is used primarily in Fortress Mode,
   * but also allows certain resources, such as steel, to be available to a race. When creating custom reactions,
   * this token must be present or the player will not be able to use the reaction in Fortress Mode.
   *
   * e.g. `[PERMITTED_REACTION:TAN_A_HIDE]`
   */
  | "PermittedReaction"
  /**
   * Causes the civ's currency to be numbered with the year it was minted.
   */
  | "CurrencyByYear"
  /**
   * Arguments: inorganic material, value
   *
   * What kind of metals the civ uses for coin minting, as well as the value of the coin.
   * Due to the Dwarven economy having been disabled since version 0.31, the value doesn't actually do anything.
   *
   * e.g `[CURRENCY:SILVER:5]`
   */
  | "Currency"
  /**
   * Arguments: type, number
   *
   * `OWN_RACE`, `FANCIFUL`, `EVIL`, `GOOD`
   *
   * Number goes from `0` to `25_600` where `256` is the default.
   *
   * e.g. `[ART_FACET_MODIFIER:OWN_RACE:512]`
   */
  | "ArtFacetModifier"
  /**
   * Arguments: item, number
   *
   * Allowed item: CREATURE, PLANT, TREE, SHAPE, ITEM
   *
   * Allowed number: 0-25600
   *
   * Determines the chance of each image occurring in that entity's artwork, such as engravings and on artifacts,
   * for default (non-historical) artwork.
   *
   * e.g. `[ART_IMAGE_ELEMENT_MODIFIER:TREE:512]`
   */
  | "ArtImageElementModifier"
  /**
   * Arguments: item, number
   *
   * Allowed item: `ART_IMAGE`, `COVERED` or `GLAZED`, `RINGS_HANGING`, `BANDS`, `SPIKES`, `ITEMSPECIFIC`, `THREAD`, `CLOTH`, `SEWN_IMAGE`
   *
   * Allowed number: 0-25600
   *
   * Determines the chance of the entity using that particular artwork method, such as "encircled with bands" or "menaces with spikes".
   *
   * `[ITEM_IMPROVEMENT_MODIFIER:SPIKES:0]`
   *
   * This also seems to change the amount that the entity will pay for items that are improved in these ways in their tokens.
   */
  | "ItemImprovementModifier"
  /**
   * Arguments: language
   *
   * What language raw the entity uses.
   *
   * - If an entity lacks this tag, translations are drawn randomly from all translation files. Multiple translation tags will only
   * result in the last one being used. Migrants will sometimes arrive with no name.
   * - If `GEN_DIVINE` is entered, the entity will use a generated divine language, that is, the same language that is used for the names of angels.
   *
   * e.g. `[TRANSLATION:DWARF]`
   */
  | "Translation"
  /**
   * Arguments: noun, symbol
   *
   * Allowed Values:
   * `ALL`, `REMAINING`, `BATTLE`, `BRIDGE`, `CIV`, `CRAFT_GUILD`, `FESTIVAL`, `LIBRARY`, `MERCHANT_COMPANY`, `MILITARY_UNIT`,
   * `OTHER`, `RELIGION`, `ROAD`, `SIEGE`, `SITE`, `TEMPLE`, `TUNNEL`, `VESSEL`, `WALL`, `WAR`
   *
   * Causes the entity to more often use these symbols in the particular SYM set.
   *
   * REMAINING will select all symbols that have not already been declared above it.
   *
   * e.g. `[SELECT_SYMBOL:ALL:PEACE]`
   */
  | "SelectSymbol"
  /**
   * Arguments: noun, symbol
   *
   * Causes the symbol set to be preferred as adjectives by the civilization. Used in vanilla to put violent names in sieges and battles.
   *
   * e.g. `[SELECT_SYMBOL:SIEGE:NAME_SIEGE] [SUBSELECT_SYMBOL:SIEGE:VIOLENT]`
   */
  | "SubselectSymbol"
  /**
   * Arguments: noun, symbol
   *
   * Causes the entity to not use the words in these SYM sets.
   *
   * e.g. `[CULL_SYMBOL:ALL:UGLY]`
   */
  | "CullSymbol"
  /**
   * Arguments: color
   *
   * The color of this entity's civilization settlements in the world gen and embark screens, also used when announcing arrival of their caravan.
   *
   * Defaults to 7:0:1.
   *
   * e.g. `[FRIENDLY_COLOR:1:0:1]`
   */
  | "FriendlyColor"
  /**
   * Arguments: type
   *
   * - `REGIONAL_FORCE`: The creatures will worship a single force associated with the terrain of their initial biome.
   * - `PANTHEON`: The creatures will worship a group of gods, each aligned with their spheres and other appropriate ones as well.
   *
   * e.g. `[RELIGION:PANTHEON]`
   */
  | "Religion"
  /**
   * Arguments: sphere
   *
   * Can be any available sphere - multiple entries are possible. Choosing a religious sphere will automatically make
   * its opposing sphere not possible for the species to have: adding WATER, for example, means civilizations of this entity will
   * never get FIRE as a religious sphere. Note that the DEATH sphere favours the appearance of necromancers
   * (and therefore, towers) "in" the entity.
   *
   * e.g. `[RELIGION_SPHERE:FORTRESSES]`
   */
  | "ReligionSphere"
  /**
   * Arguments: sphere, number
   *
   * This token forces an entity to favor or disfavor particular religious spheres, causing them to acquire those spheres more
   * often when generating a pantheon.
   *
   * Default is 256, minimum is 0, maximum is 25600.
   *
   * e.g. `[SPHERE_ALIGNMENT:TREES:512]`
   */
  | "SphereAlignment"
  /**
   * Defines a leader/noble position for a civilization. These replace previous tags such as `[MAYOR]` and `[CAN_HAVE_SITE_LEADER]` and so on.
   *
   * To define a position further, see Position token.
   */
  | "Position"
  /**
   * Arguments: land  holder ID, population, wealth exported, wealth created
   *
   * Defines when a particular land-holding noble (baron, count, duke in vanilla) will arrive at a fortress.
   *
   * As of version 0.44.11, however, this is obsolete due to the changes in how sites are elevated in status.
   */
  | "LandHolderTrigger"
  /**
   * Arguments: position responsibility or 'ALL'
   *
   * Allows a site responsibility to be taken up by a dynamically generated position (lords, hearth-persons, etc.).
   * Any defined positions holding a given responsibility will take precedence over generated positions for that responsibility.
   * Also appears to cause site disputes.
   */
  | "SiteVariablePositions"
  /**
   * Arguments: position responsibility or 'ALL'
   *
   * Allows a responsibility to be taken up by a dynamically generated position (such as Law-maker).
   * Any defined positions holding a given responsibility will take precedence over generated positions for that responsibility.
   */
  | "VariablePositions"
  /**
   * Arguments: behavior, action
   *
   * Sets the civ's view of ethics (certain behaviors), from capital punishment to completely acceptable.
   * This also causes the civ to look upon opposing ethics with disfavor if their reaction to it is opposing,
   * and when at extremes (one ACCEPTABLE, another civ UNTHINKABLE; for example) they will often go to war over it.
   *
   * e.g. `[ETHIC:EAT_SAPIENT_KILL:ACCEPTABLE]`
   */
  | "Ethic"
  /**
   * Arguments: value, number
   *
   * Sets the civ's cultural values. Numbers range from -50 (complete anathema) to 0 (neutral) to 50 (highly valued).
   *
   * e.g. `[VALUE:CRAFTSMANSHIP:50]`
   *
   * Certain values must be set to 15 or more for civilizations to create structures and form entities during history gen:
   *
   * - 15+ KNOWLEDGE for libraries
   * - 15+ COOPERATION and 15+ CRAFTSMANSHIP for craft guilds
   *
   * Guilds also need guild-valid professions (see `PERMITTED_JOB`)
   */
  | "Value"
  /**
   * Arguments: value or `ALL`, min, max
   *
   * Makes values randomized rather than specified.
   *
   * This tag overrides the VALUE tag. Using `[VARIABLE_VALUE:ALL:x:y]` and then overwriting single values with further
   *
   * e.g. `[VARIABLE_VALUE:value:x:y]` tags works
   */
  | "VariableValue"
  /**
   * Makes the civ's traders accept offered goods.
   */
  | "WillAcceptTribute"
  /**
   * The civ will send out Wanderer adventurers in worldgen, which seems to increase Tracker skill.
   *
   * These types of adventurers will sometimes be seen leading a battle (instead of war leaders or generals) in remote locations during world-gen, in charge of the defenders.
   *
   * Mercenaries and monster hunters from the civ may visit player's fortress and petition for residency there to enlist in the military or hunt monsters in caverns, respectively.
   */
  | "Wanderer"
  /**
   * The civ will send out `BeastHunter` adventurers in worldgen, which seems to increase Tracker skill.
   *
   * These types of adventurers will sometimes be seen leading a battle (instead of war leaders or generals) in remote locations during world-gen, in charge of the defenders.
   *
   * Mercenaries and monster hunters from the civ may visit player's fortress and petition for residency there to enlist in the military or hunt monsters in caverns, respectively.
   */
  | "BeastHunter"
  /**
   * The civ will send out Scout adventurers in worldgen, which seems to increase Tracker skill.
   *
   * These types of adventurers will sometimes be seen leading a battle (instead of war leaders or generals) in remote locations during world-gen, in charge of the defenders.
   *
   * Mercenaries and monster hunters from the civ may visit player's fortress and petition for residency there to enlist in the military or hunt monsters in caverns, respectively.
   */
  | "Scout"
  /**
   * The civ will send out Mercenary adventurers in worldgen, which seems to increase Tracker skill.
   *
   * These types of adventurers will sometimes be seen leading a battle (instead of war leaders or generals) in remote locations during world-gen, in charge of the defenders.
   *
   * Mercenaries and monster hunters from the civ may visit player's fortress and petition for residency there to enlist in the military or hunt monsters in caverns, respectively.
   */
  | "Mercenary"
  /**
   * The civilization will mutilate bodies when they are the victors in history-gen warfare, such as hanging bodies from trees, putting them on spikes, and so forth.
   * Adventurers killed in Adventurer mode will sometimes be impaled on spikes wherever they died, with or without this token,
   * and regardless of whether they actually antagonized the townspeople.
   */
  | "AbuseBodies"
  /**
   * Arguments: season
   *
   * The season when the civ is most active: when they will trade, interact with you via diplomats, and/or invade you.
   * Civilizations can have multiple season entries. Note: If multiple caravans arrive at the same time, you are able to select
   * which civ to trade with at the depot menu. `ACTIVE_SEASON` tags may be changed for a currently active fort.
   *
   * e.g. `[ACTIVE_SEASON:SUMMER]`
   */
  | "ActiveSeason"
  /**
   * When invading, sneaks around and shoots at straggling members of your society. They will spawn on the edge of the map and will only be visible when
   * one of their party are spotted; this can be quite dangerous to undefended trade depots. If the civilization also has the SIEGER token,
   * they will eventually ramp it up to less subtle means of warfare.
   */
  | "Ambusher"
  /**
   * Will not attack wildlife, and will not be attacked by them, even if you have them in your party. This can be somewhat disconcerting when attacked
   * by bears in the forest, and your elven ally sits back and does nothing. Additionally, this token determines if the entity can settle in savage biomes.
   */
  | "AtPeaceWithWildlife"
  /**
   * Sends thieves to steal babies. Without this tag (or `AMBUSHER`, or `ITEM_THIEF`), enemy civilizations will only siege (if capable),
   * and will siege as early as they would otherwise babysnatch. This can happen as early as the first year of the fort!
   * In addition, babysnatcher civilizations will snatch children during worldgen, allowing them to become part of the civ if they do not escape.
   *
   * Note: If the playable civ in fortress mode has this tag (e.g. you add BABYSNATCHER to the dwarf entity) then the roles will be reversed ==>
   * elves and humans will siege and ambush and goblins will be friendly to you.
   * However, animals traded away to one's own caravan will count as snatched, reported upon the animal leaving the map,
   * and the animal will not count as having been exported.
   */
  | "BabySnatcher"
  /**
   * Makes the civilization build castles from mead halls. Only functions when the type of site built is a hamlet/town.
   * This, combined with the correct type of position associated with a site, is why adventurers can only lay claim to human sites.
   */
  | "BuildsOutdoorFortifications"
  /**
   * Makes the civilization build tombs.
   */
  | "BuildsOutdoorTombs"
  /**
   * Arguments: percentage
   *
   * Sets a percentage of the entity population to be used as bandits.
   */
  | "Banditry"
  /**
   * Visiting diplomats are accompanied by a pair of soldiers.
   */
  | "DiplomatBodyguards"
  /**
   * Found on generated divine "HF Guardian Entities". Cannot be used in user-defined raws.
   */
  | "Generated"
  /**
   * Causes invaders to ignore visiting caravans and other neutral creatures
   */
  | "InvadersIgnoreNeutrals"
  /**
   * Sends thieves to steal items. This will also occur in history generation, and thieves will have the "thief" profession.
   * Items stolen in history gen will be scattered around that creature's home.
   *
   * Also causes that civ to be hostile to any entity without this token. Without this tag (or AMBUSHER, or BABYSNATCHER), enemy civs will only siege
   * (if capable), and will siege as early as they would otherwise steal.
   *
   * Note: If the playable civ in Fortress Mode has this tag (e.g. you add `ITEM_THIEF` to the Dwarf entity) then the roles will be reversed ==>
   * elves and humans will siege and ambush and kobolds will be friendly to you. However, ALL items traded away to one's own caravan will count as stolen,
   * reported when the items leave the map, and the stolen items will not count as exported
   */
  | "ItemThief"
  /**
   * Causes the entity to send out patrols that can ambush adventurers. Said patrols will be hostile to any adventurers they encounter,
   * regardless of race or nationality.
   */
  | "LocalBanditry"
  /**
   * Caravan merchants are accompanied by soldiers.
   */
  | "MerchantBodyguards"
  /**
   * Merchants will engage in cross-civ trading and form companies.
   *
   * In previous versions, this resulted in the civ having a Guild Representative / Merchant Baron / Merchant Prince,
   * but now this is controlled solely by positions
   */
  | "MerchantNobility"
  /**
   * Arguments: level
   *
   * 0 to 5, civ will come to site once population at site has reached that level. If multiple progress triggers exist for a civ,
   * it will come when any one of them is fulfilled instead of waiting for all of them to be reached.
   *
   * - A value of 0 disables the trigger.
   * - 1 corresponds to 20 dwarves,
   * - 2 to 50 dwarves,
   * - 3 to 80,
   * - 4 to 110, and
   * - 5 to 140.
   *
   * Progress triggers may be changed, added, or deleted for a currently active fort.
   *
   * Note: hostile civs require that this be fulfilled as well as at least one other non-siege trigger before visiting for non-siege activities.
   */
  | "ProgressTriggerPopulation"
  /**
   * Arguments: level
   *
   * 0 to 5, civ will come to site once created wealth has reached that level. If multiple progress triggers exist for a civ,
   * it will come when any one of them is fulfilled instead of waiting for all of them to be reached.
   *
   * - A value of 0 disables the trigger.
   * - 1 corresponds to 5000☼ created wealth,
   * - 2 to 25000☼,
   * - 3 to 100000☼,
   * - 4 to 200000☼, and
   * - 5 to 300000☼.
   *
   * Progress triggers may be changed, added, or deleted for a currently active fort.
   */
  | "ProgressTriggerProduction"
  /**
   * Arguments: level
   *
   * 0 to 5, civ will come to site once exported goods has reached that level. If multiple progress triggers exist for a civ,
   * it will come when any one of them is fulfilled instead of waiting for all of them to be reached.
   *
   * - A value of 0 disables the trigger.
   * - 1 corresponds to 500☼ exported wealth,
   * - 2 to 2500☼,
   * - 3 to 10000☼,
   * - 4 to 20000☼, and
   * - 5 to 30000☼.
   *
   * Progress triggers may be changed, added, or deleted for a currently active fort.
   */
  | "ProgressTriggerTrade"
  /**
   * Arguments: level
   *
   * 0 to 5, civ will begin to send sieges against the player civ when this level is reached if it is hostile.
   *
   * If multiple progress triggers exist for a civ, it will come when any one of them is fulfilled instead of
   * waiting for all of them to be reached. A value of 0 disables the trigger
   */
  | "ProgressTriggerPopulationSiege"
  /**
   * Arguments: level
   *
   * 0 to 5, civ will begin to send sieges against the player civ when this level is reached if it is hostile.
   *
   * If multiple progress triggers exist for a civ, it will come when any one of them is fulfilled instead of
   * waiting for all of them to be reached. A value of 0 disables the trigger
   */
  | "ProgressTriggerProductionSiege"
  /**
   * Arguments: level
   *
   * 0 to 5, civ will begin to send sieges against the player civ when this level is reached if it is hostile.
   *
   * If multiple progress triggers exist for a civ, it will come when any one of them is fulfilled instead of
   * waiting for all of them to be reached. A value of 0 disables the trigger
   */
  | "ProgressTriggerTradeSiege"
  /**
   * Will start campfires and wait around at the edge of your map for a month or two before rushing in to attack.
   * This will occur when the progress triggers for sieging are reached. If the civ lacks smaller methods of conflict
   * (`AMBUSHER`, `BABYSNATCHER`, `ITEM_THIEF`), they will instead send smaller-scale sieges when their triggers for
   * "first contact" are reached.
   */
  | "Sieger"
  /**
   * Guards certain special sites, such as a vault belonging to a demon allied with a deity. Used in generated divine entities.
   */
  | "SiteGuardian"
  /**
   * This makes the severity of attacks depend on the extent of item/baby thievery rather than the passage of time.
   * Designed to go with `ITEM_THIEF`, may or may not work with BABYSNATCHER. Prevents the civ from engaging in diplomacy
   * or ending up at war.
   */
  | "Skulking"
  /**
   * Visiting diplomats impose tree cutting quotas; without this, they will simply compliment your fortress and leave.
   * Also causes the diplomat to make unannounced first contact at the very beginning of the first spring after your
   * fortress becomes a land holder.
   */
  | "TreeCapDiplomacy"
  /**
   * Defines if a civilization is a hidden subterranean entity, such as bat man civilizations.
   * May spawn in any of the three caverns; cavern dweller raids due to agitation will pull from these.
   * If you embark as this civ, you have access to pets and trees from all three layers, not only the first.
   */
  | "LayerLinked"
  /**
   * Makes civilizations generate keyboard instruments
   */
  | "GenerateKeyboardInstruments"
  /**
   * Makes civilizations generate percussion instruments
   */
  | "GeneratePercussionInstruments"
  /**
   * Makes civilizations generate stringed instruments
   */
  | "GenerateStringedInstruments"
  /**
   * Makes civilizations generate wind instruments
   */
  | "GenerateWindInstruments"
  /**
   * Makes civilizations generate dance forms.
   */
  | "GenerateDanceForms"
  /**
   * Makes civilizations generate musical forms.
   */
  | "GenerateMusicalForms"
  /**
   * Makes civilizations generate poetic forms.
   */
  | "GeneratePoeticForms"
  /**
   * Arguments: scholar type
   *
   * `ALL`, `ASTRONOMER`, `CHEMIST`, `DOCTOR`, `ENGINEER`, `GEOGRAPHER`, `HISTORIAN`, `MATHEMATICIAN`, `NATURALIST`, `PHILOSOPHER`
   */
  | "Scholar"
  /**
   * Generates scholars based on the values generated with the `VARIABLE_VALUE` tag.
   */
  | "SetScholarsOnValuesAndJobs"
  /**
   * Used for kobolds.
   */
  | "NoArtifactClaims"
  /**
   * The civilization can breach the Underworld during world generation.
   */
  | "MiningUnderworldDisasters"
  /**
   * Arguments: `item_token`
   *
   * Used before a ranged weapon type.
   *
   * e.g. `[AMMO:ITEM_AMMO_BOLTS]`
   */
  | "Ammo"
  /**
   * Arguments: `item_token`, rarity
   *
   * Rarity is optional, and valid values are FORCED, COMMON, UNCOMMON, and RARE (anything else is treated as COMMON).
   * FORCED items will be available 100% of the time, COMMON items 50%, UNCOMMON items 10%, and RARE items 1%.
   * If certain armor types are lacking after performing one pass of randomized checks, the game will repeat random checks
   * until an option is successfully chosen.
   *
   * e.g. `[ARMOR:ITEM_ARMOR_PLATEMAIL:COMMON]`
   */
  | "Armor"
  /**
   * Arguments: `item_token`
   *
   * Causes the selected weapon to fall under the "digging tools" section of the embark screen.
   * Also forces the weapon to be made out of metal, which can cause issues if a modded entity has access to picks without
   * access to metal - for those cases, listing the pick under the `[WEAPON]` token works just as well. Note that this tag is
   * neither necessary nor sufficient to allow use of that item as a mining tool -–
   * for that, the item itself needs to be a weapon with `[SKILL:MINING]`.
   *
   * e.g. `[DIGGER:ITEM_WEAPON_PICK]`
   */
  | "Digger"
  /**
   * Arguments: `item_token`, `rarity`
   *
   * Rarity is optional, and valid values are FORCED, COMMON, UNCOMMON, and RARE (anything else is treated as COMMON).
   * Uses the same rarity values and methods as outlined in ARMOR.
   *
   * e.g. `[GLOVES:ITEM_GLOVES_GAUNTLETS:COMMON]`
   */
  | "Gloves"
  /**
   * Arguments: `item_token`, `rarity`
   *
   * Rarity is optional, and valid values are FORCED, COMMON, UNCOMMON, and RARE (anything else is treated as COMMON).
   * Uses the same rarity values and methods as outlined in ARMOR.
   *
   * e.g. `[HELM:ITEM_HELM_HELM:COMMON]`
   */
  | "Helm"
  /**
   * Arguments: `item_token`
   *
   * No longer used as of Version 0.42.01 due to the ability to generate instruments in world generation.
   *
   * It is still usable if pre-defined instruments are modded in, and generated musical forms are capable
   * of selecting pre-defined instruments to use. However, reactions for making instruments, instrument parts,
   * and/or assembling such instruments need to be added as well, as this token no longer adds such instruments
   * to the craftsdwarf workshop menu.
   *
   * e.g. `[INSTRUMENT:ITEM_INSTRUMENT_FLUTE]`
   */
  | "Instrument"
  /**
   * Arguments: `item_token`, `rarity`
   *
   * Rarity is optional, and valid values are FORCED, COMMON, UNCOMMON, and RARE (anything else is treated as COMMON).
   * Uses the same rarity values and methods as outlined in ARMOR.
   *
   * e.g. `[PANTS:ITEM_PANTS_LEGGINGS:COMMON]`
   */
  | "Pants"
  /**
   * Arguments: `item_token`
   *
   * e.g. `[SHIELD:ITEM_SHIELD_BUCKLER]`
   */
  | "Shield"
  /**
   * Arguments: `item_token`, `rarity`
   *
   * Rarity is optional, and valid values are FORCED, COMMON, UNCOMMON, and RARE (anything else is treated as COMMON).
   * Uses the same rarity values and methods as outlined in ARMOR.
   *
   * e.g. `[SHOES:ITEM_SHOES_BOOTS:COMMON]`
   */
  | "Shoes"
  /**
   * Arguments: `item_token`
   *
   * e.g. `[SIEGEAMMO:ITEM_SIEGEAMMO_BALLISTA]`
   */
  | "SiegeAmmo"
  /**
   * Arguments: `item_token`
   *
   * e.g. `[TOOL:ITEM_TOOL_NEST_BOX]`
   */
  | "Tool"
  /**
   * Arguments: `item_token`
   *
   * e.g. `[TOY:ITEM_TOY_PUZZLEBOX]`
   */
  | "Toy"
  /**
   * Arguments: `item_token`
   *
   * e.g. `[TRAPCOMP:ITEM_TRAPCOMP_GIANTAXEBLADE]`
   */
  | "TrapComponent"
  /**
   * Arguments: `item_token`
   *
   * While this does not accept a rarity value, something similar can be achieved by having multiple variations of a weapon type
   * with small differences and specifying each of them.
   *
   * e.g. `[WEAPON:ITEM_WEAPON_AXE_BATTLE]`
   */
  | "Weapon"
  /**
   * Allows use of products made from animals. All relevant creatures will be able to provide wool, silk, and extracts (including milk and venom)
   * for trade, and non-sentient creatures (unless ethics state otherwise) will be able to provide eggs, caught fish, meat, leather, bone,
   * shell, pearl, horn, and ivory.
   */
  | "UseAnimalProducts"
  /**
   * Any creature in the civilization's list of usable's (from the surrounding 7x7 or so of squares and map features in those squares)
   * which has `PET` or `PET_EXOTIC` will be available as a pet, pack animal (with `PACK_ANIMAL`),
   * wagon puller (with `WAGON_PULLER`),
   * mount (with `MOUNT` or `MOUNT_EXOTIC`), or
   * siege minion (with `TRAINABLE_WAR ` and without `CAN_LEARN`).
   *
   * This notion of the initial usable creature list, which then gets pared down or otherwise considered, applies below as well.
   *
   * All common domestic and equipment creatures are also added to the initial list.
   */
  | "UseAnyPetRace"
  /**
   * Without this, creatures with exclusively subterranean biomes are skipped.
   *
   * If they have it, cave creatures with PET will also be available as pets, pack animals (with `PACK_ANIMAL`), wagon pullers (with `WAGON_PULLER`),
   * mounts (with `MOUNT` or `MOUNT_EXOTIC`), and siege minions (with `TRAINABLE_WAR` and without `CAN_LEARN`).
   */
  | "UseCaveAnimals"
  /**
   * Without this, `EVIL` creatures are skipped.
   *
   * Otherwise, evil creatures with `SLOW_LEARNER` or without `CAN_LEARN` will be also available as pets (with `PET`),
   * pack animals (with `PACK_ANIMAL`), wagon pullers (with `WAGON_PULLER`), mounts (with `MOUNT` or `MOUNT_EXOTIC`),
   * and siege minions (with `TRAINABLE_WAR` or `SLOW_LEARNER`), even the normally untameable species.
   */
  | "UseEvilAnimals"
  /**
   * Same as `USE_EVIL_ANIMALS` for all uses of plants.
   */
  | "UseEvilPlants"
  /**
   * Same as `USE_EVIL_ANIMALS` for all uses of wood.
   */
  | "UseEvilWood"
  /**
   * Without this `GOOD` creatures are skipped, otherwise, good creatures without `CAN_LEARN` will also be available as pets (with `PET`),
   * pack animals (with `PACK_ANIMAL`), wagon pullers (with `WAGON_PULLER`), mounts (with `MOUNT` or `MOUNT_EXOTIC`), and siege minions
   * (with `TRAINABLE_WAR`), even the normally untameable species.
   */
  | "UseGoodAnimals"
  /**
   * Same as `USE_GOOD_ANIMALS` for all uses of plants.
   */
  | "UseGoodPlants"
  /**
   * Same as `USE_GOOD_ANIMALS` for all uses of wood.
   */
  | "UseGoodWood"
  /**
   * If the relevant professions are permitted, controls availability of lye (`LYE_MAKING`), charcoal (`BURN_WOOD`), and potash (`POTASH_MAKING`).
   */
  | "UseMiscProcessedWoodProducts"
  /**
   * Makes the civilization use all locally available non-exotic pets.
   */
  | "UseNoneExoticPetRace"
  /**
   * Gives the civilization access to creatures with `COMMON_DOMESTIC` and `MOUNT`. Additionally, all available
   * (based on `USE_ANY_PET_RACE`, `USE_CAVE_ANIMALS`, `USE_GOOD_ANIMALS`, and `USE_EVIL_ANIMALS`) creature with `MOUNT` and `PET`
   * will be allowed for use as mounts during combat.
   */
  | "CommonDomesticMount"
  /**
   * Gives the civilization access to creatures with `COMMON_DOMESTIC` and `PACK_ANIMAL`.
   * Additionally, all available (see above) creatures with `PACK_ANIMAL` and `PET` will be allowed for use during trade as pack animals.
   */
  | "CommonDomesticPackAnimal"
  /**
   * Gives the civilization access to creatures with `COMMON_DOMESTIC` and `PET`.
   * Additionally, all available (see above) creatures with PET will be allowed for use as pets.
   */
  | "CommonDomesticPet"
  /**
   * Gives the civilization access to creatures with `COMMON_DOMESTIC` and `WAGON_PULLER`. Additionally, all
   * available (see above) creatures with `WAGON_PULLER` and PET will be allowed for use during trade to pull wagons.
   */
  | "CommonDomesticPullAnimal"
  /**
   * Allow use of river products in the goods available for trade.
   */
  | "RiverProducts"
  /**
   * Allow use of ocean products (including amber and coral) in the goods available for trade.
   * Without `OCEAN_PRODUCTS`, civilizations will not be able to trade ocean fish even if they are also
   * available from other sources (e.g. sturgeons and stingrays).
   */
  | "OceanProducts"
  /**
   * Allow use of underground plant products in the goods available for trade.
   * Lack of suitable vegetation in the caverns will cause worldgen rejections.
   */
  | "IndoorFarming"
  /**
   * Allow use of outdoor plant products in the goods available for trade.
   * Lack of suitable vegetation in this civilization's starting area will cause worldgen rejections.
   */
  | "OutdoorFarming"
  /**
   * Allow use of underground plant growths (quarry bush leaves, in unmodded games) in the goods available for trade.
   */
  | "IndoorGardens"
  /**
   * Allow use of outdoor plant growths in the goods available for trade.
   */
  | "OutdoorGardens"
  /**
   * Allows use of indoor tree growths in the goods available for trade.
   * Not used in vanilla entities, as vanilla underground trees do not grow fruit.
   *
   * Needs `INDOOR_WOOD` to function.
   *
   * Will cause rejections, if growths are unavailable.
   */
  | "IndoorOrchards"
  /**
   * Allows use of outdoor tree growths in the goods available for trade.
   *
   * Needs `OUTDOOR_WOOD` to function.
   */
  | "OutdoorOrchards"
  /**
   * Civilization members will attempt to wear clothing.
   */
  | "Clothing"
  /**
   * Will wear things made of spider silk and other subterranean materials.
   */
  | "SubterraneanClothing"
  /**
   * Adds decorations to equipment based on the level of the generated unit. Also improves item quality.
   */
  | "EquipmentImprovements"
  /**
   * Adds decorations to weapons generated for bowman and master bowman.
   */
  | "ImprovedBows"
  /**
   * Allows metal materials to be used to make cages (inexpensive metals only) and crafts.
   */
  | "MetalPref"
  /**
   * Allows the civilization to make use of nearby stone types. If the `FURNACE_OPERATOR` job is permitted,
   * also allows ore-bearing stones to be smelted into metals.
   */
  | "StonePref"
  /**
   * The civilization can make traditionally metallic weapons such as swords and spears from wood.
   */
  | "WoodWeapons"
  /**
   * The civilization can make traditionally metallic armor such as mail shirts and helmets from wood.
   */
  | "WoodArmor"
  /**
   * Enables creatures of this entity to bring gems in trade.
   */
  | "GemPref"
  /**
   * Allow use of subterranean wood types, such as tower-cap and fungiwood logs.
   */
  | "IndoorWood"
  /**
   * Allow use of outdoor wood types, such as mangrove and oak.
   */
  | "OutdoorWood"
  /**
   * Arguments: shape
   *
   * Precious gems cut by this civilization's jewelers can be of this shape.
   */
  | "GemShape"
  /**
   * Arguments: shape
   *
   * Ordinary non-gem stones cut by this civilization's jewelers can be of this shape.
   */
  | "StoneShape"
  /**
   * Allows use of materials with `[DIVINE]` for clothing. Used for generated divine entities.
   */
  | "DivineMatClothing"
  /**
   * Allows use of materials with `[DIVINE]` for crafts. Used for generated divine entities.
   */
  | "DivineMatCrafts"
  /**
   * Allows use of metals with `[DIVINE]` for weapons. Used for generated divine entities.
   */
  | "DivineMatWeapons"
  /**
   * Allows use of metals with `[DIVINE]` for armor. Used for generated divine entities.
   */
  | "DivineMatArmor"
  /**
   * Start an animal definition.
   */
  | "Animal"
  /**
   * Arguments: creature token
   *
   * Select specific creature.
   */
  | "AnimalToken"
  /**
   * Arguments: creature caste token
   *
   * Select specific creature caste (requires `ANIMAL_TOKEN`). Sites with animal populations will still include all castes,
   * but only the selected ones will be used for specific roles.
   */
  | "AnimalCasteToken"
  /**
   * Arguments: creature class
   *
   * Select creature castes with this creature class (multiple uses allowed).
   */
  | "AnimalClass"
  /**
   * Arguments: creature class
   *
   * Forbid creature castes with this creature class (multiple uses allowed).
   */
  | "AnimalForbiddenClass"
  /**
   * Animal will be present even if it does not naturally occur in the entity's terrain.
   * All creatures, including demons, night trolls and other generated ones will be used if no specific creature or class is selected.
   */
  | "AnimalAlwaysPresent"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalNeverMount"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalAlwaysMount"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalNeverWagonPuller"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalAlwaysWagonPuller"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalNeverSiege"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalAlwaysSiege"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalNeverPet"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalAlwaysPet"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalNeverPackAnimal"
  /**
   * Override creature usage tokens, ALWAYS overrides NEVER if a caste is matched by more than one animal definition
   */
  | "AnimalAlwaysPackAnimal"
  /**
   * Arguments: tissue style unit ID
   *
   * Select a tissue layer which has the ID attached using `TISSUE_STYLE_UNIT` token in unit raws.
   * This allows setting further cultural style parameters for the selected tissue layer.
   */
  | "TissueStyle"
  /**
   * Arguments: min : max
   *
   * Presumably sets culturally preferred tissue length for selected tissue. Needs testing.
   * Dwarves have their beards set to 100:NONE by default.
   */
  | "TissueStyleMaintainLength"
  /**
   * Arguments: styling token
   *
   * Valid tokens are `NEATLY_COMBED`, `BRAIDED`, `DOUBLE_BRAIDS`, `PONY_TAILS`, `CLEAN_SHAVEN` and `STANDARD_HAIR/BEARD/MOUSTACHE/SIDEBURNS_SHAPINGS`.
   * Presumably sets culturally preferred tissue shapings for selected tissue. Needs testing.
   */
  | "TissueStylePreferredShaping"
  /**
   * An unknown token
   */
  | "Unknown"
  /**
   * Prefers wood
   */
  | "WoodPref"
  /**
   * An undead candidate
   */
  | "UndeadCandidate"
  /**
   * Cut an existing entity
   */
  | "CutEntity"
  /**
   * Select an entity to modify
   */
  | "SelectEntity";

/**
 * A struct representing a Graphic object.
 */
export type Graphic = {
  metadata?: Metadata | null;
  identifier: string;
  objectId: string;
  casteIdentifier?: string | null;
  kind: GraphicType;
  sprites?: SpriteGraphic[] | null;
  layers?: [string, SpriteLayer[]][] | null;
  growths?: [string, SpriteGraphic[]][] | null;
  customExtensions?: CustomGraphicExtension[] | null;
  tags?: string[] | null;
};

/**
 * A struct representing a sprite graphic.
 */
export type SpriteGraphic = {
  primaryCondition: Condition;
  tilePageId: string;
  offset: Dimensions;
  color?: ColorModification | null;
  largeImage?: boolean | null;
  offset2?: Dimensions | null;
  secondaryCondition?: Condition | null;
  colorPalletSwap?: number | null;
  targetIdentifier?: string | null;
  extraDescriptor?: string | null;
};

/**
 * A struct representing a `SpriteLayer` object.
 */
export type SpriteLayer = {
  layerName: string;
  tilePageId: string;
  offset: Dimensions;
  offset2?: Dimensions | null;
  largeImage?: boolean | null;
  conditions?: [Condition, string][] | null;
};

/**
 * A struct representing a `TilePage` object.
 */
export type TilePage = {
  metadata?: Metadata | null;
  identifier: string;
  objectId: string;
  file: string;
  tileDim: Dimensions;
  pageDim: Dimensions;
};

/**
 * The color modification of the tile
 */
export type ColorModification =
  /**
   * The color is as is
   */
  "asIs";

/**
 * A condition that can be applied to a tile/entity
 */
export type Condition =
  /**
   * No condition
   */
  | "none"
  /**
   * The start of a condition
   */
  | "condition"
  /**
   * Default condition
   */
  | "default"
  /**
   * A condition of "being animated"
   */
  | "animated"
  /**
   * Condition of being a corpse
   */
  | "corpse"
  /**
   * Condition of being a child
   */
  | "child"
  /**
   * Condition of being a baby
   */
  | "baby"
  /**
   * Condition of being trained for hunting
   */
  | "trainedHunter"
  /**
   * Condition of being trained for war
   */
  | "trainedWar"
  /**
   * Condition of being a list icont
   */
  | "listIcon"
  /**
   * Condition of being a skeleton
   */
  | "skeleton"
  /**
   * Condition of being a skeleton with a skull
   */
  | "skeletonWithSkull"
  /**
   * Condition of being a zombie
   */
  | "zombie"
  /**
   * Condition of being a necromancer
   */
  | "necromancer"
  /**
   * Condition of being male
   */
  | "male"
  /**
   * Condition of being female
   */
  | "female"
  /**
   * Condition of being a vampire
   */
  | "vampireCursed"
  /**
   * Condition of being a ghoul
   */
  | "ghoul"
  /**
   * Condition of being a disturbed dead
   */
  | "disturbedDead"
  /**
   * Condition of being remains
   */
  | "remains"
  /**
   * Condition of being a vermin
   */
  | "vermin"
  /**
   * Condition of being a light vermin
   */
  | "lightVermin"
  /**
   * Condition of being a hive
   */
  | "hive"
  /**
   * Condition of being a small swarm
   */
  | "swarmSmall"
  /**
   * Condition of being a medium swarm
   */
  | "swarmMedium"
  /**
   * Condition of being a large swarm
   */
  | "swarmLarge"
  /**
   * Condition of being not an artifact
   */
  | "notArtifact"
  /**
   * Condition of being a crafted artifact
   */
  | "craftedArtifact"
  /**
   * Condition of being dyed
   */
  | "dye"
  /**
   * Condition of not being dyed
   */
  | "notDyed"
  /**
   * Condition of being a crop
   */
  | "crop"
  /**
   * Condition of being a seed
   */
  | "seed"
  /**
   * Condition of being a plant (picked)
   */
  | "picked"
  /**
   * Condition of being a shrub
   */
  | "shrub"
  /**
   * Condition of being a sapling
   */
  | "sapling"
  /**
   * Condition of being a crop sprout
   */
  | "cropSprout"
  /**
   * Condition of being a large crop
   */
  | "cropL"
  /**
   * Condition of being a medium crop
   */
  | "cropM"
  /**
   * Condition of being a small crop
   */
  | "cropR"
  /**
   * Condition of being a dead shrub
   */
  | "shrubDead"
  /**
   * Condition of not being a child
   */
  | "notChild"
  /**
   * Condition of being at least so many hauled
   */
  | "haulCountMin"
  /**
   * Condition of being at most so many hauled
   */
  | "haulCountMax"
  /**
   * Condition of being a worn item
   */
  | "itemWorn"
  /**
   * Condition of having a profession
   */
  | "professionCategory"
  /**
   * Condition of being a class
   */
  | "class"
  /**
   * Condition of being a syndrome class
   */
  | "syndromeClass"
  /**
   * Condition of being a caste
   */
  | "caste"
  /**
   * Condition of being a tissue layer
   */
  | "tissueLayer"
  /**
   * Condition of being a material flag
   */
  | "materialFlag"
  /**
   * Condition of being a material type
   */
  | "materialType"
  /**
   * Condition of being off if an item is present
   */
  | "shutOffIfItemPresent"
  /**
   * Condition of being a random part index
   */
  | "randomPartIndex"
  /**
   * Condition of being a ghost
   */
  | "ghost"
  /**
   * Condition of being a tissue that may have color
   */
  | "tissueMayHaveColor"
  /**
   * Condition of being a tissue that is at least so long
   */
  | "tissueMinLength"
  /**
   * Condition of being a tissue that is at most so long
   */
  | "tissueMaxLength"
  /**
   * Condition of being a tissue at least so curly
   */
  | "tissueMinCurly"
  /**
   * Condition of being a tissue at most so curly
   */
  | "tissueMaxCurly"
  /**
   * Condition of being a tissue that may have a shape
   */
  | "tissueMayHaveShaping"
  /**
   * Condition of being a tissue that is not shaped
   */
  | "tissueNotShaped"
  /**
   * Condition of being a swapped tissue
   */
  | "tissueSwap"
  /**
   * Condition of being a specific layer (start layer definition)
   */
  | "layer"
  /**
   * Condition of being a specific layer set of layers
   */
  | "layerSet"
  /**
   * Condition of being a specific layer group
   */
  | "layerGroup"
  /**
   * Condition of being a specific layer group set of layers
   */
  | "endLayerGroup"
  /**
   * Condition of being the upper body
   */
  | "bodyUpper"
  /**
   * Condition of being a copy of a template
   */
  | "copyOfTemplate"
  /**
   * Hammerman profession
   */
  | "hammerman"
  /**
   * Master Hammerman profession
   */
  | "masterHammerman"
  /**
   * Spearman profession
   */
  | "spearman"
  /**
   * Master Spearman profession
   */
  | "masterSpearman"
  /**
   * Wrestler profession
   */
  | "wrestler"
  /**
   * Master Wrestler profession
   */
  | "masterWrestler"
  /**
   * Axeman profession
   */
  | "axeman"
  /**
   * Master Axeman profession
   */
  | "masterAxeman"
  /**
   * Swordsman profession
   */
  | "swordsman"
  /**
   * Master Swordsman profession
   */
  | "masterSwordsman"
  /**
   * Maceman profession
   */
  | "maceman"
  /**
   * Master Maceman profession
   */
  | "masterMaceman"
  /**
   * Pikeman profession
   */
  | "pikeman"
  /**
   * Master Pikeman profession
   */
  | "masterPikeman"
  /**
   * Recruit profession
   */
  | "recruit"
  /**
   * Thief profession
   */
  | "thief"
  /**
   * Master Thief profession
   */
  | "masterThief"
  /**
   * Lasher profession
   */
  | "lasher"
  /**
   * Master Lasher profession
   */
  | "masterLasher"
  /**
   * Monster slayer profession
   */
  | "monsterSlayer"
  /**
   * Crossbowman profession
   */
  | "crossbowman"
  /**
   * Master Crossbowman profession
   */
  | "masterCrossbowman"
  /**
   * Bowman profession
   */
  | "bowman"
  /**
   * Master Bowman profession
   */
  | "masterBowman"
  /**
   * Blowgunman profession
   */
  | "blowgunman"
  /**
   * Master Blowgunman profession
   */
  | "masterBlowgunman"
  /**
   * Beat hunter profession
   */
  | "beastHunter"
  /**
   * Scout profession
   */
  | "scout"
  /**
   * Ranger profession
   */
  | "ranger"
  /**
   * Hunter profession
   */
  | "hunter"
  /**
   * Sage profession
   */
  | "sage"
  /**
   * Scholar profession
   */
  | "scholar"
  /**
   * Philosopher profession
   */
  | "philosopher"
  /**
   * Mathematician profession
   */
  | "mathematician"
  /**
   * Historian profession
   */
  | "historian"
  /**
   * Astronomer profession
   */
  | "astronomer"
  /**
   * Naturalist profession
   */
  | "naturalist"
  /**
   * Chemist profession
   */
  | "chemist"
  /**
   * Geographer profession
   */
  | "geographer"
  /**
   * Scribe profession
   */
  | "scribe"
  /**
   * Bookbinder profession
   */
  | "bookbinder"
  /**
   * Performer profession
   */
  | "performer"
  /**
   * Poet profession
   */
  | "poet"
  /**
   * Bard profession
   */
  | "bard"
  /**
   * Dancer profession
   */
  | "dancer";

/**
 * The graphic type of the tile
 */
export type GraphicType =
  /**
   * The tile is a creature
   */
  | "creature"
  /**
   * The tile is a creature caste
   */
  | "creatureCaste"
  /**
   * The tile is a statue of a creature
   */
  | "statueCreature"
  /**
   * The tile is a statue of a creature caste
   */
  | "statueCreatureCaste"
  /**
   * The tile is a statue of a creature caste with a giant size
   */
  | "statuesSurfaceGiant"
  /**
   * A tile
   */
  | "tile"
  /**
   * An empty tile
   */
  | "empty"
  /**
   * A plant
   */
  | "plant"
  /**
   * An unknown type
   */
  | "unknown"
  /**
   * A template
   */
  | "template"
  /**
   * The tile is soil background
   */
  | "soilBackground"
  /**
   * The tile is grass-1
   */
  | "grass1"
  /**
   * The tile is grass-2
   */
  | "grass2"
  /**
   * The tile is grass-3
   */
  | "grass3"
  /**
   * The tile is grass-4
   */
  | "grass4"
  /**
   * The tile is custom edging
   */
  | "customEdging"
  /**
   * The tile is custom ramp
   */
  | "customRamp"
  /**
   * The tile is custom corner (W)
   */
  | "customEdgeW"
  /**
   * The tile is custom corner (E)
   */
  | "customEdgeE"
  /**
   * The tile is custom corner (N)
   */
  | "customEdgeN"
  /**
   * The tile is custom corner (S)
   */
  | "customEdgeS"
  /**
   * The tile is custom corner (NW)
   */
  | "customEdgeNW"
  /**
   * The tile is custom corner (NE)
   */
  | "customEdgeNE"
  /**
   * The tile is custom corner (SW)
   */
  | "customEdgeSW"
  /**
   * The tile is custom corner (SE)
   */
  | "customEdgeSE"
  /**
   * The tile is a custom workshop
   */
  | "customWorkshop"
  /**
   * The tile is a list icon
   */
  | "listIcon"
  /**
   * The tile is an add tool
   */
  | "addTool"
  /**
   * The tile is ammo
   */
  | "ammo"
  /**
   * The tile is ammo straight default
   */
  | "ammoStraightDefault"
  /**
   * The tile is ammo straight wood
   */
  | "ammoStraightWood"
  /**
   * The tile is ammo diagonal default
   */
  | "ammoDiagonalDefault"
  /**
   * The tile is ammo diagonal wood
   */
  | "ammoDiagonalWood"
  /**
   * The tile is an armor
   */
  | "armor"
  /**
   * The tile is food
   */
  | "food"
  /**
   * The graphic is of gloves
   */
  | "gloves"
  /**
   * The graphic is of a helm
   */
  | "helm"
  /**
   * The graphic is of pants
   */
  | "pants"
  /**
   * The graphic is of a rough gem
   */
  | "roughGem"
  /**
   * The graphic is of a large gem
   */
  | "shapeLargeGem"
  /**
   * The graphic is of a small gem
   */
  | "shapeSmallGem"
  /**
   * The graphic is of a shield
   */
  | "shield"
  /**
   * The graphic is of a wooden shield
   */
  | "shieldWooden"
  /**
   * The graphic is of shoes
   */
  | "shoes"
  /**
   * The graphic is of metal shoes
   */
  | "shoesMetal"
  /**
   * The graphic is of siege ammo
   */
  | "siegeAmmo"
  /**
   * The graphic is of siege ammo straight default
   */
  | "siegeAmmoStraightDefault"
  /**
   * The graphic is of siege ammo straight wood
   */
  | "siegeAmmoStraightWood"
  /**
   * The graphic is of siege ammo diagonal default
   */
  | "siegeAmmoDiagonalDefault"
  /**
   * The graphic is of siege ammo diagonal wood
   */
  | "siegeAmmoDiagonalWood"
  /**
   * The graphic is of a tool
   */
  | "tool"
  /**
   * The graphic is of a tool wood
   */
  | "toolWood"
  /**
   * The graphic is of a tool stone
   */
  | "toolStone"
  /**
   * The graphic is of a tool metal
   */
  | "toolMetal"
  /**
   * The graphic is of a beehive
   */
  | "toolHiveBuilding"
  /**
   * The graphic is of a glass tool
   */
  | "toolGlass"
  /**
   * The graphic is of a tool shape
   */
  | "toolShape"
  /**
   * The graphic is a glass tool variant
   */
  | "toolGlassVariant"
  /**
   * The graphic is a metal tool variant
   */
  | "toolMetalVariant"
  /**
   * The graphic is a stone tool variant
   */
  | "toolStoneVariant"
  /**
   * The graphic is a wood tool variant
   */
  | "toolWoodVariant"
  /**
   * The graphic is a mud tool
   */
  | "toolMud"
  /**
   * The graphic is a water tool
   */
  | "toolWater"
  /**
   * The graphic is a vomit tool
   */
  | "toolVomit"
  /**
   * The graphic is a blood tool
   */
  | "toolBlood"
  /**
   * The graphic is a plant tool
   */
  | "toolDamage"
  /**
   * The graphic is a tool with binds on it
   */
  | "toolBands"
  /**
   * The graphic is a tool with engravings
   */
  | "toolEngraving"
  /**
   * The graphic is a tool with studs
   */
  | "toolStuds"
  /**
   * The graphic is a tool with rings
   */
  | "toolRings"
  /**
   * The graphic is a tool with spikes
   */
  | "toolSpikes"
  /**
   * The graphic is a toy
   */
  | "toy"
  /**
   * The graphic is a trap component
   */
  | "trapComponent"
  /**
   * The graphic is a weapon trap
   */
  | "trapComponentWeaponTrap"
  /**
   * The graphic is a weapon trap upright 1-T
   */
  | "trapComponentUpright1T"
  /**
   * The graphic is a weapon trap upright 2-T
   */
  | "trapComponentUpright2T"
  /**
   * The graphic is a weapon trap upright 3-T
   */
  | "trapComponentUpright3T"
  /**
   * The graphic is a weapon trap upright 4-T
   */
  | "trapComponentUpright4T"
  /**
   * The graphic is a weapon trap upright 5-T
   */
  | "trapComponentUpright5T"
  /**
   * The graphic is a weapon trap upright 6-T
   */
  | "trapComponentUpright6T"
  /**
   * The graphic is a weapon trap upright 7-T
   */
  | "trapComponentUpright7T"
  /**
   * The graphic is a weapon trap upright 8-T
   */
  | "trapComponentUpright8T"
  /**
   * The graphic is a weapon trap upright 9-T
   */
  | "trapComponentUpright9T"
  /**
   * The graphic is a weapon trap upright 10-T
   */
  | "trapComponentUpright10T"
  /**
   * The graphic is a weapon trap upright 1-B
   */
  | "trapComponentUpright1B"
  /**
   * The graphic is a weapon trap upright 2-B
   */
  | "trapComponentUpright2B"
  /**
   * The graphic is a weapon trap upright 3-B
   */
  | "trapComponentUpright3B"
  /**
   * The graphic is a weapon trap upright 4-B
   */
  | "trapComponentUpright4B"
  /**
   * The graphic is a weapon trap upright 5-B
   */
  | "trapComponentUpright5B"
  /**
   * The graphic is a weapon trap upright 6-B
   */
  | "trapComponentUpright6B"
  /**
   * The graphic is a weapon trap upright 7-B
   */
  | "trapComponentUpright7B"
  /**
   * The graphic is a weapon trap upright 8-B
   */
  | "trapComponentUpright8B"
  /**
   * The graphic is a weapon trap upright 9-B
   */
  | "trapComponentUpright9B"
  /**
   * The graphic is a weapon trap upright 10-B
   */
  | "trapComponentUpright10B"
  /**
   * The graphic is a weapon
   */
  | "weapon"
  /**
   * The graphic is a weapon default
   */
  | "weaponDefault"
  /**
   * The graphic is a weapon made of wood
   */
  | "weaponWood"
  /**
   * The graphic is a weapon made of grown wood
   */
  | "weaponWoodGrown"
  /**
   * The graphic is a weapon made of material
   */
  | "weaponMaterial"
  /**
   * The graphic is of a weapon used in traps
   */
  | "weaponTrap"
  /**
   * The graphic is of a weapon upright 1-T
   */
  | "weaponUpright1T"
  /**
   * The graphic is of a weapon upright 2-T
   */
  | "weaponUpright2T"
  /**
   * The graphic is of a weapon upright 3-T
   */
  | "weaponUpright3T"
  /**
   * The graphic is of a weapon upright 4-T
   */
  | "weaponUpright4T"
  /**
   * The graphic is of a weapon upright 5-T
   */
  | "weaponUpright5T"
  /**
   * The graphic is of a weapon upright 6-T
   */
  | "weaponUpright6T"
  /**
   * The graphic is of a weapon upright 7-T
   */
  | "weaponUpright7T"
  /**
   * The graphic is of a weapon upright 8-T
   */
  | "weaponUpright8T"
  /**
   * The graphic is of a weapon upright 9-T
   */
  | "weaponUpright9T"
  /**
   * The graphic is of a weapon upright 10-T
   */
  | "weaponUpright10T"
  /**
   * The graphic is of a weapon upright 1-B
   */
  | "weaponUpright1B"
  /**
   * The graphic is of a weapon upright 2-B
   */
  | "weaponUpright2B"
  /**
   * The graphic is of a weapon upright 3-B
   */
  | "weaponUpright3B"
  /**
   * The graphic is of a weapon upright 4-B
   */
  | "weaponUpright4B"
  /**
   * The graphic is of a weapon upright 5-B
   */
  | "weaponUpright5B"
  /**
   * The graphic is of a weapon upright 6-B
   */
  | "weaponUpright6B"
  /**
   * The graphic is of a weapon upright 7-B
   */
  | "weaponUpright7B"
  /**
   * The graphic is of a weapon upright 8-B
   */
  | "weaponUpright8B"
  /**
   * The graphic is of a weapon upright 9-B
   */
  | "weaponUpright9B"
  /**
   * The graphic is of a weapon upright 10-B
   */
  | "weaponUpright10B";

/**
 * The growth token of the tile
 */
export type GrowthToken =
  /**
   * The tile is a fruit
   */
  | "fruit"
  /**
   * The tile is growth-1
   */
  | "growth1"
  /**
   * The tile is growth-2
   */
  | "growth2"
  /**
   * The tile is growth-3
   */
  | "growth3"
  /**
   * The tile is growth-4
   */
  | "growth4"
  /**
   * The tile is "as-is"
   */
  | "asIs";

/**
 * The graphic of the tile
 */
export type PlantGraphicTemplate =
  /**
   * The standard leaves
   */
  | "standardLeaves"
  /**
   * The standard fruit 1
   */
  | "standardFruit1"
  /**
   * The standard fruit 2
   */
  | "standardFruit2"
  /**
   * The standard fruit 3
   */
  | "standardFruit3"
  /**
   * The standard fruit 4
   */
  | "standardFruit4"
  /**
   * The standard flowers 1
   */
  | "standardFlowers1"
  /**
   * The standard flowers 2
   */
  | "standardFlowers2"
  /**
   * The standard flowers 3
   */
  | "standardFlowers3"
  /**
   * The standard flowers 4
   */
  | "standardFlowers4";

/**
 * The tokens used to define the tile page
 */
export type TilePageTag =
  /**
   * The dimensions of the tile
   */
  | "tileDim"
  /**
   * The dimensions of the page
   */
  | "pageDim"
  /**
   * The file path
   */
  | "file"
  /**
   * An unknown token
   */
  | "unknown";

/**
 * The raw representation of an inorganic object.
 */
export type Inorganic = {
  identifier: string;
  metadata?: Metadata | null;
  objectId: string;
  material: Material;
  metalOreChance?: [string, number][] | null;
  threadMetalChance?: [string, number][] | null;
  environmentClass?: EnvironmentClass | null;
  environmentInclusionType?: InclusionType | null;
  environmentInclusionFrequency?: number | null;
  environmentClassSpecific?: string[] | null;
  tags?: InorganicToken[] | null;
};

/**
 * The class of environment that the stone appears in.
 */
export type EnvironmentClass =
  /**
   * Will appear in every stone.
   */
  | "AllStone"
  /**
   * Will appear in all igneous layers
   */
  | "IgneousAll"
  /**
   * Will appear in igneous extrusive layers
   */
  | "IgneousExtrusive"
  /**
   * Will appear in igneous intrusive layers
   */
  | "IgneousIntrusive"
  /**
   * Will appear in soil.
   */
  | "Soil"
  /**
   * Will appear in sand.
   */
  | "SoilSand"
  /**
   * Will appear in soil in the oceans.
   */
  | "SoilOcean"
  /**
   * Will appear in sedimentary layers.
   */
  | "Sedimentary"
  /**
   * Will appear in metamorphic layers.
   */
  | "Metamorphic"
  /**
   * Will appear in alluvial layers.
   */
  | "Alluvial"
  /**
   * Default value means parsing error.
   */
  | "None";

/**
 * The type of inclusion that the stone has.
 */
export type InclusionType =
  /**
   * Large ovoids that occupy their entire 48x48 embark tile. Microcline is an example. When mined, stone has a 25% yield (as with layer stones).
   */
  | "Cluster"
  /**
   * Blobs of 3-9 tiles. Will always be successfully mined. Red pyropes are an example. When mined, stone has a 100% yield.
   */
  | "ClusterSmall"
  /**
   * Single tiles. Will always be successfully mined. Clear diamonds are an example. When mined, stone has a 100% yield.
   */
  | "ClusterOne"
  /**
   * Large streaks of stone. Native gold is an example. When mined, stone has a 33% yield instead of the usual 25%.
   */
  | "Vein"
  /**
   * Default value means parsing error.
   */
  | "None";

/**
 * Tokens that can be used in inorganic raws.
 */
export type InorganicToken =
  /**
   * Used on metals, causes the metal to be made into wafers instead of bars.
   */
  | "Wafers"
  /**
   * Causes the stone to form hollow tubes leading to the Underworld. Used for raw adamantine. When mined, stone has a 100% yield.
   * If no material with this token exists, hollow veins will instead be made of the first available inorganic, usually iron. Implies \[SPECIAL\].
   */
  | "DeepSpecial"
  /**
   * Allows the ore to be smelted into metal in the smelter. Each token with a non-zero chance causes the game to roll d100 four times,
   * each time creating one bar of the type requested on success.
   */
  | "MetalOre"
  /**
   * Allows strands to be extracted from the metal at a craftsdwarf's workshop.
   */
  | "ThreadMetal"
  /**
   * Causes the stone to line the landscape of the Underworld. Used for slade. When mined (if it's mineable), stone has a 100% yield. If no material with this token exists,
   * other materials will be used in place of slade. Underworld spires will still be referred to as a "spire of slade" in the world's history.
   */
  | "DeepSurface"
  /**
   * Allows the stone to support an aquifer.
   */
  | "Aquifer"
  /**
   * Causes the material to form metamorphic layers.
   */
  | "Metamorphic"
  /**
   * Causes the material to form sedimentary layers.
   */
  | "Sedimentary"
  /**
   * Causes the material to form soil layers, allowing it to appear in (almost) any biome. Mining is faster and produces no stones.
   */
  | "Soil"
  /**
   * Causes the material to form pelagic sediment layers beneath deep oceans. Mining is faster and produces no stones.
   */
  | "SoilOcean"
  /**
   * Causes the material to form sand layers, allowing it to appear in sand deserts and shallow oceans. Mining is faster and produces no stones.
   * Sand layers can also be used for making glass. Can be combined with \[SOIL\].
   */
  | "SoilSand"
  /**
   * Permits an already \[SEDIMENTARY\] stone layer to appear underneath shallow ocean regions.
   */
  | "SedimentaryOceanShallow"
  /**
   * Permits an already \[SEDIMENTARY\] stone layer to appear underneath deep ocean regions.
   */
  | "SedimentaryOceanDeep"
  /**
   * Causes the material to form igneous intrusive layers.
   */
  | "IgneousExtrusive"
  /**
   * Causes the material to form igneous extrusive layers.
   */
  | "IgneousIntrusive"
  /**
   * Specifies what types of layers will contain this mineral. Multiple instances of the same token segment will cause the rock type to occur more frequently,
   * but won't increase its abundance in the specified environment. See below.
   */
  | "Environment"
  /**
   * Specifies which specific minerals will contain this mineral. See below.
   */
  | "EnvironmentSpecific"
  /**
   * Specifies that the stone is created when combining water and magma, also causing it to line the edges of magma pools and volcanoes.
   * If multiple minerals are marked as lava stones, a different one will be used in each biome or geological region.
   */
  | "Lava"
  /**
   * Prevents the material from showing up in certain places. AI-controlled entities won't use the material to make items and don't bring it in caravans,
   * though the player can use it as normal. Also, inorganic generated creatures (forgotten beasts, titans, demons) will never be composed of this material.
   * Explicitly set by all evil weather materials and implied by `[DEEP_SURFACE]` and `[DEEP_SPECIAL]`.
   */
  | "Special"
  /**
   * Indicates that this is a generated material. Cannot be specified in user-defined raws.
   */
  | "Generated"
  /**
   * Found on random-generated metals and cloth. Marks this material as usable by Deity-created generated entities.
   */
  | "Divine"
  /**
   * Found on divine materials. Presumably links the material to a god of the same sphere.
   */
  | "Sphere"
  /**
   * Default value means parsing error.
   */
  | "Unknown";

/**
 * A struct representing a material
 */
export type Material = {
  /**
   * The type of the material is also the trigger to start tracking a material
   */
  materialType?: MaterialType | null;
  /**
   * The material might have a name, but its more likely that there is only an identifier to
   * refer to another creature/plant/reaction, which are listed elsewhere.
   * If there is no name provided, then it is a special hardcoded case, e.g. magma or green glass.
   */
  name?: string | null;
  /**
   * For the coal tag, it specifies the type of fuel that can be used. It will never be None.
   */
  fuelType?: FuelType | null;
  /**
   * Linked creature identifier (and then `material_name` might be "skin", like for "`CREATURE_MAT:DWARF:SKIN`")
   */
  creatureIdentifier?: string | null;
  /**
   * Linked plant identifier (and then `material_name` might be "leaf", like for "`PLANT_MAT:BUSH_QUARRY:LEAF`")
   */
  plantIdentifier?: string | null;
  /**
   * If a material is defined within a creature itself, it will use `LOCAL_CREATURE_MAT` tag, which implies
   * that the material is only used by that creature. This is also true for plants and `LOCAL_PLANT_MAT`.
   */
  isLocalMaterial?: boolean | null;
  /**
   * Within a reaction, there can be special material definitions. Todo: Figure this out.
   */
  reagentIdentifier?: string | null;
  reactionProductIdentifier?: string | null;
  /**
   * If material is defined from a template, we need a way to refer to that
   */
  templateIdentifier?: string | null;
  /**
   * Usage tags
   */
  usage?: MaterialUsage[] | null;
  value?: number | null;
  color?: Color | null;
  stateNames?: StateName | null;
  stateAdjectives?: StateName | null;
  stateColors?: StateName | null;
  temperatures?: Temperatures | null;
  /**
   * Catch-all for remaining tags we identify but don't do anything with... yet.
   */
  properties?: string[] | null;
  syndromes?: Syndrome[] | null;
  mechanicalProperties?: MaterialMechanics | null;
  liquidDensity?: number | null;
  molarMass?: number | null;
  buildColor?: Color | null;
  displayColor?: Color | null;
  tile?: Tile | null;
  itemSymbol?: string | null;
};

/**
 * A material fuel type that can be set in a material definition.
 */
export type FuelType =
  /**
   * Charcoal or coal
   */
  | "Charcoal"
  /**
   * Coal coke
   */
  | "Coke"
  /**
   * No glass furnace fuel
   */
  | "NoMaterialGloss"
  /**
   * None is an invalid option, so its a hint that this is not set.
   */
  | "None";

/**
 * A material property that can be set in a material definition.
 */
export type MaterialProperty =
  /**
   * Imports the properties of the specified preexisting material template.
   */
  | "UseMaterialTemplate"
  /**
   * Applies a prefix to all items made from the material. For `PLANT` and `CREATURE` materials, this defaults to the plant/creature name.
   * Not permitted in material template definitions.
   */
  | "Prefix"
  /**
   * Overrides the name of `BOULDER` items (i.e. mined-out stones) made of the material (used for native copper/silver/gold/platinum
   * to make them be called "nuggets" instead of "boulders").
   */
  | "StoneName"
  /**
   * Used to indicate that said material is a gemstone - when tiles are mined out, rough gems will be yielded instead of boulders.
   * Plural can be "STP" to automatically append an "s" to the singular form, and `OVERWRITE_SOLID` will override the relevant `STATE_NAME` and `STATE_ADJ` values.
   */
  | "IsGem"
  /**
   * Specifies what the material should be treated as when drinking water contaminated by it, for generating unhappy thoughts.
   * Valid values are `BLOOD`, `SLIME`, `VOMIT`, `ICHOR`, `PUS`, `GOO`, `GRIME`, and `FILTH`.
   */
  | "TempDietInfo"
  /**
   * Allows the material to be used as dye, and defines color of dyed items.
   */
  | "PowderDye"
  /**
   * Specifies the tile that will be used to represent unmined tiles made of this material. Generally only used with stones. Defaults to 219 ('█').
   */
  | "Tile"
  /**
   * Specifies the tile that will be used to represent BOULDER items made of this material. Generally only used with stones. Defaults to 7 ('•').
   */
  | "ItemSymbol"
  /**
   * The on-screen color of the material. Uses a standard 3-digit color token. Equivalent to `TILE_COLOR:a:b:c`,
   * `BUILD_COLOR:b:a:X` (X = 1 if 'a' equals 'b', 0 otherwise), and `BASIC_COLOR:a:c`
   */
  | "DisplayColor"
  /**
   * The color of objects made of this material which use both the foreground and background color: doors, floodgates, hatch covers, bins, barrels, and cages.
   * Defaults to `7:7:1` (white).
   */
  | "BuildColor"
  /**
   * The color of unmined tiles containing this material (for stone and soil), as well as engravings in this material. Defaults to `7:7:1` (white).
   */
  | "TileColor"
  /**
   * The color of objects made of this material which use only the foreground color, including workshops, floors and boulders, and smoothed walls. Defaults to `7:1` (white).
   */
  | "BasicColor"
  /**
   * Determines the color of the material at the specified state. See below for a list of valid material states. Color comes from `descriptor_color_standard.txt`.
   * The nearest color value is used to display contaminants and body parts made of this material in ASCII and to color items and constructions made from this
   * material with graphics.
   * Example:`STATE_COLOR:ALL_SOLID:GRAY`
   */
  | "StateColor"
  /**
   * Determines the name of the material at the specified state, as displayed in-game. `STATE_NAME:ALL_SOLID:stone`
   */
  | "StateName"
  /**
   * Like `STATE_NAME`, but used in different situations. Equipment made from the material uses the state adjective and not the state name.
   */
  | "StateAdjective"
  /**
   * Sets both `STATE_NAME` and `STATE_ADJ` at the same time.
   */
  | "StateNameAdjective"
  /**
   * The material's tendency to absorb liquids. Containers made of materials with nonzero absorption cannot hold liquids unless they have been glazed.
   * Defaults to 0.
   */
  | "Absorption"
  /**
   * Specifies how hard of an impact (in kilopascals) the material can withstand before it will start deforming permanently.
   * Used for blunt-force combat. Defaults to `10_000`.
   */
  | "ImpactYield"
  /**
   * Specifies how hard of an impact the material can withstand before it will fail entirely. Used for blunt-force combat. Defaults to `10_000`.
   */
  | "ImpactFracture"
  /**
   * Specifies how much the material will have given (in parts-per-`100_000`) when the yield point is reached. Used for blunt-force combat. Defaults to 0.
   * Apparently affects in combat whether the corresponding tissue is bruised (`value >= 50_000`), torn (value between `25_000` and `49_999`), or fractured (`value <= 24_999`)
   */
  | "ImpactElasticity"
  /**
   * Specifies how hard the material can be compressed before it will start deforming permanently. Determines a tissue's resistance to pinching and response to strangulation.
   * Defaults to `10_000`.
   */
  | "CompressiveYield"
  /**
   * Specifies how hard the material can be compressed before it will fail entirely. Determines a tissue's resistance to pinching and response to strangulation.
   * Defaults to `10_000`.
   */
  | "CompressiveFracture"
  /**
   * Specifies how much the material will have given when it has been compressed to its yield point. Determines a tissue's resistance to pinching and
   * response to strangulation. Defaults to 0.
   */
  | "CompressiveElasticity"
  /**
   * Specifies how hard the material can be stretched before it will start deforming permanently. Determines a tissue's resistance to a latching and tearing bite.
   * Defaults to `10_000`.
   */
  | "TensileYield"
  /**
   * Specifies how hard the material can be stretched before it will fail entirely. Determines a tissue's resistance to a latching and tearing bite. Defaults to `10_000`.
   */
  | "TensileFracture"
  /**
   * Specifies how much the material will have given when it is stretched to its yield point. Determines a tissue's resistance to a latching and tearing bite.
   * Defaults to 0.
   */
  | "TensileElasticity"
  /**
   * Specifies how hard the material can be twisted before it will start deforming permanently. Used for latching and shaking with a blunt attack
   * (no default creature has such an attack, but they can be modded in). Defaults to `10_000`.
   */
  | "TorsionYield"
  /**
   * Specifies how hard the material can be twisted before it will fail entirely. Used for latching and shaking with a blunt attack
   * (no default creature has such an attack, but they can be modded in). Defaults to `10_000`.
   */
  | "TorsionFracture"
  /**
   * Specifies how much the material will have given when it is twisted to its yield point. Used for latching and shaking with a blunt attack
   * (no default creature has such an attack, but they can be modded in). Defaults to 0.
   */
  | "TorsionElasticity"
  /**
   * Specifies how hard the material can be sheared before it will start deforming permanently. Used for cutting calculations. Defaults to `10_000`.
   */
  | "ShearYield"
  /**
   * Specifies how hard the material can be sheared before it will fail entirely. Used for cutting calculations. Defaults to `10_000`.
   */
  | "ShearFracture"
  /**
   * Specifies how much the material will have given when sheared to its yield point. Used for cutting calculations. Defaults to 0.
   */
  | "ShearElasticity"
  /**
   * Specifies how hard the material can be bent before it will start deforming permanently. Determines a tissue's resistance to being mangled with a joint lock.
   * Defaults to `10_000`.
   */
  | "BendingYield"
  /**
   * Specifies how hard the material can be bent before it will fail entirely. Determines a tissue's resistance to being mangled with a joint lock. Defaults to `10_000`.
   */
  | "BendingFracture"
  /**
   * Specifies how much the material will have given when bent to its yield point. Determines a tissue's resistance to being mangled with a joint lock. Defaults to 0.
   */
  | "BendingElasticity"
  /**
   * How sharp the material is. Used in cutting calculations. Applying a value of at least `10_000` to a stone will allow weapons to be made from that stone. Defaults to `10_000`.
   */
  | "MaxEdge"
  /**
   * Value modifier for the material. Defaults to 1. This number can be made negative by placing a "-" in front, resulting in things that you are paid to buy and
   * must pay to sell.
   */
  | "MaterialValue"
  /**
   * Multiplies the value of the material. Not permitted in material template definitions.
   */
  | "MultiplyValue"
  /**
   * Rate at which the material heats up or cools down (in joules/kilogram-kelvin). If set to `NONE`, the temperature will be fixed at its initial value.
   * Defaults to `NONE`.
   */
  | "SpecificHeat"
  /**
   * Temperature above which the material takes damage from heat. Defaults to `NONE`.
   * If the material has an ignite point but no heatdam point, it will burn for a very long time (9 months and 16.8 days).
   */
  | "HeatDamagePoint"
  /**
   * Temperature below which the material takes damage from cold. Defaults to `NONE`.
   */
  | "ColdDamagePoint"
  /**
   * Temperature at which the material will catch fire. Defaults to `NONE`.
   */
  | "IgnitionPoint"
  /**
   * Temperature at which the material melts. Defaults to `NONE`.
   */
  | "MeltingPoint"
  /**
   * Temperature at which the material boils. Defaults to `NONE`.
   */
  | "BoilingPoint"
  /**
   * Items composed of this material will initially have this temperature.
   * Used in conjunction with `SPEC_HEAT:NONE` to make material's temperature fixed at the specified value.
   * Defaults to `NONE`.
   */
  | "MaterialFixedTemperature"
  /**
   * Changes a material's `HEATDAM_POINT`, but only if it was not set to `NONE`. Not permitted in material template definitions.
   */
  | "IfExistsSetHeatDamagePoint"
  /**
   * Changes a material's `COLDDAM_POINT`, but only if it was not set to `NONE`. Not permitted in material template definitions.
   */
  | "IfExistsSetColdDamagePoint"
  /**
   * Changes a material's `IGNITE_POINT`, but only if it was not set to `NONE`. Not permitted in material template definitions.
   */
  | "IfExistsSetIgnitePoint"
  /**
   * Changes a material's `MELTING_POINT`, but only if it was not set to `NONE`. Not permitted in material template definitions.
   */
  | "IfExistsSetMeltingPoint"
  /**
   * Changes a material's `BOILING_POINT`, but only if it was not set to `NONE`. Not permitted in material template definitions.
   */
  | "IfExistsSetBoilingPoint"
  /**
   * Changes a material's `MAT_FIXED_TEMP`, but only if it was not set to `NONE`. Not permitted in material template definitions.
   */
  | "IfExistsSetMatFixedTemp"
  /**
   * Specifies the density (in kilograms per cubic meter) of the material when in solid form. Also affects combat calculations;
   * affects blunt-force damage and ability of weak-in-impact-yield blunt attacks to pierce armor. Defaults to `NONE`.
   */
  | "SolidDensity"
  /**
   * Specifies the density of the material when in liquid form. Defaults to `NONE`. Also affects combat calculations;
   * affects blunt force damage like `SOLID_DENSITY`, but only for attacks made by liquids (e.g. forgotten beasts made of water).
   */
  | "LiquidDensity"
  /**
   * Specifies (in kg/mol) the molar mass of the material in gaseous form. Also affects combat calculations like the densities,
   * but only for attacks made by gases (e.g. forgotten beasts made of steam).
   */
  | "MolarMass"
  /**
   * Specifies the type of container used to store the material. Used in conjunction with the `EXTRACT_BARREL`, `EXTRACT_VIAL`,
   * or `EXTRACT_STILL_VIAL` plant tokens.
   * Defaults to `BARREL`.
   */
  | "ExtractStorage"
  /**
   * Specifies the item type used for butchering results made of this material. Stock raws use `GLOB:NONE` for fat and `MEAT:NONE` for other meat materials.
   */
  | "ButcherSpecial"
  /**
   * When a creature is butchered, meat yielded from organs made from this material will be named via this token.
   */
  | "MeatName"
  /**
   * Specifies the name of blocks made from this material.
   */
  | "BlockName"
  /**
   * The material forms "wafers" instead of "bars".
   */
  | "Wafers"
  /**
   * Used with reaction raws to associate a reagent material with a product material. The first argument is used by `HAS_MATERIAL_REACTION_PRODUCT` and `GET_MATERIAL_FROM_REAGENT` in reaction raws.
   * The remainder is a material reference, generally `LOCAL_CREATURE_MAT:SUBTYPE` or `LOCAL_PLANT_MAT:SUBTYPE` or `INORGANIC:STONETYPE`.
   * `MATERIAL_REACTION_PRODUCT:TAN_MAT:LOCAL_CREATURE_MAT:LEATHER`
   */
  | "MaterialReactionProduct"
  /**
   * Used with reaction raws to associate a reagent material with a complete item. The first argument is used by `HAS_ITEM_REACTION_PRODUCT` and `GET_ITEM_DATA_FROM_REAGENT` in reaction raws.
   * The rest refers to the type of item, then its material.
   * `ITEM_REACTION_PRODUCT:BAG_ITEM:PLANT_GROWTH:LEAVES:LOCAL_PLANT_MAT:LEAF`
   */
  | "ItemReactionProduct"
  /**
   * "Used to classify all items made of the material, so that reactions can use them as generic reagents.In default raws, the following are used:
   * `FAT`, `TALLOW`, `SOAP`, `PARCHMENT`, `PAPER_PLANT`, `PAPER_SLURRY`, `MILK`, `CHEESE`, `WAX`.
   * `CAN_GLAZE` - items made from this material can be glazed.
   * `FLUX` - can be used as flux in pig iron and steel making.
   * `GYPSUM` - can be processed into gypsum plaster.
   * `CALCIUM_CARBONATE` - can be used in production of quicklime."
   */
  | "ReactionClass"
  /**
   * Makes `BOULDER` acceptable as a reagent in reactions that require `METAL_ORE:MATERIAL_NAME`, as well as smelting directly into metal bars.
   * Places the material under Metal Ores in Stone stockpiles. The specified value determines the probability for this product (see Tetrahedrite or Galena for details).
   */
  | "MetalOre"
  /**
   * Makes `BOULDER` items made of the material acceptable for strand extraction into threads; see also `STOCKPILE_THREAD_METAL`.
   * Value presumably determines the probability of this product extracted.
   */
  | "ThreadMetal"
  /**
   * Allows the material to be used to make casts.
   */
  | "HardensWithWater"
  /**
   * Determines effectiveness of soap - if the amount of grime on a body part is more than 3-SOAP_LEVEL, it sets it to 3-SOAP_LEVEL; as such setting it above 3 is bad.
   * Soap has `[SOAP_LEVEL:2]`. Defaults to 0.
   */
  | "SoapLevel"
  /**
   * Begins defining a syndrome applied by the material. Multiple syndromes can be specified. See Syndrome token.
   */
  | "Syndrome"
  /**
   * This is since .50 in the raws of several antler-wielding animals. It is used to show an antler as bodypart.
   */
  | "Antler"
  /**
   * Hair material
   */
  | "Hair"
  /**
   * Feather material
   */
  | "Feather"
  /**
   * Scale material
   */
  | "Scale"
  /**
   * Hoof material
   */
  | "Hoof"
  /**
   * Chitin material
   */
  | "Chitin"
  /**
   * Cartilage material
   */
  | "Cartilage"
  /**
   * Nervous tissue
   */
  | "NervousTissue"
  /**
   * Category of meat
   */
  | "MeatCategory"
  /**
   * For default value, use unknown.
   */
  | "Unknown";

/**
 * A material state that can be set in a material definition.
 */
export type MaterialState =
  /**
   * Solid state of the material
   */
  | "Solid"
  /**
   * Liquid state of the material
   */
  | "Liquid"
  /**
   * Gas state of the material
   */
  | "Gas"
  /**
   * `POWDER` or `SOLID_POWDER`
   */
  | "Powder"
  /**
   * `PASTE` or `SOLID_PASTE`
   */
  | "Paste"
  /**
   * `PRESSED` or `SOLID_PRESSED`
   */
  | "Pressed"
  /**
   * Default value is invalid, so its a hint that this is not set.
   */
  | "Unknown"
  /**
   * Denotes all possible material states
   */
  | "All"
  /**
   * Denotes '`Solid`', '`Powder`', '`Paste`', and '`Pressed`'
   */
  | "AllSolid";

/**
 * A material template
 */
export type MaterialType =
  /**
   * An inorganic material
   */
  | "Inorganic"
  /**
   * A stone material
   */
  | "Stone"
  /**
   * A metal material
   */
  | "Metal"
  /**
   * A coal material
   */
  | "Coal"
  /**
   * A creature material
   */
  | "CreatureMaterial"
  /**
   * A creature material for the current creature token only
   */
  | "LocalCreatureMaterial"
  /**
   * A plant material
   */
  | "PlantMaterial"
  /**
   * A plant material for the current plant token only
   */
  | "LocalPlantMaterial"
  /**
   * A material from a reaction
   */
  | "GetMaterialFromReagent"
  /**
   * Amber
   */
  | "Amber"
  /**
   * Coral
   */
  | "Coral"
  /**
   * Green Glass
   */
  | "GlassGreen"
  /**
   * Clear Glass
   */
  | "GlassClear"
  /**
   * Crystal Glass
   */
  | "GlassCrystal"
  /**
   * Water
   */
  | "Water"
  /**
   * Potash
   */
  | "Potash"
  /**
   * Ash
   */
  | "Ash"
  /**
   * Pearl Ash
   */
  | "PearlAsh"
  /**
   * Lye
   */
  | "Lye"
  /**
   * Mud
   */
  | "Mud"
  /**
   * Vomit
   */
  | "Vomit"
  /**
   * Salt
   */
  | "Salt"
  /**
   * Brown Filth
   */
  | "FilthB"
  /**
   * Yellow Filth
   */
  | "FilthY"
  /**
   * Unnknown Substance
   */
  | "UnknownSubstance"
  /**
   * Grime
   */
  | "Grime"
  /**
   * An unknown token
   */
  | "Unknown";

/**
 * A material usage that can be set in a material definition.
 */
export type MaterialUsage =
  /**
   * Lets the game know that an animal was likely killed in the production of this item.
   * Entities opposed to killing animals (Elves in vanilla) will refuse to accept these items in trade.
   */
  | "ImpliesAnimalKill"
  /**
   * Classifies the material as plant-based alcohol, allowing its storage in food stockpiles under "Drink (Plant)".
   */
  | "AlcoholPlant"
  /**
   * Classifies the material as animal-based alcohol, allowing its storage in food stockpiles under "Drink (Animal)".
   */
  | "AlcoholCreature"
  /**
   * Classifies the material as generic alcohol. Implied by both `ALCOHOL_PLANT` and `ALCOHOL_CREATURE`. Exact behavior unknown, possibly vestigial.
   */
  | "Alcohol"
  /**
   * Classifies the material as plant-based cheese, allowing its storage in food stockpiles under "Cheese (Plant)".
   */
  | "CheesePlant"
  /**
   * Classifies the material as animal-based cheese, allowing its storage in food stockpiles under "Cheese (Animal)".
   */
  | "CheeseCreature"
  /**
   * Classifies the material as generic cheese. Implied by both `CHEESE_PLANT` and `CHEESE_CREATURE`. Exact behavior unknown, possibly vestigial.
   */
  | "Cheese"
  /**
   * Classifies the material as plant powder, allowing its storage in food stockpiles under "Milled Plant".
   */
  | "PowderMiscPlant"
  /**
   * Classifies the material as creature powder, allowing its storage in food stockpiles under "Bone Meal".
   * Unlike milled plants, such as sugar and flour, "Bone Meal" barrels or pots may not contain bags.
   * Custom reactions using this product better use buckets or jugs instead.
   */
  | "PowderMiscCreature"
  /**
   * Classifies the material as generic powder. Implied by both `POWDER_MISC_PLANT` and `POWDER_MISC_CREATURE`.
   * Exact behavior unknown, possibly vestigial.
   */
  | "PowderMisc"
  /**
   * Permits globs of the material in solid form to be stored in food stockpiles under "Fat" - without it,
   * dwarves will come by and "clean" the items, destroying them (unless `DO_NOT_CLEAN_GLOB` is also included).
   */
  | "StockpileGlobOrStockpileGlobSolid"
  /**
   * Classifies the material as milled paste, allowing its storage in food stockpiles under "Paste".
   */
  | "StockpileGlobPaste"
  /**
   * Classifies the material as pressed goods, allowing its storage in food stockpiles under "Pressed Material".
   */
  | "StockpileGlobPressed"
  /**
   * Classifies the material as a plant growth (e.g. fruits, leaves), allowing its storage in food stockpiles under Plant Growth/Fruit.
   */
  | "StockpilePlantGrowth"
  /**
   * Classifies the material as a plant extract, allowing its storage in food stockpiles under "Extract (Plant)".
   */
  | "LiquidMiscPlant"
  /**
   * Classifies the material as a creature extract, allowing its storage in food stockpiles under "Extract (Animal)".
   */
  | "LiquidMiscCreature"
  /**
   * Classifies the material as a miscellaneous liquid, allowing its storage in food stockpiles under "Misc. Liquid" along with lye.
   */
  | "LiquidMiscOther"
  /**
   * Classifies the material as a generic liquid. Implied by `LIQUID_MISC_PLANT`, `LIQUID_MISC_CREATURE`, and `LIQUID_MISC_OTHER`. Exact behavior unknown, possibly vestigial.
   */
  | "LiquidMisc"
  /**
   * Classifies the material as a plant, allowing its storage in food stockpiles under "Plants".
   */
  | "StructuralPlantMat"
  /**
   * Classifies the material as a plant seed, allowing its storage in food stockpiles under "Seeds".
   */
  | "SeedMat"
  /**
   * Classifies the material as bone, allowing its use for bone carvers and restriction from stockpiles by material.
   */
  | "Bone"
  /**
   * Classifies the material as wood, allowing its use for carpenters and storage in wood stockpiles.
   * Entities opposed to killing plants (i.e. Elves) will refuse to accept these items in trade.
   */
  | "Wood"
  /**
   * Classifies the material as plant fiber, allowing its use for clothiers and storage in cloth stockpiles under "Thread (Plant)" and "Cloth (Plant)".
   */
  | "ThreadPlant"
  /**
   * Classifies the material as tooth, allowing its use for bone carvers and restriction from stockpiles by material.
   */
  | "Tooth"
  /**
   * Classifies the material as horn, allowing its use for bone carvers and restriction from stockpiles by material.
   */
  | "Horn"
  /**
   * Classifies the material as hair, allowing for its use for spinners and restriction from refuse stockpiles by material.
   */
  | "Hair"
  /**
   * Classifies the material as pearl, allowing its use for bone carvers and restriction from stockpiles by material.
   */
  | "Pearl"
  /**
   * Classifies the material as shell, allowing its use for bone carvers and restriction from stockpiles by material.
   */
  | "Shell"
  /**
   * Classifies the material as leather, allowing its use for leatherworkers and storage in leather stockpiles.
   */
  | "Leather"
  /**
   * Classifies the material as silk, allowing its use for clothiers and storage in cloth stockpiles under "Thread (Silk)" and "Cloth (Silk)".
   */
  | "Silk"
  /**
   * Classifies the material as soap, allowing it to be used as a bath detergent and stored in bar/block stockpiles under "Bars: Other Materials".
   */
  | "Soap"
  /**
   * Material generates miasma when it rots.
   */
  | "GeneratesMiasma"
  /**
   * Classifies the material as edible meat.
   */
  | "Meat"
  /**
   * Material will rot if not stockpiled appropriately. Currently only affects food and refuse, other items made of this material will not rot.
   */
  | "Rots"
  /**
   * In most living creatures, it controls many bodily functions and movements by sending signals around the body. See: Nervous tissue
   */
  | "NervousTissue"
  /**
   * Tells the game to classify contaminants of this material as being "blood" in Adventurer mode tile descriptions ("Here we have a Dwarf in a slurry of blood.").
   */
  | "BloodMapDescriptor"
  /**
   * Tells the game to classify contaminants of this material as being "ichor".
   */
  | "IchorMapDescriptor"
  /**
   * Tells the game to classify contaminants of this material as being "goo".
   */
  | "GooMapDescriptor"
  /**
   * Tells the game to classify contaminants of this material as being "slime".
   */
  | "SlimeMapDescriptor"
  /**
   * Tells the game to classify contaminants of this material as being "pus".
   */
  | "PusMapDescriptor"
  /**
   * Tells the game to classify contaminants of this material as being "sweat".
   */
  | "SweatMapDescriptor"
  /**
   * Tells the game to classify contaminants of this material as being "tears".
   */
  | "TearsMapDescriptor"
  /**
   * Tells the game to classify contaminants of this material as being "spit".
   */
  | "SpitMapDescriptor"
  /**
   * Contaminants composed of this material evaporate over time, slowly disappearing from the map. Used internally by water.
   */
  | "Evaporates"
  /**
   * Used for materials which cause syndromes, causes it to enter the creature's blood instead of simply spattering on the surface.
   */
  | "EntersBlood"
  /**
   * Can be eaten by vermin.
   */
  | "EdibleVermin"
  /**
   * Can be eaten raw.
   */
  | "EdibleRaw"
  /**
   * Can be cooked and then eaten.
   */
  | "EdibleCooked"
  /**
   * Prevents globs made of this material from being cleaned up and destroyed.
   */
  | "DoNotCleanGlob"
  /**
   * Prevents the material from showing up in Stone stockpile settings.
   */
  | "NoStoneStockpile"
  /**
   * The material can be made into minecarts, wheelbarrows, and stepladders at the metalsmith's forge.
   */
  | "ItemsMetal"
  /**
   * Equivalent to `ITEMS_HARD`. Given to bone.
   */
  | "ItemsBarred"
  /**
   * Equivalent to `ITEMS_HARD`. Given to shell.
   */
  | "ItemsScaled"
  /**
   * Equivalent to `ITEMS_SOFT`. Given to leather.
   */
  | "ItemsLeather"
  /**
   * The material can be made into clothing, amulets, bracelets, earrings, backpacks, and quivers, contingent
   * on which workshops accept the material. Given to plant fiber, silk and wool.
   */
  | "ItemsSoft"
  /**
   * The material can be made into furniture, crafts, mechanisms, and blocks, contingent on which workshops accept the material.
   * Random crafts made from this material include all seven items. Given to stone, wood, bone, shell, chitin, claws, teeth,
   * horns, hooves and beeswax. Hair, pearls and eggshells also have the tag.
   */
  | "ItemsHard"
  /**
   * Used to define that the material is a stone. Allows its usage in masonry and stonecrafting and storage in stone stockpiles, among other effects.
   */
  | "IsStone"
  /**
   * Defines the material is a ceramic.
   */
  | "IsCeramic"
  /**
   * Used for a stone that cannot be dug into.
   */
  | "Undiggable"
  /**
   * Causes containers made of this material to be prefixed with "unglazed" if they have not yet been glazed.
   */
  | "DisplayUnglazed"
  /**
   * Classifies the material as yarn, allowing its use for clothiers and its storage in cloth stockpiles under "Thread (Yarn)" and "Cloth (Yarn)".
   */
  | "Yarn"
  /**
   * Classifies the material as metal thread, permitting thread and cloth to be stored in cloth stockpiles under "Thread (Metal)" and "Cloth (Metal)".
   */
  | "StockpileThreadMetal"
  /**
   * Defines the material as being metal, allowing it to be used at forges.
   */
  | "IsMetal"
  /**
   * Used internally by green glass, clear glass, and crystal glass. Appears to only affect the `GLASS_MATERIAL` reaction token. Does not cause the game
   * to treat the material like glass, i.e being referred to as "raw" instead of "rough" in its raw form or being displayed in the "glass" trade/embark category.
   */
  | "IsGlass"
  /**
   * Can be used in the production of crystal glass.
   */
  | "CrystalGlassable"
  /**
   * Melee weapons can be made out of this material.
   */
  | "ItemsWeapon"
  /**
   * Ranged weapons can be made out of this material.
   */
  | "ItemsWeaponRanged"
  /**
   * Anvils can be made out of this material.
   */
  | "ItemsAnvil"
  /**
   * Ammunition can be made out of this material.
   */
  | "ItemsAmmo"
  /**
   * Picks can be made out of this material.
   */
  | "ItemsDigger"
  /**
   * Armor can be made out of this material.
   */
  | "ItemsArmor"
  /**
   * Used internally by amber and coral. Functionally equivalent to `ITEMS_HARD`.
   */
  | "ItemsDelicate"
  /**
   * Siege engine parts can be made out of this material. Does not appear to work.
   */
  | "ItemsSiegeEngine"
  /**
   * Querns and millstones can be made out of this material. Does not appear to work.
   */
  | "ItemsQuern"
  /**
   * An unknown token
   */
  | "Unknown";

/**
 * A struct representing a material template
 */
export type MaterialTemplate = {
  identifier: string;
  metadata?: Metadata | null;
  objectId: string;
  material: Material;
};

/**
 * A struct representing a plant
 */
export type Plant = {
  /**
   * Common Raw file Things
   */
  metadata?: Metadata | null;
  identifier: string;
  objectId: string;
  name: Name;
  prefStrings?: string[] | null;
  tags?: PlantTag[] | null;
  /**
   * Default [0, 0] (aboveground)
   */
  undergroundDepth?: [number, number] | null;
  /**
   * Default frequency is 50
   */
  frequency?: number | null;
  /**
   * List of biomes this plant can grow in
   */
  biomes?: Biome[] | null;
  /**
   * Growth Tokens define the growths of the plant (leaves, fruit, etc.)
   */
  growths?: PlantGrowth[] | null;
  /**
   * If plant is a tree, it will have details about the tree.
   */
  treeDetails?: Tree | null;
  /**
   * If plant is a shrub, it will have details about the shrub.
   */
  shrubDetails?: Shrub | null;
  materials?: Material[] | null;
};

/**
 * The tags of a plant
 */
export type PlantTag =
  /**
   * The plant grows in dry conditions
   */
  | "Dry"
  /**
   * The plant grows in evil conditions
   */
  | "Evil"
  /**
   * The plant grows in good conditions
   */
  | "Good"
  /**
   * The plant grows in savage conditions
   */
  | "Savage"
  /**
   * The plant grows in wet conditions
   */
  | "Wet"
  /**
   * The plant grows at a specific underground depth
   */
  | "UndergroundDepth"
  /**
   * The plant grows in a specific biome
   */
  | "Biome"
  /**
   * The frequency of the plant
   */
  | "Frequency"
  /**
   * The material template to use for the plant
   */
  | "UseMaterialTemplate"
  /**
   * The basic material to use for the plant
   */
  | "BasicMaterial"
  /**
   * The material to use for the plant
   */
  | "UseMaterial"
  /**
   * The material of the plant
   */
  | "Material"
  /**
   * What dwarves prefer about the plant
   */
  | "PrefString"
  /**
   * All names of the plant
   */
  | "AllNames"
  /**
   * The adjective name of the plant
   */
  | "NameAdjective"
  /**
   * The plural name of the plant
   */
  | "NamePlural"
  /**
   * The singular name of the plant
   */
  | "NameSingular"
  /**
   * An unknown plant tag
   */
  | "Unknown";

/**
 * A struct representing a plant growth
 */
export type PlantGrowth = {
  /**
   * Plant growths are not given an identifier, since they are just supporting
   * data for the plant definition. They are defined instead by the type of growth.
   */
  growthType: GrowthType;
  /**
   * The name of the growth. This is actually defined with `GROWTH_NAME` key in the raws.
   */
  name: SingPlurName;
  /**
   * The item grown by this growth. This is actually defined with `GROWTH_ITEM` key in the raws.
   * This is a string until we make a proper item structure. Technically there are 2 arguments:
   * 1. item token, 2: material token. Generally the item type should be `PLANT_GROWTH:NONE`.
   */
  item: string;
  /**
   * Specifies on which part of the plant this growth grows. This is defined with `GROWTH_HOST_TILE` key.
   * This can be unused, like in the case of crops where the plant is the growth (I think?).
   */
  hostTiles?: PlantPart[] | null;
  /**
   * Controls the height on the trunk above which the growth begins to appear.
   * The first value is the percent of the trunk height where the growth begins appearing:
   * 0 will cause it along the entire trunk (above the first tile), 100 will cause it to appear
   * at the topmost trunk tile. Can be larger than 100 to cause it to appear above the trunk.
   * The second value must be -1, but might be intended to control whether it starts height counting
   * from the bottom or top.
   */
  trunkHeightPercentage?: [number, number] | null;
  /**
   * Currently has no effect.
   */
  density?: number | null;
  /**
   * Specifies the appearance of the growth. This is defined with `GROWTH_PRINT` key.
   * This is a string until we make a proper print structure.
   */
  print?: string | null;
  /**
   * Specifies at which part of the year the growth appears. Default is all year round.
   * Minimum: 0, Maximum: `402_200`. This is defined with `GROWTH_TIMING` key.
   */
  timing?: [number, number] | null;
  /**
   * Where we gather some of the growth's tags.
   */
  tags?: GrowthTag[] | null;
};

/**
 * The growth tag of a plant
 */
export type GrowthTag =
  /**
   * The beginning of a growth tag
   */
  | "Growth"
  /**
   * The name of the growth
   */
  | "GrowthName"
  /**
   * The item from the growth
   */
  | "GrowthItem"
  /**
   * The host tile the growth grows on
   */
  | "GrowthHostTile"
  /**
   * The trunk height percent of the growth
   */
  | "GrowthTrunkHeightPercent"
  /**
   * The growth density
   */
  | "GrowthDensity"
  /**
   * The growth timing
   */
  | "GrowthTiming"
  /**
   * The growth print
   */
  | "GrowthPrint"
  /**
   * If the growth has a seed
   */
  | "GrowthHasSeed"
  /**
   * If the growth drops off the plant
   */
  | "GrowthDropsOff"
  /**
   * If the growth drops off the plant and there is no cloud
   */
  | "GrowthDropsOffNoCloud"
  /**
   * An unknown growth tag
   */
  | "Unknown";

/**
 * The types of growths
 */
export type GrowthType =
  /**
   * The growth is a leaf
   */
  | "Leaves"
  /**
   * The growth is a flower cluster
   */
  | "Spathes"
  /**
   * The growth is a fruit
   */
  | "Fruit"
  /**
   * The growth is a flower
   */
  | "Flowers"
  /**
   * The growth is a nut
   */
  | "Nut"
  /**
   * The growth is a seed catkin
   */
  | "SeedCatkins"
  /**
   * The growth is a pollen catkin
   */
  | "PollenCatkins"
  /**
   * The growth is a cone
   */
  | "Cone"
  /**
   * The growth is a seed cone
   */
  | "SeedCone"
  /**
   * The growth is a pollen cone
   */
  | "PollenCone"
  /**
   * The growth is a feather
   */
  | "Feathers"
  /**
   * The growth is an egg
   */
  | "Eggs"
  /**
   * The growth is a pod
   */
  | "Pod"
  /**
   * An unknown growth type
   */
  | "None";

/**
 * Parts of a plant
 */
export type PlantPart =
  /**
   * Twigs
   */
  | "Twigs"
  /**
   * Branches
   */
  | "Branches"
  /**
   * Branches and twigs
   */
  | "BranchesAndTwigs"
  /**
   * All branches and twigs
   */
  | "AllBranchesAndTwigs"
  /**
   * Heavy branches
   */
  | "HeavyBranches"
  /**
   * Heavy branches and twigs
   */
  | "HeavyBranchesAndTrunk"
  /**
   * Trunk
   */
  | "Trunk"
  /**
   * Roots
   */
  | "Roots"
  /**
   * Cap (canopy)
   */
  | "Cap"
  /**
   * Sapling
   */
  | "Sapling"
  /**
   * An unknown part of the plant
   */
  | "Unknown";

/**
 * Represents a position in the government of an entity
 */
export type Position = {
  identifier: string;
  allowedClasses?: string[] | null;
  allowedCreatures?: string[] | null;
  appointedBy?: string | null;
  color?: Color | null;
  commander?: string | null;
  demandMax?: number | null;
  executionSkill?: string | null;
  gender?: string | null;
  landHolder?: number | null;
  landName?: string | null;
  mandateMax?: number | null;
  name?: SingPlurName | null;
  nameMale?: SingPlurName | null;
  nameFemale?: SingPlurName | null;
  number?: number | null;
  precedence?: number | null;
  rejectedClasses?: string[] | null;
  rejectedCreatures?: string[] | null;
  replacedBy?: string | null;
  requiredBedroom?: number | null;
  requiredBoxes?: number | null;
  requiredCabinets?: number | null;
  requiredDining?: number | null;
  requiredOffice?: number | null;
  requiredRacks?: number | null;
  requiredStands?: number | null;
  requiredTomb?: number | null;
  requiresPopulation?: number | null;
  responsibilities?: string[] | null;
  spouse?: SingPlurName | null;
  spouseFemale?: SingPlurName | null;
  spouseMale?: SingPlurName | null;
  squad?: string | null;
  succession?: string | null;
  tags: PositionToken[];
};

/**
 * Represents a position token
 */
export type PositionToken =
  /**
   * The position holder is not subjected to the economy. Less than relevant right now.
   */
  | "AccountExempt"
  /**
   * Arguments: creature class token
   *
   * Only creatures with the specified class token can be appointed to this position. Multiple entries are allowed
   */
  | "AllowedClass"
  /**
   * Arguments: creature:caste token
   *
   * Restricts the position to only the defined caste. Only works with a caste of the entity's current race.
   * (If the entity had multiple CREATURE: tokens). Multiple entries are allowed
   */
  | "AllowedCreature"
  /**
   * Arguments: position
   *
   * This position can only be chosen for the task from the nobles screen, and is available only if there is an *argument* present.
   * For example, the `GENERAL` is `[APPOINTED_BY:MONARCH]`. Contrast `[ELECTED]`. Being appointed by a `MONARCH` seems to handle a lot of
   * worldgen stuff, and interferes with fort mode titles. Multiple entries are allowed. If you have neither an `ELECTED`-token nor a
   * `APPOINTED_BY`-token, the holder may always be changed (like the expedition leader)
   */
  | "AppointedBy"
  /**
   * A creature that kills a member of this position will be sure to talk about it a lot.
   */
  | "BragOnKill"
  /**
   * In adventure mode, when referencing locations, an NPC may mention this position holder living there or having done some
   * deed there, it also means that the position exists in world-gen, rather than being created only at the end of world-gen.
   *
   * Before 47.05, Dark Fortress civs cannot have this tag on anybody but their Law Maker, or the game will crash without
   * leaving an errorlog.
   */
  | "ChatWorthy"
  /**
   * Arguments: color:background:foreground
   *
   * Creatures of this position will have this color, instead of their profession color
   *
   * e.g. `[COLOR:5:0:1]`.
   */
  | "Color"
  /**
   * Arguments: position, 'ALL'
   *
   * This position will act as a commander of the specified position.
   *
   * E.g. GENERAL is `[COMMANDER:LIEUTENANT:ALL]`. Unknown if values other than ALL work. Multiple entries are allowed
   */
  | "Commander"
  /**
   * This position is a puppet ruler left behind in a conquered site.
   */
  | "ConqueredSite"
  /**
   * Arguments: number (0-`100`)
   *
   * How many demands the position can make of the population at one time.
   */
  | "DemandMax"
  /**
   * The site's (or civ's) minted coins, if any, will have images that reflect the personality of this position holder.
   */
  | "DeterminesCoinDesign"
  /**
   * The position won't be culled from Legends as "unimportant" during world generation.
   */
  | "DoNotCull"
  /**
   * Members of this position will never agree to 'join' your character during adventure mode.
   */
  | "DutyBound"
  /**
   * The population will periodically select the most skill-eligible creature to fill this position for site-level positions
   * at the player's fort. For responsibilities or positions that use more than one skill, no skill takes priority in electing
   * a creature: an accomplished comedian is more qualified for the TRADE responsibility than a skilled appraiser.
   * A creature may be elected to multiple positions at the same time. Contrast `[APPOINTED_BY]`. More info: Elections
   */
  | "Elected"
  /**
   * Arguments: weapon skill
   *
   * A mandatory sub-tag of `[RESPONSIBILITY:EXECUTIONS]`. Determines the weapon chosen by the executioner for their work.
   */
  | "ExecutionSkill"
  /**
   * The various members who have filled this role will be listed in the civilization's history.
   */
  | "ExportedInLegends"
  /**
   * The creature holding this position will visibly flash, like legendary citizens. Represents a properly noble station by default.
   */
  | "Flashes"
  /**
   * Arguments: 'MALE' or 'FEMALE'
   *
   * The position can only be held by the specified gender. Currently bugged Bug:2714
   */
  | "Gender"
  /**
   * The position can assign quests to adventurers.
   */
  | "KillQuest"
  /**
   * Arguments: importance tier (1-`10`)
   *
   * This is an alternative to `SITE`. What it does is allow positions to be created at civ-level 'as needed' for all sites that
   * meet the requirements to have them, which are the values set in `LAND_HOLDER_TRIGGER`. The character is tied permanently to
   * a particular site but also operates at the civ-level. Since 50* modded levels of higher than 3 are possible.
   */
  | "LandHolder"
  /**
   * Arguments: name (a string)
   *
   * The name the area takes on when under the control of a `LAND_HOLDER`.
   *
   * E.g. for the DUKE, `[LAND_NAME:a duchy]`.
   *
   * If the position is not a `LAND_HOLDER`, the `land_name` is still displayed left of the position in the nobles menu.
   */
  | "LandName"
  /**
   * Arguments: number (0-`100`)
   *
   * The maximum number of mandates the position can make at once.
   */
  | "MandateMax"
  /**
   * The position holder cannot be assigned labors. Currently nonfunctional.Bug:3721
   */
  | "MenialWorkExemption"
  /**
   * The spouse of the position holder doesn't have to work, either - see above.
   */
  | "MenialWorkExemptionSpouse"
  /**
   * This position cannot be appointed from the nobles screen. Intended for militia captains and other squad leaders to reduce clutter. Currently nonfunctionalBug:8965
   */
  | "MilitaryScreenOnly"
  /**
   * Arguments: `SingPlurName`
   *
   * The name of the position.
   */
  | "Name"
  /**
   * Arguments: `SingPlurName`
   *
   * If the creature holding the position is male, this is the position's name.
   *
   * E.g. for MONARCH, `[NAME_MALE:king:kings]`
   */
  | "NameMale"
  /**
   * Arguments: `SingPlurName`
   *
   * If the creature holding the position is female, this is the position's name.
   *
   * E.g. for MONARCH, `[NAME_FEMALE:queen:queens]`
   */
  | "NameFemale"
  /**
   * arguments: description
   *
   * Description of this position in the nobles screen.
   */
  | "Description"
  /**
   * Arguments: number or `AS_NEEDED`
   *
   * How many of the position there should be. If the `[SITE]` token exists, this is per site, otherwise this is per civilization.
   *
   * `AS_NEEDED` applies only to positions involved with the military command chain; this is used to allow armies to expand to
   * whatever size they need to be. Non-military positions with `NUMBER:AS_NEEDED` will not be appointed.
   * The problem with Lieutenants and Captains not been created, is their `AS_NEEDED` number.
   * They are only then created when the're needed, and that has some pretty unusual conditions.
   * When a fixed number is used, they are appointed with the creation of the civ.
   */
  | "Number"
  /**
   * Arguments: number (0 - `30_000`) or 'NONE'
   *
   * How important the position is in society; a lower number is more important and displayed higher in the Nobles menu.
   * For `MONARCH` it's 1, for `MILITIA_CAPTAIN` it's 200. The game just assumes that anything with `[PRECEDENCE:1]` is the ruler,
   * for both embark screen and mountain home purposes.
   *
   * A civ-position will also be created without precedence. Positions may have the same precedence and will be appointed,
   * although the effect is unknown.
   */
  | "Precedence"
  /**
   * The position holder will not be held accountable for his or her crimes. Currently nonfunctional.
   */
  | "PunishmentExemption"
  /**
   * The position holder can give quests in Adventure mode. Functionality in 0.31.13 and later is uncertain.
   */
  | "QuestGiver"
  /**
   * Arguments: creature class token
   *
   * Creatures of the specified class cannot be appointed to this position. Multiple entries are allowed
   */
  | "RejectedClass"
  /**
   * Arguments: `creature:caste` token
   *
   * Restricts position holders by `CREATURE` type. Multiple entries are allowed
   */
  | "RejectedCreature"
  /**
   * Arguments: position
   *
   * This position is absorbed by another down the line. For example, expedition leader is `[REPLACED_BY:MAYOR]`.
   * Only a single entry is allowed.
   */
  | "ReplacedBy"
  /**
   * Arguments: number (0 - `10_000_000`)
   *
   * The position holder requires a bedroom with at least this value.
   */
  | "RequiredBedroom"
  /**
   * Arguments: number (0 - `100`)
   *
   * The position holder requires at least this many boxes.
   */
  | "RequiredBoxes"
  /**
   * Arguments: number (0 - `100`)
   *
   * The position holder requires at least this many cabinets.
   */
  | "RequiredCabinets"
  /**
   * Arguments: number (0 - `10_000_000`)
   *
   * The position holder requires a dining room with at least this value.
   */
  | "RequiredDining"
  /**
   * Arguments: number (0 - `10_000_000`)
   *
   * The position holder requires an office with at least this value.
   */
  | "RequiredOffice"
  /**
   * Arguments: number (0 - `100`)
   *
   * The position holder requires at least this many weapon racks.
   */
  | "RequiredRacks"
  /**
   * Arguments: number (0 - `100`)
   *
   * The position holder requires at least this many armour stands.
   */
  | "RequiredStands"
  /**
   * Arguments: number (0 - `10_000_000`)
   *
   * The position holder requires a tomb with at least this value.
   */
  | "RequiredTomb"
  /**
   * Does not have anything directly to do with markets. It means that in minor sites (such as hillocks) the position will not
   * appear, while in major sites (such as dwarf fortresses) it will.
   */
  | "RequiresMarket"
  /**
   * Arguments: number
   *
   * The position requires the population to be at least this number before it becomes available, or before the position holder
   * will move in.
   */
  | "RequiresPopulation"
  /**
   * Arguments: responsibility
   *
   * The position holder does a thing. See the table below for suitable arguments.
   *
   * A position does not need to have a responsibility.
   */
  | "Responsibility"
  /**
   * If there is a special location set aside for rulers, such as a human castle/mead hall, the position holder will always be
   * found at that particular location. Does nothing for dwarven nobles, because at present, dwarves have no such special locations.
   */
  | "RulesFromLocation"
  /**
   * Every site government will have the defined number of this position instead of the whole civilization; provided that other
   * criteria (if any) are met. Unless `LAND_HOLDER` is present instead, the defined number of the position will be created only
   * for the civilization as a whole.
   */
  | "Site"
  /**
   * The position holder will get upset if someone with a higher `PRECEDENCE` holds quarters with a greater value than their own.
   */
  | "SleepPretension"
  /**
   * The civilization will inter the corpse of the position holder in a special grave, either in catacombs or in monuments.
   * If that grave is disturbed, the position holder can return as a mummy.
   */
  | "SpecialBurial"
  /**
   * Arguments: `SingPlurName`
   *
   * The name of the position holder's spouse.
   */
  | "Spouse"
  /**
   * Arguments: `SingPlurName`
   *
   * If the spouse of the creature holding the position is female, this is the spouse's position name.
   */
  | "SpouseFemale"
  /**
   * Arguments: `SingPlurName`
   *
   * If the spouse of the creature holding the position is male, this is the spouse's position name.
   */
  | "SpouseMale"
  /**
   * Arguments: `number:SingPlurName`
   *
   * The position holder is authorized to form a military squad, led by themselves using the leader and military tactics skills.
   * The number denotes the maximum headcount. The noun used to describe the subordinates (e.g. royal guard) is used in adventure
   * mode for the adventurer.
   */
  | "Squad"
  /**
   * Arguments: `BY_HEIR` or `BY_POSITION:position`
   *
   * How a new position holder is chosen. A single position can have multiple `BY_POSITION` tokens.
   * See Noble for more information on how succession is handled in the game.
   */
  | "Succession"
  /**
   * An uknow token.
   */
  | "Unknown";

/**
 * A struct representing a seed material
 */
export type SeedMaterial = {
  name: SingPlurName;
  color: Color;
  material: string;
};

/**
 * A struct representing a creature selection
 */
export type SelectCreature = {
  metadata?: Metadata | null;
  identifier: string;
  objectId: string;
  tags: string[];
};

/**
 * The rules for selecting a creature
 */
export type SelectRules =
  /**
   * Selects a previously defined caste
   */
  | { selectCaste: string }
  /**
   * Selects a locally defined material. Can be ALL.
   */
  | { selectMaterial: string }
  /**
   * Selects a tissue for editing.
   */
  | { selectTissue: string }
  /**
   * Adds an additional previously defined caste to the selection. Used after `[SELECT_CASTE]`.
   */
  | { selectAdditionalCaste: string };

/**
 * A shrub in the raws.
 */
export type Shrub = {
  /**
   * Allows the plant to grow in farm plots during the given season.
   * If the plant is a surface plant, allows it to grow in the wild during this season; wild surface plants without
   * this token will disappear at the beginning of the season. Underground plants grow wild in all seasons, regardless
   * of their season tokens.
   * Default: empty (plant will not grow in farm plots)
   */
  growingSeason?: SeasonToken[] | null;
  /**
   * How long the plant takes to grow to harvest in a farm plot. Unit hundreds of ticks.
   * There are 1008 GROWDUR units in a season. Defaults to 300.
   */
  growDuration?: number | null;
  /**
   * Has no known effect. Previously set the value of the harvested plant.
   */
  value?: number | null;
  /**
   * The tile used when the plant is harvested whole, or is ready to be picked from a farm plot. May either be a cp437
   * tile number, or a character between single quotes. See character table. Defaults to 231 (τ).
   */
  pickedTile?: number | null;
  /**
   * The tile used when a plant harvested whole has wilted. Defaults to 169 (⌐).
   */
  deadPickedTile?: number | null;
  /**
   * The tile used to represent this plant when it is wild, alive, and has no growths. Defaults to 34 (").
   */
  shrubTile?: number | null;
  /**
   * The tile used to represent this plant when it is dead in the wild. Defaults to 34 (").
   */
  deadShrubTile?: number | null;
  /**
   * The maximum stack size collected when gathered via herbalism (possibly also from farm plots?). Defaults to 5.
   */
  clusterSize?: number | null;
  /**
   * The color of the plant when it has been picked whole, or when it is ready for harvest in a farm plot. Defaults to 2:0:0 (dark green).
   */
  pickedColor?: Color | null;
  /**
   * The color of the plant when it has been picked whole, but has wilted. Defaults to 0:0:1 (dark gray).
   */
  deadPickedColor?: Color | null;
  /**
   * The color of the plant when it is alive, wild, and has no growths. Defaults to 2:0:0 (dark green).
   */
  shrubColor?: Color | null;
  /**
   * The color of the plant when it is dead in the wild. Defaults to 6:0:0 (brown).
   */
  deadShrubColor?: Color | null;
  /**
   * The shrub will drown once the water on its tile reaches this level. Defaults to 4.
   */
  shrubDrownLevel?: number | null;
  /**
   * Names a drink made from the plant, allowing it to be used in entity resources.
   * Previously also permitted brewing the plant into alcohol made of this material.
   * Now, a `MATERIAL_REACTION_PRODUCT` of type `DRINK_MAT` should be used on the proper plant material.
   */
  drink?: string | null;
  /**
   * Permits milling the plant at a quern or millstone into a powder made of this material and allows its use in entity resources.
   * Said material should have `[POWDER_MISC_PLANT]` to permit proper stockpiling. This token makes the whole plant harvestable regardless
   * of which material is designated for milling.
   * For plants with millable growths, use only `MATERIAL_REACTION_PRODUCT` or `ITEM_REACTION_PRODUCT` tokens to define the milling products.
   */
  mill?: string | null;
  /**
   * Permits processing the plant at a farmer's workshop to yield threads made of this material and allows its use in entity resources.
   * Said material should have `[THREAD_PLANT]` to permit proper stockpiling.
   */
  thread?: string | null;
  /**
   * Causes the plant to yield plantable seeds made of this material and having these properties.
   * Said material should have `[SEED_MAT]` to permit proper stockpiling.
   */
  seed?: SeedMaterial | null;
  /**
   * Permits processing the plant into a vial at a still to yield extract made of this material.
   * Said material should have `[EXTRACT_STORAGE:FLASK]`.
   */
  extractStillVial?: string | null;
  /**
   * Permits processing the plant into a vial at a farmer's workshop to yield extract made of this material.
   * Said material should have `[EXTRACT_STORAGE:VIAL]`.
   */
  extractVial?: string | null;
  /**
   * Permits processing the plant into a barrel at a farmer's workshop to yield extract made of this material.
   * Said material should have `[EXTRACT_STORAGE:BARREL]`.
   */
  extractBarrel?: string | null;
};

/**
 * The tokens for the seasons
 */
export type SeasonToken =
  /**
   * The spring season
   */
  | "Spring"
  /**
   * The summer season
   */
  | "Summer"
  /**
   * The autumn season
   */
  | "Autumn"
  /**
   * The winter season
   */
  | "Winter"
  /**
   * An unknown season
   */
  | "Unknown";

/**
 * The tokens for the shrubs
 */
export type ShrubToken =
  /**
   * The spring season
   */
  | "Spring"
  /**
   * The summer season
   */
  | "Summer"
  /**
   * The autumn season
   */
  | "Autumn"
  /**
   * The winter season
   */
  | "Winter"
  /**
   * The growth duration
   */
  | "GrowDuration"
  /**
   * The value of the shrub
   */
  | "Value"
  /**
   * The tile used for the shrub once it is picked
   */
  | "PickedTile"
  /**
   * The tile used for the shrub once it is dead and picked
   */
  | "DeadPickedTile"
  /**
   * The tile used for the shrub
   */
  | "ShrubTile"
  /**
   * The tile used for the dead shrub
   */
  | "DeadShrubTile"
  /**
   * The cluster size the shrubs will spawn in
   */
  | "ClusterSize"
  /**
   * The color of the shrub once it is picked
   */
  | "PickedColor"
  /**
   * The color of the shrub once it is dead and picked
   */
  | "DeadPickedColor"
  /**
   * The color of the shrub
   */
  | "ShrubColor"
  /**
   * The color of the dead shrub
   */
  | "DeadShrubColor"
  /**
   * The depth level the shrub will drown at
   */
  | "ShrubDrownLevel"
  /**
   * The shrub can be brewed
   */
  | "Drink"
  /**
   * The shrub can be milled
   */
  | "Mill"
  /**
   * The shrub can be spun
   */
  | "Thread"
  /**
   * The shrub has seeds
   */
  | "Seed"
  /**
   * The shrub can have a liquid extracted from it using a still and vial
   */
  | "ExtractStillVial"
  /**
   * The shrub can have a liquid extracted from it using a vial alone
   */
  | "ExtractVial"
  /**
   * The shrub can have a liquid extracted from it using a barrel
   */
  | "ExtractBarrel"
  /**
   * An unknown token
   */
  | "Unknown";

/**
 * A struct representing a syndrome
 */
export type Syndrome = {
  /**
   * Seen the `[SYN_IDENTIFIER:INEBRIATION]` tag in `material_templates.txt`
   */
  identifier?: string | null;
  name?: string | null;
  affectedClasses?: string[] | null;
  immuneClasses?: string[] | null;
  affectedCreatures?: [string, string][] | null;
  immuneCreatures?: [string, string][] | null;
  classes?: string[] | null;
  /**
   * Seen the `[SYN_CONCENTRATION_ADDED:100:1000]` tag in `material_templates.txt`
   * default is 0:0
   */
  concentrationAdded?: [number, number] | null;
  tags?: SyndromeToken[] | null;
  conditions?: string[] | null;
};

/**
 * Represents the tokens that can be used in a syndrome definition.
 */
export type SyndromeToken =
  /**
   * Used to specify the name of the syndrome as it appears in-game. Names don't have to be unique;
   * It's perfectly acceptable to have multiple syndromes with identical names.
   */
  | "Name"
  /**
   * Can be included to create a syndrome class and assign the syndrome to it, for use with the `IT_CANNOT_HAVE_SYNDROME_CLASS`
   * interaction token. Can be specified more than once to assign the syndrome to multiple classes.
   *
   * Other syndromes can also be assigned to the same class.
   */
  | "Class"
  /**
   * If the syndrome is tied to a material, the injection of this material into a creature's bloodstream will cause it to contract
   * the syndrome if this token is included. Injection can be carried out as part of a creature attack via `SPECIALATTACK_INJECT_EXTRACT`,
   * or by piercing the flesh of a creature with an item that has been contaminated with the material. Thus, this token can be used as a
   * more specific alternative to `SYN_CONTACT` for syndromes intended to be administered by envenomed weapons.
   */
  | "Injected"
  /**
   * If the syndrome is tied to a material, creatures who come into contact with this material will contract the syndrome
   * if this token is included in the syndrome definition. Methods of getting a material contaminant onto a creature's body include:
   * - secretions
   * - liquid projectiles
   * - vapor and dust clouds
   * - puddles and dust piles
   * - freakish rain
   * - unprotected contact with an infected creature (punching/wrestling/colliding)
   * - equipped or hauled items melting
   * - being struck with a contaminated item
   */
  | "Contact"
  /**
   * If the syndrome is tied to a material, creatures who inhale the material will contract the syndrome if this token is included.
   * Materials can only be inhaled in their gaseous state, which is attainable by boiling, or in the form of a `TRAILING_GAS_FLOW`,
   * `UNDIRECTED_GAS` or `WEATHER_CREEPING_GAS`. Creatures can also be made to leak gaseous tissue when damaged.
   */
  | "Inhaled"
  /**
   * If the syndrome is tied to a material, creatures who eat or drink substances comprising, containing or contaminated with this
   * material will contract the syndrome if this token is included. This includes prepared meals when any of the constituent
   * ingredients contains the material in question.
   *
   * This also applies to grazing creatures which happen to munch on a grass that has an ingestion-triggered syndrome tied to any of
   * its constituent materials.
   */
  | "Ingested"
  /**
   * If this is included, only creatures which belong to the specified creature class (as well as creatures which pass the
   * `SYN_AFFECTED_CREATURE` check if this is included) will be able to contract the syndrome. This token can be specified multiple times
   * per syndrome, in which case creatures which have at least one matching class will be considered susceptible.
   *
   * If `SYN_IMMUNE_CLASS` and/or `SYN_IMMUNE_CREATURE` are included, creatures which fail these checks will be unable to contract the syndrome
   * even if they pass this class check.
   */
  | "AffectedClass"
  /**
   * If this is included, creatures which belong to the specified creature class will be unable to contract the syndrome. This token can be
   * specified multiple times per syndrome, in which case creatures with at least one matching class will be considered immune
   * (unless overridden by `SYN_AFFECTED_CREATURE`).
   */
  | "ImmuneClass"
  /**
   * If this is included, only the specified creature (and, if `SYN_AFFECTED_CLASS` is included, also creatures which pass this check as explained above)
   * will be able to contract the syndrome. This token can be used multiple times per syndrome. If used alongside `SYN_IMMUNE_CLASS`, the specified
   * creature will be able to contract the syndrome regardless of this class check.
   *
   * `DWARF:FEMALE` is an example of a valid `creature:caste` combination.
   *
   * `ALL` can be used in place of a specific caste so as to indicate that this applies to all castes of the specified creature.
   */
  | "AffectedCreature"
  /**
   * If this is included, the specified creature will be unable to contract the syndrome (even if it matches `SYN_AFFECTED_CLASS`).
   * It can be specified multiple times per syndrome. As above, `ALL` can be used in place of a specific caste.
   */
  | "ImmuneCreature"
  /**
   * Syndrome concentration is essentially a quantity which impacts the severity of the syndrome's relevant effects. The higher the syndrome's concentration,
   * the greater its severity. When a syndrome is contracted, the value specified in `amount` is its initial concentration level.
   *
   * As described above, if a creature is exposed to a syndrome with a particular `SYN_IDENTIFIER` when already possessing an active syndrome with the same identifier,
   * then this later syndrome isn't contracted, instead contributing to the original syndrome's concentration as indicated by its `SYN_CONCENTRATION_ADDED` token, if present.
   * The syndrome in question will increase the original syndrome's concentration by `amount` whenever the creature is exposed to it, until its specified `max` concentration
   * is reached by the original syndrome, causing subsequent exposure to this particular syndrome to do nothing (that is, until the original syndrome ends, at which point
   * a new one may be contracted normally). Should the creature be exposed to a different syndrome with the same identifier and a higher `max` value, the concentration will
   * of course increase further.
   *
   * Example: `SYN_CONCENTRATION_ADDED:amount:max`
   */
  | "ConcentrationAdded"
  /**
   * Prevents creatures from being admitted to hospital for problems arising directly as a result of the syndrome's effects, no matter how bad they get.
   */
  | "NoHospital"
  /**
   * This token can be included to give a syndrome an identifier which can be shared between multiple syndromes. Only one identifier may be specified per syndrome.
   *
   * Syndrome identifiers can be used in conjunction with the `SYNDROME_DILUTION_FACTOR` creature token to alter a creature’s innate resistance to the relevant
   * effects of any syndromes that possess the specified identifier. For example, every alcoholic beverage in unmodded games comes with its own copy of an intoxicating
   * syndrome, each of which has a `[SYN_IDENTIFIER:INEBRIATION]` token. All dwarves have `[SYNDROME_DILUTION_FACTOR:INEBRIATION:150]`, which decreases the severity of
   * any effects derived from a syndrome with the INEBRIATION identifier, thus enabling them to better handle all forms of alcohol.
   */
  | "Identifier"
  /**
   * Unknown as default.
   */
  | "Unknown";

/**
 * A struct representing a tree.
 */
export type Tree = {
  /**
   * Tree will yield logs made of that material. Instead, if it's `[TREE:NONE]`, no logs will result.
   * Materials are typically found in other raws..
   */
  material: string;
  /**
   * What the trunk of the tree is named
   */
  trunkName?: Name | null;
  /**
   * The maximum z-level height of the trunk, starting from +2 z-levels above the ground.
   * Valid values: 1-8
   * Default: 1
   */
  maxTrunkHeight?: number | null;
  /**
   * Upper limit of trunk thickness, in tiles. Has a geometric effect on log yield.
   * Valid values: 1-3
   * Default: 1
   */
  maxTrunkDiameter?: number | null;
  /**
   * The number of years the trunk takes to grow one z-level upward. Default: 1
   */
  trunkPeriod?: number | null;
  /**
   * The number of years the trunk takes to grow one tile wider. Default: 1
   */
  trunkWidthPeriod?: number | null;
  /**
   * What thin branches of the tree are named.
   */
  branchName?: Name | null;
  /**
   * How dense the branches grow on this tree.
   */
  branchDensity?: number | null;
  /**
   * The radius to which branches can reach. Appears to never reach further than seven tiles from the centre.
   * Does not depend on the trunk branching amount or where trunks are.
   * The values used in the game go from 0-3. Higher values than that can cause crashes.
   */
  branchRadius?: number | null;
  /**
   * What thick branches of the tree are named.
   */
  heavyBranchesName?: Name | null;
  /**
   * Similar to `BRANCH_DENSITY` for thick branches. Default: 0
   */
  heavyBranchDensity?: number | null;
  /**
   * Similar as `BRANCH_DENSITY` for thick branches. Values outside 0-3 can cause crashes. Default: 0
   */
  heavyBranchRadius?: number | null;
  /**
   * How much the trunk branches out. 0 makes the trunk straight (default)
   */
  trunkBranching?: number | null;
  /**
   * What the roots of the tree are named.
   */
  rootName?: Name | null;
  /**
   * Density of the root growth. Defaults to 0.
   */
  rootDensity?: number | null;
  /**
   * How wide the roots reach out. Defaults to 0.
   */
  rootRadius?: number | null;
  /**
   * What the twigs of the tree are named.
   */
  twigsName?: Name | null;
  /**
   * Where twigs appear, defaults to `[SideBranches, AboveBranches]`
   */
  twigsPlacement?: TwigPlacement[] | null;
  /**
   * What this mushroom-cap is called. Only makes sense with `TREE_HAS_MUSHROOM_CAP`.
   */
  capName?: Name | null;
  /**
   * Similar to the other PERIOD tags, influences the rate of the mushroom cap growth. Only makes sense with `TREE_HAS_MUSHROOM_CAP`. Default: 1
   */
  capPeriod?: number | null;
  /**
   * The radius of a mushroom cap. Only makes sense with `TREE_HAS_MUSHROOM_CAP`. Default: 0
   */
  capRadius?: number | null;
  /**
   * The tile used for trees of this type on the world map. Defaults to 24 (↑).
   */
  treeTile?: string | null;
  /**
   * The tile used for (un)dead trees and deciduous trees (generally in winter) of this type. Defaults to 198 (╞).
   */
  deadTreeTile?: string | null;
  /**
   * The tile used for saplings of this tree. Defaults to 231 (τ).
   */
  saplingTile?: string | null;
  /**
   * The tile used for dead saplings of this tree. Defaults to 231 (τ).
   */
  deadSaplingTile?: string | null;
  /**
   * The color of the tree on the map. Defaults to 2:0:0 (dark green).
   */
  treeColor?: Color | null;
  /**
   * The color of the tree on the map when (un)dead. Defaults to 0:0:1 (dark gray).
   */
  deadTreeColor?: Color | null;
  /**
   * The color of saplings of this tree. Defaults to 2:0:0 (dark green).
   */
  saplingColor?: Color | null;
  /**
   * The color of dead saplings of this tree. Defaults to 0:0:1 (dark gray).
   */
  deadSaplingColor?: Color | null;
  /**
   * The sapling of this tree will drown once the water on its tile reaches this level. Defaults to 4.
   */
  saplingDrownLevel?: number | null;
  /**
   * The water depth at which this tree will drown. Exact behavior is unknown. Defaults to 7.
   */
  treeDrownLevel?: number | null;
  /**
   * Token tags for the tree.
   */
  tags?: TreeToken[] | null;
};

/**
 * The tokens for the tree parser
 */
export type TreeToken =
  /**
   * A tree
   */
  | "Tree"
  /**
   * The name of the tree
   */
  | "TrunkName"
  /**
   * The maximum height of the trunk
   */
  | "MaxTrunkHeight"
  /**
   * The maximum diameter of the trunk
   */
  | "MaxTrunkDiameter"
  /**
   * The period of the trunk
   */
  | "TrunkPeriod"
  /**
   * The period of the trunk width
   */
  | "TrunkWidthPeriod"
  /**
   * The name of the branches
   */
  | "BranchName"
  /**
   * The density of the branches
   */
  | "BranchDensity"
  /**
   * The radius of the branches
   */
  | "BranchRadius"
  /**
   * The name of the heavy branches
   */
  | "HeavyBranchesName"
  /**
   * The density of the heavy branches
   */
  | "HeavyBranchDensity"
  /**
   * The radius of the heavy branches
   */
  | "HeavyBranchRadius"
  /**
   * The branching of the heavy branches
   */
  | "TrunkBranching"
  /**
   * The name of the roots
   */
  | "RootName"
  /**
   * The density of the roots
   */
  | "RootDensity"
  /**
   * The radius of the roots
   */
  | "RootRadius"
  /**
   * The name of the twigs
   */
  | "TwigsName"
  /**
   * Twigs are placed on the side of the branches
   */
  | "TwigsSideBranches"
  /**
   * Twigs are placed above the branches
   */
  | "TwigsAboveBranches"
  /**
   * Twigs are placed below the branches
   */
  | "TwigsBelowBranches"
  /**
   * Twigs are placed on the side of heavy branches
   */
  | "TwigsSideHeavyBranches"
  /**
   * Twigs are placed above heavy branches
   */
  | "TwigsAboveHeavyBranches"
  /**
   * Twigs are placed below heavy branches
   */
  | "TwigsBelowHeavyBranches"
  /**
   * Twigs are placed on the side of the trunk
   */
  | "TwigsSideTrunk"
  /**
   * Twigs are placed above the trunk
   */
  | "TwigsAboveTrunk"
  /**
   * Twigs are placed below the trunk
   */
  | "TwigsBelowTrunk"
  /**
   * The name of the tree canopy
   */
  | "CapName"
  /**
   * The period of the tree canopy
   */
  | "CapPeriod"
  /**
   * The radius of the tree canopy
   */
  | "CapRadius"
  /**
   * The tile to use for the tree
   */
  | "TreeTile"
  /**
   * The tile to use for a dead tree
   */
  | "DeadTreeTile"
  /**
   * The tile to use for a sapling
   */
  | "SaplingTile"
  /**
   * The tile to use for a dead sapling
   */
  | "DeadSaplingTile"
  /**
   * The color of the tree
   */
  | "TreeColor"
  /**
   * The color of a dead tree
   */
  | "DeadTreeColor"
  /**
   * The color of a sapling
   */
  | "SaplingColor"
  /**
   * The color of a dead sapling
   */
  | "DeadSaplingColor"
  /**
   * The level at which the spling will drown (in water)
   */
  | "SaplingDrownLevel"
  /**
   * The level at which the tree will drown (in water)
   */
  | "TreeDrownLevel"
  /**
   * The tree has a rounded cap-hood like a giant mushroom. This severely stunts a tree's maximum height (known bug)
   */
  | "TreeHasMushroomCap"
  /**
   * Uses the standard names for the tree components (roots, trunk, branches, etc.)
   */
  | "StandardTileNames"
  /**
   * Makes young versions of the tree be called "[tree name] sapling"; otherwise, they are called "young [tree name]".
   */
  | "Sapling"
  /**
   * An unknown tree token
   */
  | "Unknown";

/**
 * The placement of twigs on a tree
 */
export type TwigPlacement =
  /**
   * Twigs are placed on the side of the tree
   */
  | "SideBranches"
  /**
   * Twigs are placed above the tree
   */
  | "AboveBranches"
  /**
   * Twigs are placed below the tree
   */
  | "BelowBranches"
  /**
   * Twigs are placed on the side of heavy branches
   */
  | "SideHeavyBranches"
  /**
   * Twigs are placed above heavy branches
   */
  | "AboveHeavyBranches"
  /**
   * Twigs are placed below heavy branches
   */
  | "BelowHeavyBranches"
  /**
   * Twigs are placed on the side of the trunk
   */
  | "SideTrunk"
  /**
   * Twigs are placed above the trunk
   */
  | "AboveTrunk"
  /**
   * Twigs are placed below the trunk
   */
  | "BelowTrunk"
  /**
   * An unknown twig placement
   */
  | "Unknown";

/**
 * An unprocessed raw object
 */
export type UnprocessedRaw = {
  /**
   * The raw type of the object. This is to tell us what to parse it into.
   */
  rawType: ObjectType;
  /**
   * The modifications to apply to the object.
   *
   * Allows us to handle parsing advanced things like
   *
   * * `COPY_TAGS_FROM` tag
   * * `APPLY_CREATURE_VARIATION` tag
   * * `GO_TO_TAG:tag` raw instruction
   * * `GO_TO_END` and `GO_TO_START` raw instructions
   * * (and includes the raws themselves under `MainRawBody`)
   *
   * So when the raws are parsed from this into the actual object, we can apply these modifications
   * in order to get the final object.
   */
  modifications: Modification[];
  /**
   * Metadata to be passed on to the final object
   */
  metadata: Metadata;
  /**
   * Identifier of the object
   */
  identifier: string;
};

/**
 * A struct representing a modification to a creature
 */
export type Modification =
  /**
   * `COPY_TAGS_FROM` tag
   */
  | {
      copyTagsFrom: {
        /**
         * The creature to copy tags from
         */
        identifier: string;
      };
    }
  /**
   * `APPLY_CREATURE_VARIATION` tag
   */
  | {
      applyCreatureVariation: {
        /**
         * The creature to apply the variation from
         */
        identifier: string;
      };
    }
  /**
   * Follows `GO_TO_END` until `GO_TO_START` or object definition finishes
   *
   * When using tags from an existing creature, inserts new tags at the end of the creature.
   */
  | {
      addToEnding: {
        /**
         * The set of raws to add to the end of the object
         *
         * This should be the entire raw in order to apply.
         */
        raws: string[];
      };
    }
  /**
   * Follows `GO_TO_START` until `GO_TO_END` or object definition finishes
   *
   * When using tags from an existing creature, inserts new tags at the beginning of the creature.
   */
  | {
      addToBeginning: {
        /**
         * The set of raws to add to the beginning of the object
         *
         * This should be the entire raw in order to apply.
         */
        raws: string[];
      };
    }
  /**
   * `GO_TO_TAG:tag` raw instruction
   *
   * When using tags from an existing creature, inserts new tags before the specified tag.
   */
  | {
      addBeforeTag: {
        /**
         * The tag to insert before
         *
         * Since we don't actually know the tag order after parsing, this will be ignored in parsing, and
         * instead will just apply the raws...
         */
        tag: string;
        /**
         * The set of raws to add before the tag
         *
         * This should be the entire raw in order to apply.
         */
        raws: string[];
      };
    }
  /**
   * The main body of the object
   */
  | {
      mainRawBody: {
        /**
         * The set of raws that make up the object. This is usually defined first unless
         * its specified to be added to the end or beginning (or before a tag)
         *
         * This should be the entire raw in order to apply.
         */
        raws: string[];
      };
    };

/**
 * Represents the specific yield, fracture, and elasticity of a material for the various
 * types of mechanical stress.
 */
export type MaterialMechanics = {
  impact?: MechanicalProperties | null;
  compressive?: MechanicalProperties | null;
  tensile?: MechanicalProperties | null;
  torsion?: MechanicalProperties | null;
  shear?: MechanicalProperties | null;
  bending?: MechanicalProperties | null;
  maxEdge?: number | null;
  solidDensity?: number | null;
};

/**
 * The `RawMetadata` struct represents metadata about a raw module in Rust, including its name,
 * version, file path, identifier, object type, module location, and visibility status.
 *
 * Properties:
 *
 * * `module_name`: The name of the raw module the raw is from.
 * * `module_version`: The version of the raw module the raw is from.
 * * `raw_file_path`: The `raw_file_path` property is a string that represents the path to the file
 * containing the raw data. It specifies the location of the file on the file system.
 * * `raw_identifier`: The raw identifier is a unique identifier for the raw data. It is typically
 * found at the top of the raw text file and is used to identify and reference the specific raw data.
 * * `object_type`: The `object_type` property represents the type of the raw data. It could be a
 * creature, plant, or any other type specified in the raw text file.
 * * `raw_module_location`: The `raw_module_location` property represents the location of the owning
 * raw module. It can have one of the following values:
 *
 * - `RawModuleLocation::InstalledMods`: The raw module is located in the `installed_mods` folder.
 * - `RawModuleLocation::Mods`: The raw module is located in the `mods` folder.
 * - `RawModuleLocation::Vanilla`: The raw module is located in the `vanilla` folder.
 *
 * * `hidden`: The `hidden` property is a boolean value that indicates whether the raw metadata should
 * be hidden or not when exporting. By default, it is set to `true`, meaning that the raw metadata will
 * be hidden unless specified in the `ParsingOptions` struct.
 */
export type Metadata = {
  moduleObjectId: string;
  moduleName: string;
  moduleVersion: string;
  rawFilePath: string;
  rawIdentifier: string;
  objectType: ObjectType;
  rawModuleLocation: RawModuleLocation;
};

/**
 * Represents the `info.txt` file for a raw module
 */
export type InfoFile = {
  identifier: string;
  objectId: string;
  location: RawModuleLocation;
  parentDirectory: string;
  numericVersion: number;
  displayedVersion: string;
  earliestCompatibleNumericVersion: number;
  earliestCompatibleDisplayedVersion: string;
  author: string;
  name: string;
  description: string;
  requiresIds?: string[] | null;
  conflictsWithIds?: string[] | null;
  requiresIdsBefore?: string[] | null;
  requiresIdsAfter?: string[] | null;
  steamData?: SteamData | null;
};

/**
 * The additional data specific to the steam workshop
 */
export type SteamData = {
  title?: string | null;
  description?: string | null;
  tags?: string[] | null;
  keyValueTags?: string[] | null;
  metadata?: string[] | null;
  changelog?: string | null;
  fileId: string;
};

/**
 * Represents the name of a materials 3 states (solid, liquid, gas)
 */
export type StateName = { solid: string; liquid: string; gas: string };

/**
 * Represents the mechanical properties of a material via the yield, fracture, and elasticity
 */
export type MechanicalProperties = {
  yield: number;
  fracture: number;
  elasticity: number;
};

/**
 * A name with a singular, plural, and adjective form
 */
export type Name = { singular: string; plural: string; adjective: string };

/**
 * The name of a raw object with only singular and plural forms
 */
export type SingPlurName = { singular: string; plural: string };

/**
 * The object types that can be parsed by the parser.
 */
export type ObjectType =
  /**
   * A creature
   */
  | "Creature"
  /**
   * An inorganic material
   */
  | "Inorganic"
  /**
   * A plant
   */
  | "Plant"
  /**
   * An item
   */
  | "Item"
  /**
   * An item of type ammo
   */
  | "ItemAmmo"
  /**
   * An item of type armor
   */
  | "ItemArmor"
  /**
   * An item of type food
   */
  | "ItemFood"
  /**
   * An item of type gloves
   */
  | "ItemGloves"
  /**
   * An item of type helm
   */
  | "ItemHelm"
  /**
   * An item of type instrument
   */
  | "ItemInstrument"
  /**
   * An item of type pants
   */
  | "ItemPants"
  /**
   * An item of type shield
   */
  | "ItemShield"
  /**
   * An item of type shoes
   */
  | "ItemShoes"
  /**
   * An item of type siege ammo
   */
  | "ItemSiegeAmmo"
  /**
   * An item of type tool
   */
  | "ItemTool"
  /**
   * An item of type toy
   */
  | "ItemToy"
  /**
   * An item of type trap component
   */
  | "ItemTrapComponent"
  /**
   * An item of type weapon
   */
  | "ItemWeapon"
  /**
   * A building
   */
  | "Building"
  /**
   * A workshop building
   */
  | "BuildingWorkshop"
  /**
   * A furnace building
   */
  | "BuildingFurnace"
  /**
   * A reaction
   */
  | "Reaction"
  /**
   * Graphics
   */
  | "Graphics"
  /**
   * A material template
   */
  | "MaterialTemplate"
  /**
   * A body detail plan
   */
  | "BodyDetailPlan"
  /**
   * A body
   */
  | "Body"
  /**
   * An entity
   */
  | "Entity"
  /**
   * A language
   */
  | "Language"
  /**
   * A translation
   */
  | "Translation"
  /**
   * A tissue template
   */
  | "TissueTemplate"
  /**
   * A creature variation
   */
  | "CreatureVariation"
  /**
   * A text set
   */
  | "TextSet"
  /**
   * A tile page
   */
  | "TilePage"
  /**
   * A descriptor color
   */
  | "DescriptorColor"
  /**
   * A descriptor pattern
   */
  | "DescriptorPattern"
  /**
   * A descriptor shape
   */
  | "DescriptorShape"
  /**
   * A palette
   */
  | "Palette"
  /**
   * Music
   */
  | "Music"
  /**
   * Sound
   */
  | "Sound"
  /**
   * An interaction
   */
  | "Interaction"
  /**
   * An unknown object type
   */
  | "Unknown"
  /**
   * `SelectCreature` tag
   */
  | "SelectCreature"
  /**
   * A creature caste
   */
  | "CreatureCaste";

/**
 * Raws are part of modules since 50.xx. Raw modules are loaded from 3 common locations:
 * `{df_directory}/data/vanilla`, `{df_directory}/mods`, and `{df_directory/data/installed_mods}`
 */
export type RawModuleLocation =
  /**
   * The "installed" mods directory
   */
  | "InstalledMods"
  /**
   * The "downloaded" mods directory
   */
  | "Mods"
  /**
   * The vanilla data file location
   */
  | "Vanilla"
  /**
   * An unknown location
   */
  | "Unknown"
  /**
   * Used for handling legends exported files
   */
  | "LegendsExport";

/**
 * A struct representing a body size in the format `years:days:size_cm3`
 */
export type BodySize = { years: number; days: number; sizeCm3: number };

/**
 * A struct representing a color in the format "foreground:background:brightness".
 */
export type Color = {
  foreground: number;
  background: number;
  brightness: number;
};

/**
 * How often a creature can be milked and what material it produces
 */
export type Milkable = { material: string; frequency: number };

/**
 * The temperature properties of a material
 */
export type Temperatures = {
  /**
   * This determines how long it takes the material to heat up or cool down.
   * A material with a high specific heat capacity will hold more heat and affect its surroundings more
   * before cooling down or heating up to equilibrium. The input for this token is not temperature,
   * but rather the specific heat capacity of the material.
   */
  specificHeat?: number | null;
  /**
   * This is the temperature at which the material will catch fire.
   */
  ignitionPoint?: number | null;
  /**
   * This is the temperature at which a liquid material will freeze, or a solid material will melt.
   * In Dwarf Fortress the melting point and freezing point coincide exactly; this is contrary to many
   * real-life materials, which can be supercooled.
   */
  meltingPoint?: number | null;
  /**
   * This is the temperature at which the material will boil or condense. Water boils at 10180 °U
   */
  boilingPoint?: number | null;
  /**
   * This is the temperature above which the material will begin to take heat damage.
   * Burning items without a heat damage point (or with an exceptionally high one) will take damage very slowly,
   * causing them to burn for a very long time (9 months and 16.8 days) before disappearing.
   */
  heatDamagePoint?: number | null;
  /**
   * This is the temperature below which the material will begin to take frost damage.
   */
  coldDamagePoint?: number | null;
  /**
   * A material's temperature can be forced to always be a certain value via the `MAT_FIXED_TEMP`
   * material definition token. The only standard material which uses this is nether-cap wood,
   * whose temperature is always at the melting point of water. If a material's temperature is fixed
   * to between its cold damage point and its heat damage point, then items made from that material
   * will never suffer cold/heat damage. This makes nether-caps fire-safe and magma-safe despite being a type of wood.
   */
  materialFixedTemperature?: number | null;
};

/**
 * Representation of a character tile (literally a single character) that is used in DF Classic
 */
export type Tile = {
  character: string;
  altCharacter?: string | null;
  color?: Color | null;
  glowCharacter?: string | null;
  glowColor?: Color | null;
};

/**
 * A struct representing a Dimensions object.
 */
export type Dimensions = { x: number; y: number };

/**
 * A custom graphic extension.
 */
export type CustomGraphicExtension = {
  extensionType: GraphicType;
  tilePageId?: string | null;
  value1?: number | null;
  value2?: number | null;
};

/**
 * # Parsing Options
 *
 * Specify what to parse and where to parse it from.
 *
 * ## Parsing `info.txt` vs the raw files
 *
 * There are two main parsing functions: `parse` and `parse_module_info_files`.
 *
 * Both use the same options struct, but they use it in different ways.
 *
 * When calling `parse`, the `ParserOptions` struct is used to specify what raws to parse and where to parse them from.
 * Any specified `raw_modules_to_parse` will not be parsed in the `parse` function, and the only items parsed in the
 * `parse_module_info_files` function are the `module_info_files_to_parse`.
 *
 * ## Example
 *
 * ```rust
 * use std::path::PathBuf;
 * use dfraw_json_parser::{ParserOptions, RawObject, ObjectType, RawModuleLocation};
 *
 * let mut options = ParserOptions::new("path/to/dwarf_fortress");
 * options.add_location_to_parse(RawModuleLocation::Vanilla);
 * // Clear the default object types
 * options.set_object_types_to_parse(vec![]);
 * // Add back in the ones we want
 * options.add_object_type_to_parse(ObjectType::Creature);
 * options.add_object_type_to_parse(ObjectType::CreatureVariation);
 * // Include the metadata with the parsed raws
 * options.attach_metadata_to_raws();
 *
 * // Parse the raws and info.txt files (not parsing here because the path is invalid)
 * // let parsed_raws = dfraw_json_parser::parse(&options);
 * ```
 *
 */
export type ParserOptions = {
  /**
   * Whether to attach a metadata field to the raws.
   * If true, all raws will have a `metadata` field which shows information about the
   * raw file, its path, its module, and its parent directory.
   *
   * Default: false.
   */
  attachMetadataToRaws: boolean;
  /**
   * Whether to skip the "copy tags from" resolution step.
   * If true, the creature will have a populated `copy_tags_from` field instead.
   *
   * Default: false.
   */
  skipApplyCopyTagsFrom: boolean;
  /**
   * Whether to skip the apply "creature variations" resolution step.
   * When this is true, it will just leave the variations attached to the creature
   * in a `creature_variations` field.
   * If false, it will modify the creature data to include the variations.
   *
   * Note: This is currently not implemented.
   *
   * Default: false.
   */
  skipApplyCreatureVariations: boolean;
  /**
   * What types of raws to parse. If this is left empty, all parsable raws will be parsed.
   *
   * Default: `[Creature, CreatureVariation, Entity, Plant, Inorganic, MaterialTemplate, Graphics, TilePage]`
   */
  objectTypesToParse: ObjectType[];
  /**
   * What locations to parse raws from. If this is left empty, no locations will be parsed.
   *
   * Setting locations to parse requires a valid `dwarf_fortress_directory` to be set.
   *
   * Default: None
   */
  locationsToParse: RawModuleLocation[];
  /**
   * The path to the dwarf fortress directory. If no locations are specified, then this is not used.
   *
   * This is not used when parsing specific raws, modules, info files, or legends exports as specified by
   * `raw_files_to_parse`, `raw_modules_to_parse`, `module_info_files_to_parse`, or `legends_exports_to_parse`.
   *
   * Default: ""
   */
  dwarfFortressDirectory: string;
  /**
   * Optionally specify one or more `legends_plus` exports to parse in addition to the raws.
   * These exports include information about generated creatures which are not included in the
   * raws.
   *
   * Default: None
   */
  legendsExportsToParse: string[];
  /**
   * Optionally specify one or more raw files to parse directly. These should be the raw files
   * themselves, not the containing directory.
   *
   * (e.g. `creature_standard.txt` in `data/vanilla/vanilla_creatures/objects/`)
   *
   * Note that these will be parsed in addition to the raws in the specified locations in the other
   * options. That means that if you specify a raw file that is also in the vanilla raws, it will
   * be parsed twice (if vanilla is in the locations to parse).
   *
   * Default: None
   */
  rawFilesToParse: string[];
  /**
   * Optionally specify one or more raw modules to parse directly. These should be the module
   * directories, not the info.txt file.
   *
   * (e.g. `vanilla_creatures` in `data/vanilla/`)
   *
   * Note that these will be parsed in addition to the raws in the specified locations in the other
   * options. That means that if you specify a module that is also in the vanilla raws, it will
   * be parsed twice (if vanilla is in the locations to parse).
   *
   * Default: None
   */
  rawModulesToParse: string[];
  /**
   * Optionally specify one or more module info files to parse directly. These should be the info.txt
   * files themselves, not the containing directory.
   *
   * (e.g. `info.txt` in `data/vanilla/vanilla_creatures/`)
   *
   * Note that if you are calling the `parse` function, this will be ignored. This is only used
   * when calling the `parse_module_info_files` function.
   */
  moduleInfoFilesToParse: string[];
  /**
   * Include a summary of what was parsed in the log.
   *
   * If running with `tauri`, this will emit a `PARSE_SUMMARY` event with the summary as well.
   *
   * Default: false
   */
  logSummary: boolean;
};

/**
 * Details about the current file being parsed, specifically where and what it is.
 */
export type ProgressDetails = {
  /**
   * The current module location (only for stuff parsed via a specified location, otherwise is `RawModuleLocation::Unknown`)
   */
  location: RawModuleLocation;
  /**
   * The module the current file is in (if any)
   */
  module: string | null;
  /**
   * The parsed name of the file being parsed (if it can be determined)
   */
  rawFile: string | null;
  /**
   * The location of the file being parsed (if it can be determined)
   */
  fileLocation: string | null;
};

/**
 * Tasks that describe what the parser is currently doing.
 */
export type ProgressTask =
  /**
   * Parsing a raw file
   */
  | "parseRaws"
  /**
   * Parsing a legends file
   */
  | "parseLegends"
  /**
   * Parsing a module `info.txt` file
   */
  | "parseModuleInfoFiles"
  /**
   * Resolving raws.
   *
   * Creature raws (and others, but only creature raws are currently supported) can reference other creatures
   * from the entire set of raws. This requires all the raws to be parsed before the references can be resolved.
   *
   * Eventually, this step will include other raw types, because it enables things like `CUT_X`, `SELECT_X`, etc.
   */
  | "resolveRaws"
  /**
   * Sitting idle, probably sending a progress update or not yet started.
   *
   * This step also includes the time spent parsing the `ParserOptions` and validating them.
   */
  | "idle";

/**
 * A payload that can be used to gauge the progress of the parsing process.
 */
export type ProgressPayload = {
  /**
   * The details of the current progress.
   */
  details: ProgressDetails;
  /**
   * The current task.
   */
  currentTask: ProgressTask;
  /**
   * The estimated percentage of completion.
   */
  percentage: number;
  /**
   * The current total number of raws parsed.
   */
  runningTotal: string;
};

/**
 * Raws are part of modules since 50.xx. Raw modules are loaded from 3 common locations:
 * `{df_directory}/data/vanilla`, `{df_directory}/mods`, and `{df_directory/data/installed_mods}`
 */
export type RawModuleLocation =
  /**
   * The "installed" mods directory
   */
  | "InstalledMods"
  /**
   * The "downloaded" mods directory
   */
  | "Mods"
  /**
   * The vanilla data file location
   */
  | "Vanilla"
  /**
   * An unknown location
   */
  | "Unknown"
  /**
   * Used for handling legends exported files
   */
  | "LegendsExport";
